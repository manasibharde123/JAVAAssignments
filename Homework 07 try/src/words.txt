How to run the AppleFileServer
The AppleFileServer is typically launched using the Sharing Preference. Launch System Preferences. Select Sharing. Select the Services tab. Select Personal File Sharing and click start.
Please refer to Server help
AppleFileServer [-d]
The -d option will prevent daemonization.
AppleFileServer -v
Use the .Nm macro to refer to your program throughout the man page like such:
Underlining is accomplished with the .Ar macro like this:
A list of items with descriptions:
Description of item a
Description of item b
A list of flags and their descriptions:
Description of -a flag
Description of -b flag
FILE_1 description
FILE_2 description
Use the .Nm macro to refer to your program throughout the man page like such:
Underlining is accomplished with the .Ar macro like this:
A list of items with descriptions:
Description of item a
Description of item b
A list of flags and their descriptions:
Description of -a flag
Description of -b flag
FILE_1 description
FILE_2 description
Use the .Nm macro to refer to your program throughout the man page like such:
Underlining is accomplished with the .Ar macro like this:
A list of items with descriptions:
Description of item a
Description of item b
A list of flags and their descriptions:
Description of -a flag
Description of -b flag
FILE_1 description
FILE_2 description
standard output.
Options include:
sets debugging flags.
switch.
specifies the names of the input fields if input does not have to be
split into an array.  If you were translating an awk script that
processes the password file, you might say:
Any delimiter can be used to separate the field names.
causes a2p to assume that input will always have that many fields.
tells a2p to use old awk behavior.  The only current differences are:
Old awk always has a line loop, even if there are no line
actions, whereas new awk does not.
In old awk, sprintf is extremely greedy about its arguments.
For example, given the statement
A2p cannot do as good a job translating as a human would, but it
usually does pretty well.  There are some areas where you may want to
examine the perl script produced and tweak it some.  Here are some of
them, in no particular order.
force numeric interpretation, even though the argument is always
integer anyway.  This is generally unneeded in perl, but a2p can't
tell if the argument is always going to be integer, so it leaves it
in.  You may wish to remove it.
Perl differentiates numeric comparison from string comparison.  Awk
has one operator for both that decides at run time which comparison to
do.  A2p does not try to do a complete job of awk emulation at this
point.  Instead it guesses which one you want.  It's almost always
right, but it can be spoofed.  All such guesses are marked with the
warn you if you use == where you should have used eq.
Perl does not attempt to emulate the behavior of awk in which
nonexistent array elements spring into existence simply by being
referenced.  If somehow you are relying on this mechanism to create
null entries for a subsequent for...in, they won't be there in perl.
If a2p makes a split line that assigns to a list of variables that
looks like (Fld1, Fld2, Fld3...) you may want to rerun a2p using the
throughout the script.  If it splits to an array instead, the script
is probably referring to the number of fields somewhere.
block to bypass the block under such circumstances can be simplified
from the perl script.
Perl has two kinds of array, numerically-indexed and associative.
translated to hashes, but if you happen to know that the index is
always going to be numeric you could change the {...} to [...].
over such an array.
assuming its equivalent, $#, to have the value %.20g.  You'll want to
Near the top of the line loop will be the split operation that is
implicit in the awk script.  There are times when you can move this
down past some conditionals that test the entire record so that the
split is not done as often.
For aesthetic reasons you may wish to change index variables from being
operations the variable is involved in to match.
are passed through unmodified.
Awk scripts are often embedded in a shell script that pipes stuff into
and out of awk.  Often the shell script wrapper can be incorporated
into the perl script, since perl can start up pipes into and out of
itself, and can do other things that awk can't do by itself.
often be simplified by referring to the variables $`, $& and $', as
long as they are within the scope of the pattern match that sets them.
The produced perl script may have subroutines defined to deal with
awk's semantics regarding getline and print.  Since a2p usually picks
correctness over efficiency.  it is almost always possible to rewrite
such code to be more efficient by discarding the semantic sugar.
For efficiency, you may wish to remove the keyword from any return
statement that is the last statement executed in a subroutine.  A2p
catches the most common case, but doesn't analyze embedded blocks for
subtler cases.
loop that tries to iterate over ARGV[0] won't find it.
A2p uses no environment variables.
It would be possible to emulate awk's behavior in selecting string
versus numeric operations at run time by inspection of the operands,
but it would be gross and inefficient.  Besides, a2p almost always
guesses right.
Storage for the awk syntax tree is currently static, and can run out.
standard output.
Options include:
sets debugging flags.
switch.
specifies the names of the input fields if input does not have to be
split into an array.  If you were translating an awk script that
processes the password file, you might say:
Any delimiter can be used to separate the field names.
causes a2p to assume that input will always have that many fields.
tells a2p to use old awk behavior.  The only current differences are:
Old awk always has a line loop, even if there are no line
actions, whereas new awk does not.
In old awk, sprintf is extremely greedy about its arguments.
For example, given the statement
A2p cannot do as good a job translating as a human would, but it
usually does pretty well.  There are some areas where you may want to
examine the perl script produced and tweak it some.  Here are some of
them, in no particular order.
force numeric interpretation, even though the argument is always
integer anyway.  This is generally unneeded in perl, but a2p can't
tell if the argument is always going to be integer, so it leaves it
in.  You may wish to remove it.
Perl differentiates numeric comparison from string comparison.  Awk
has one operator for both that decides at run time which comparison to
do.  A2p does not try to do a complete job of awk emulation at this
point.  Instead it guesses which one you want.  It's almost always
right, but it can be spoofed.  All such guesses are marked with the
warn you if you use == where you should have used eq.
Perl does not attempt to emulate the behavior of awk in which
nonexistent array elements spring into existence simply by being
referenced.  If somehow you are relying on this mechanism to create
null entries for a subsequent for...in, they won't be there in perl.
If a2p makes a split line that assigns to a list of variables that
looks like (Fld1, Fld2, Fld3...) you may want to rerun a2p using the
throughout the script.  If it splits to an array instead, the script
is probably referring to the number of fields somewhere.
block to bypass the block under such circumstances can be simplified
from the perl script.
Perl has two kinds of array, numerically-indexed and associative.
translated to hashes, but if you happen to know that the index is
always going to be numeric you could change the {...} to [...].
over such an array.
assuming its equivalent, $#, to have the value %.20g.  You'll want to
Near the top of the line loop will be the split operation that is
implicit in the awk script.  There are times when you can move this
down past some conditionals that test the entire record so that the
split is not done as often.
For aesthetic reasons you may wish to change index variables from being
operations the variable is involved in to match.
are passed through unmodified.
Awk scripts are often embedded in a shell script that pipes stuff into
and out of awk.  Often the shell script wrapper can be incorporated
into the perl script, since perl can start up pipes into and out of
itself, and can do other things that awk can't do by itself.
often be simplified by referring to the variables $`, $& and $', as
long as they are within the scope of the pattern match that sets them.
The produced perl script may have subroutines defined to deal with
awk's semantics regarding getline and print.  Since a2p usually picks
correctness over efficiency.  it is almost always possible to rewrite
such code to be more efficient by discarding the semantic sugar.
For efficiency, you may wish to remove the keyword from any return
statement that is the last statement executed in a subroutine.  A2p
catches the most common case, but doesn't analyze embedded blocks for
subtler cases.
loop that tries to iterate over ARGV[0] won't find it.
A2p uses no environment variables.
It would be possible to emulate awk's behavior in selecting string
versus numeric operations at run time by inspection of the operands,
but it would be gross and inefficient.  Besides, a2p almost always
guesses right.
Storage for the awk syntax tree is currently static, and can run out.
standard output.
Options include:
sets debugging flags.
switch.
specifies the names of the input fields if input does not have to be
split into an array.  If you were translating an awk script that
processes the password file, you might say:
Any delimiter can be used to separate the field names.
causes a2p to assume that input will always have that many fields.
tells a2p to use old awk behavior.  The only current differences are:
Old awk always has a line loop, even if there are no line
actions, whereas new awk does not.
In old awk, sprintf is extremely greedy about its arguments.
For example, given the statement
A2p cannot do as good a job translating as a human would, but it
usually does pretty well.  There are some areas where you may want to
examine the perl script produced and tweak it some.  Here are some of
them, in no particular order.
force numeric interpretation, even though the argument is always
integer anyway.  This is generally unneeded in perl, but a2p can't
tell if the argument is always going to be integer, so it leaves it
in.  You may wish to remove it.
Perl differentiates numeric comparison from string comparison.  Awk
has one operator for both that decides at run time which comparison to
do.  A2p does not try to do a complete job of awk emulation at this
point.  Instead it guesses which one you want.  It's almost always
right, but it can be spoofed.  All such guesses are marked with the
warn you if you use == where you should have used eq.
Perl does not attempt to emulate the behavior of awk in which
nonexistent array elements spring into existence simply by being
referenced.  If somehow you are relying on this mechanism to create
null entries for a subsequent for...in, they won't be there in perl.
If a2p makes a split line that assigns to a list of variables that
looks like (Fld1, Fld2, Fld3...) you may want to rerun a2p using the
throughout the script.  If it splits to an array instead, the script
is probably referring to the number of fields somewhere.
block to bypass the block under such circumstances can be simplified
from the perl script.
Perl has two kinds of array, numerically-indexed and associative.
translated to hashes, but if you happen to know that the index is
always going to be numeric you could change the {...} to [...].
over such an array.
assuming its equivalent, $#, to have the value %.20g.  You'll want to
Near the top of the line loop will be the split operation that is
implicit in the awk script.  There are times when you can move this
down past some conditionals that test the entire record so that the
split is not done as often.
For aesthetic reasons you may wish to change index variables from being
operations the variable is involved in to match.
are passed through unmodified.
Awk scripts are often embedded in a shell script that pipes stuff into
and out of awk.  Often the shell script wrapper can be incorporated
into the perl script, since perl can start up pipes into and out of
itself, and can do other things that awk can't do by itself.
often be simplified by referring to the variables $`, $& and $', as
long as they are within the scope of the pattern match that sets them.
The produced perl script may have subroutines defined to deal with
awk's semantics regarding getline and print.  Since a2p usually picks
correctness over efficiency.  it is almost always possible to rewrite
such code to be more efficient by discarding the semantic sugar.
For efficiency, you may wish to remove the keyword from any return
statement that is the last statement executed in a subroutine.  A2p
catches the most common case, but doesn't analyze embedded blocks for
subtler cases.
loop that tries to iterate over ARGV[0] won't find it.
A2p uses no environment variables.
It would be possible to emulate awk's behavior in selecting string
versus numeric operations at run time by inspection of the operands,
but it would be gross and inefficient.  Besides, a2p almost always
guesses right.
Storage for the awk syntax tree is currently static, and can run out.


 
 

 
 

 
 
-d
-h
-i
-k
-l
-q
-r
-S
-V
-w
 
 
The following list describes the values returned by ab:
 
 
Server Software
Server Hostname
The DNS or IP address given on the command line  
Server Port
Document Path
Document Length
Concurrency Level
The number of concurrent clients used during the test  
Time taken for tests
This is the time taken from the moment the first socket connection is created to the moment the last response is received  
Complete requests
The number of successful responses received  
Failed requests
Write errors
Non-2xx responses
Keep-Alive requests
The number of connections that resulted in Keep-Alive requests  
Total body sent
Total transferred
HTML transferred
Requests per second
Time per request
Transfer rate
 
 
 
 
CLI interface to the accessibility API.
There are no configuration options.
Copyright (C) 1989-2000, 2001 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be included in
translations approved by the Free Software Foundation instead of in
the original English.
[
]
[
]
reads a troff font file
and adds some additional font-metric information
that is used by the groff system.
The font file with the information added is written on the
standard output.
The information added is guessed using 
some parametric information about the font
and assumptions
about the traditional troff names for characters.
The main information added is the heights and depths of characters.
The
and
arguments should be the same as the corresponding parameters
in the DESC file;
is the name of the file describing the font;
if
ends with
the font will be assumed to be italic.
prints the version number.
All other options changes one of the parameters that is used
to derive the heights and depths.
Like the existing quantities in the font
file, each
is in
for a font whose point size is
must be one of:
The height of lowercase letters without ascenders such as x.
The height of figures (digits).
The height of characters with ascenders, such as b, d or l.
The height of characters such as parentheses.
The height of uppercase letters such as A.
The depth of a comma.
The depth of characters with descenders, such as p,q, or y.
The depth of characters such as parentheses.
makes no attempt to use the specified parameters to guess
the unspecified parameters.
If a parameter is not specified the default will be used.
The defaults are chosen to have the reasonable values for
a Times font.
Audio File Convert will convert a source audio file to a new audio file with the specified file and data types
print help text
Audio File Hash writes an SHA-1 hash to an audio file or prints (to stdout) the hash contained in an audio file
print help text
write hash code to audio file
print hash code from audio file (if present)
compare hash codes from two audio files
afida compares a reference audio file with a distorted version and estimates the perceivable spatial image distortions in terms of image shift and width.
print help text
Audio File Info prints out information about an audio file to stdout
Copyright (C) 1989-2000, 2001, 2002, 2003, 2005 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be included in
translations approved by the Free Software Foundation instead of in
the original English.
The whitespace between an command line option and its argument is optional.
creates a font file for use with groff and
is written in perl;
you must have perl version 5.004 or newer installed in order to run
is the AFM (Adobe Font Metric) file for the font.
is a file that says which groff character names map onto
each PostScript character name;
this file should contain a sequence of lines of the form
ps_char groff_char
where
is the PostScript name of the character
and
is the groff name of the character (as used in the groff font file).
The same
can occur multiple times in the file;
each
must occur at most once.
Lines starting with
and blank lines are ignored.
If the file isn't found in the current directory, it is searched in
If a PostScript character is not named as
are four uppercase hexadecimal digits), and is not mentioned in
and a generic groff glyph name can't be deduced using the
Adobe Glyph List (AGL, built into
then
puts the PostScript character into the groff font file as an unnamed
character which can only be accessed by the
escape sequence in
If option
is not specified, the encoding defined in the AFM file (i.e., entries
with non-negative character codes) is used.
Please refer to section `Using Symbols' in the groff info file which
describes how groff glyph names are constructed.
the character code) are still available in groff; they get glyph index
values greater than 255 (or greater than the biggest character code used
in the AFM file in the unlikely case that it is greater than 255) in the
groff font file.
Glyph indices of unencoded characters don't have a specific order; it
is best to access them with glyph names only.
The groff font file will be output to a file called
If there is a downloadable font file for the font, it may be listed in
the file
see
If the
option is used,
will automatically generate an italic correction,
a left italic correction and a subscript correction
for each character
(the significance of these parameters is explained in
these parameters may be specified for individual characters by
adding to the
lines of the form:
where
is the PostScript name of the character,
and
is the desired value of the corresponding parameter in thousandths of an em.
These parameters are normally needed only for italic (or oblique) fonts.
Use
as the slant parameter in the font file;
this is used by groff in the positioning of accents.
By default
uses the negative of the ItalicAngle specified in the afm file;
with true italic fonts it is sometimes desirable to use
a slant that is less than this.
If you find that characters from an italic font have accents
placed too far to the right over them,
then use the
option to give the font a smaller slant.
The device description file is
rather than the default
If not found in the current directory, the `devps' subdirectory of the
default font directory is searched (this is true for both the default
device description file and a file given with option
The PostScript font should be reencoded to use the encoding described
in enc_file.
The format of
is described in
If not found in the current directory, the `devps' subdirectory of the
default font directory is searched.
Generate an italic correction for each character so that 
the character's width plus the character's italic correction
is equal to
thousandths of an em
plus the amount by which the right edge of the character's bounding box
is to the right of the character's origin.
If this would result in a negative italic correction, use a zero
italic correction instead.
Also generate a subscript correction equal to the 
product of the tangent of the slant of the font and
four fifths of the x-height of the font.
If this would result in a subscript correction greater than the italic
correction, use a subscript correction equal to the italic correction
instead.
Also generate a left italic correction for each character
equal to
thousandths of an em
plus the amount by which the left edge of the character's bounding box
is to the left of the character's origin.
The left italic correction may be negative unless option
is given.
This option is normally needed only with italic (or oblique) fonts.
The font files distributed with groff were created using an option of
for italic fonts.
Prevent negative left italic correction values.
Roman font files distributed with groff were created with
to improve spacing with
Don't output a
command for this font.
Use this with constant-width fonts.
The font is special.
The effect of this option is to add the
command to the font file.
Print version.
Don't use the built-in Adobe Glyph List.
Device description file.
Font description file for font
List of downloadable fonts.
Encoding used for text fonts.
Standard mapping.
The groff info file, section `Using Symbols'.
Audio File Play plays an audio file to the default audio output
print help text
path
The
command is used to decompress files compressed with HFS+ compression.
Paths specified are recursively traversed (while remaining on the starting filesystem) and all encountered files are decompressed. If the
option is specified, the encountered files will not be decompressed, but their contents will be printed to standard output.
first appeared in Mac OS X 10.6..TH AGENTXTRAP 1 "20 Dec 2009" V5.6 "Net-SNMP"
agentxtrap - send an AgentX NotifyPDU to an AgentX master agent
issues an AgentX NotifyPDU to a master agent. One or more object
identifiers (OIDs) can be given as arguments on the command line.
A type and a value must accompany each object identifier.
Each variable name is given in the format specified in
if the
option is present then the notification is sent in the nondefault name context.
if the
option is present then that value, parsed as centiseconds, is taken to be the
sysUpTime field of the application.
if the
option is present then contact the AgentX master at ADDRESS and not the default
one.
Additionally all the options described in
under the
headers as well as the
options are supported.
In
the parsing of the
field is controlled by the
field. The possible values for the
field is one of the following characters:
Let
decide how
should be interpreted
INTEGER
Unsigned
Counter32
OCTET STRING of chaacters
OCTET STRING, entered as a sequence of optionally space separated hexadecimal
digit pairs
OCTET STRING, entered as a sequence of space separated decimal digits in the
range 0 - 255
NULL
OBJECT IDENTIFIER
TimeTicks
IpAddress
BITS
which are handled in the same way as the
command.
To send a generic linkUp trap to the manager for interface 1 the following
command can be used:
agentxtrap netSnmp.0.3 ifindex.1 i 1
snmpcmd(1), snmpset(1), variables(5), RFC 2741
probe
encode
encode
encode
are implemented as a single tool with multiple names.  All invocations
support the three verbs
and
If multiple files are passed to
the exit status will be non-zero only if
files contain data in the specified encoding.
perform the operation even if the output file already exists
display version and usage, then quit
be verbose
display version, then quit
For
read encoded data from the standand input.  For
write encoded data to the standard output.  Currently, "plain" data must
be written to and from specified filenames (see also
create output files in
Use
for output, overriding any stored or default name.  For
the appropriate suffix will be added to
implies only one file to be encoded or decoded.
override the default suffix for the given encoding
don't use BinHex runlength compression when encoding
Specify MacBinary encoding type.  Type 1 is undesirable because it has
neither a checksum nor a signature and is thus difficult to recognize.
In general, the tool returns a non-zero exit status if it fails.
The
command connects to the documents or
resources designated by
and displays each applet
referenced by that document in its own window. 
Note: if the documents referred to by
do not reference any
applets with the
tag,
does nothing.
For details on the HTML tags that appletviewer supports,
The following options are supported:
Starts the applet viewer in the Java debugger,
thus allowing you to debug applets in the document.
(See
Specifies the input
file encoding name.
Passes the string
through as a single argument to 
the Java interpreter
which runs
the appletviewer.
The argument should not contain spaces.
Multiple argument words must all begin with the prefix
which is stripped.
This is useful for adjusting the compiler's execution
environment or compiler memory usage.
The
utility runs the named
on each
argument
in turn.
Character sequences of the form
in
where
is a digit from 1 to 9, are replaced by the
following unused
In this case, the largest digit number of arguments are discarded for
each execution of
The options are as follows:
Normally arguments are taken singly; the optional number
specifies the number of arguments to be passed to
If the number is zero,
is run, without arguments, once for each
If any sequences of
occur in
the
option is ignored.
The use of the character
as a magic character may be changed with the
option.
Display the commands that would have been executed, but do not actually
execute them.
The following environment variable affects the execution of
Pathname of shell to use.
If this variable is not defined, the Bourne shell is used.
is similar to
compares the `a' files to the `b' files;
runs
5 times; and
links all files in the current directory to the directory
default shell
Shell metacharacters in
may have bizarre effects; it is best to enclose complicated
commands in single quotes
The
command appeared in
keyword ...
apropos searches a set of database files containing short descriptions
of system commands for keywords and displays the result on the
standard output.
John W. Eaton was the original author of 
Zeyd M. Ben-Halim released man 1.2, and Andries Brouwer followed up with versions 1.3 thru 1.5p. 
Federico Lucifredi <flucifredi@acm.org> is the current maintainer.
whatis(1), man(1).
[
]
[
]
[
]
[
]
[
]
[
]
[
]
[
]
[
[
[
]
]
]
[
]
[
]
The tool apt, annotation processing tool, includes a set of 
new reflective APIs and supporting infrastructure to
process program annotations. The apt reflective APIs 
provide a build-time, source-based, read-only view of
program structure. These reflective APIs are designed 
to cleanly model the JavaTM programming language's
type system after the addition of generics. First, 
apt runs annotation processors that can produce new source
code and other files. Next, apt can cause compilation of 
both original and generated source files, easing
development. The reflective APIs and other APIs used 
to interact with the tool are subpackages of com.sun.mirror. 
A fuller discussion of how the tool operates as well as  
instructions for developing with apt are in Getting
Started with apt at 
Options may be in any order. For a discussion of parameters 
which apply to a specific option, see OPTIONS below.
Zero or more source files to be processed.
One or more files that list source files or other options.
Specify the directory root under which processor-generated 
source files will be placed; files are placed
in subdirectories based on package namespace. 
Do not compile sources files to class files.
Print out textual representation of specified types; 
perform no annotation processing or compilation. 
Options to pass to annotation processors -- these are 
not interpreted by apt directly, but are made
available for use by individual processors 
Specify where to find annotation processor factories; if 
this option is used, the classpath is not searched
for factories. 
Name of annotation processor factory to use; 
bypasses default discovery process 
Specify where to place processor and javac generated class files 
or
Specify where to find user class files and annotation processor 
factories. If
is given, the
classpath is not searched for factories. 
Consult the 
man page for information on 
options. 
The apt tool and its associated APIs may be changed or 
superseded in future j2se releases. 


 
 
 
 
 
 

 
 
 

      $ httpd -l
    
 
 

      $ apachectl restart
      $ _
    
 
 
 

 
 
 
  
 
 
-q
  
 
 
  
 
 
-g
  
 
 
-c
-p
  
  
 
-i
-a
-A
-e
  
 
 

      $ _
    
 
 

      $ _
    
 
This way a line named
 

    
 
 

    
 
For a quick test of the apxs mechanism you can create a sample Apache module template plus a corresponding Makefile via:
 

      $ apxs -g -n foo
      Creating [DIR]  foo
      $ _
    
 
Then you can immediately compile this sample module into a shared object and load it into the Apache server:
 

      $ cd foo
      $ make all reload
      apachectl restart
      $ _
    
 

The
command with no arguments, displays the machine's architecture type.
The other use of the
command it to run a selected architecture of a universal binary.
A universal binary contains code that can run on different architectures.
By default, the operating system will select the architecture that most closely
matches the processor type.
This means that an intel architecture is selected on intel processors and a
powerpc architecture is selected on powerpc processors.
A 64-bit architecture is preferred over a 32-bit architecture on a 64-bit
processor, while only 32-bit architectures can run on a 32-bit processor.
When the most natural architecture is unavailable, the operating system will
try to pick another architecture.
On 64-bit processors, a 32-bit architecture is tried.
If this is also unavailable, the operating system on an intel processor will
try running a 32-bit powerpc architecture.
Otherwise, no architecture is run, and an error results.
The
command can be used to alter the operating system's normal selection order.
The most common use is to select the 32-bit architecture on a 64-bit processor,
even if a 64-bit architecture is available.
The
argument must be one of the currently supported architectures:
32-bit intel
64-bit intel
Either prefix the architecture with a hyphen, or (for compatibility with
other commands), use
followed by the architecture.
If more than one architecture is specified, the operating system will try each
one in order, skipping an architecture that is not supported on the current
processor, or is unavailable in the universal binary.
The other options are:
Add the native 32-bit architecture to the list of architectures.
Add the native 64-bit architecture to the list of architectures.
Clears the environment that will be passed to the command to be run.
Deletes the named environment variable from the environment that will be passed
to the command to be run.
Assigns the given value to the named environment variable in the environment
that will be passed to the command to be run.
Any existing environment variable with the same name will be replaced.
Prints a usage message and exits.
The
argument is the command to run, followed by any arguments to pass to the
command.
It can be a full or partial path, while a lone name will be looked up in the user's
command search path.
If no architectures are specified on the command line, the
command takes the basename of the
argument and searches for the first property list file with that basename and
the
suffix, in the
sub-directory in each of the standard domains, in the following order:
User settings
Local settings
Network settings
System settings
This property list contains the architecture order preferences, as well
as the full path to the real executable.
For examples of the property list format, look at the files in
On an intel processor:
1234
shows the intel little endian byte order.
When a link is made to
command with a different name, that name is used to find
the corresponding property list file.
Thus, other commands can be wrapped so that they have custom architecture
selection order.
Because of some internal logic in the code, hard links to the
command may not work quite right.
It is best to avoid using hard links, and only use symbolic links to the
command.
The environment variable
can be used to provide architecture order preferences.
It is checked before looking for the corresponding property list file.
The value of the environment variable
is composed of one or more specifiers, separated by semicolons.
A specifier is made up of one, two or three fields, separated by colons.
Architectures specified in order, are separated by commas and make up the last
(mandatory) field.
The first field, if specified, is a name of a program, which selects this
specifier if that name matches the program name in question.
If the name field is empty or there is no name field, the specifier matches
any program name.
Thus, ordering of specifiers is important, and the one with no name should
be last.
When the
command is called directly, the
name provides the path information to the executable (possibly via the command
search path).
When a name is specified in a
specifier, the path information can alternately be specified as a second
field following the name.
When the
command is called indirectly via a link, this path information must be
specified.
If not specified as a second field in a specifier, the executable path will
be looked up in the corresponding property list file.
A specifier that matches any name.
A specifier that matches the program named
(the full executable path is in the
file).
A specifier with all fields specified.
A specifier for
and a second specifier that would match any other name.
Running the
command on an interpreter script may not work if the interpreter is a link
to the arch command, especially if a 64-bit architecture is specified (since the
command is 2-way universal, 32-bit only).
is a facility for manipulating the filesystem container for an applications using App Sandbox.
A container is a per-application filesytem hierarchy rooted in
Prints a summary of commands and their behaviours.
Determines with the given application is signed with App Sandbox entitlements.
In addition, if the application is specified by pid using the --pid syntax,
prints out whether the application is actually running with App Sandbox enabled,
a traditional sandbox, or no sandbox at all.
The following commands manage filesystem containers for sandboxed apps.
Print the path to the application's container.
Create and initialize the application's container.
Containers are normally created automatically when sandboxed applications
are run.
This command creates the container for an application without running the
application.
Upgrade the application's container to the current container schema.
Existing containers are normally automatically upgraded to the latest
container schema when their associated applications are run.
This command upgrades an existing container without running the associated
application.
Repair a container's structure by re-creating missing files and symlinks,
repairing file permissions so that files are owned by and accessible to the current user, and
rebuilding the application's sandbox information.
This operation may require authorization by the user.
Each container has an access control list comprised of code requirements.
A sandboxed application must satify one or more of the code requirements on
their container in order to run.
The following commands manipulate the container's access control list:
Update the access control list for the application's container to
include the application's designated code requirement.
Update the access control list for the application's container to
include the specified code requirement.
Update the access control list for the application's container such
that it consists of only the application's designated code requirement.
Any other code requirements will be removed from the ACL.
Print list of code requirements in the access control list for the
given application's container.
Validate the application against each of the code requirements in its
container's access control list.
Each code requirement in the ACL is labeled with one of the following:
application does not validate against code requirement.
application validates against code requirement.
application validates against code requirement and code requirement is
the same as the application's designated code requirement.
Synonym for acl validate.
App Sandbox will follow any symlinks in the paths to users' home directories.
In addition, it has a whitelist of other locations where it will acknowledge
and honor symbolic links.
Any symlinks not in this whitelist will not be followed and, as a result,
App Sandboxed applications will not have access to the paths that the symlinks
refer to.
The following command displays the whitelist of paths where App Sandbox will
acknowledge symlinks at:
Display the list of paths that App Sandbox searches for symlinks and, for
any paths that are symlinks, display where the symlinks currently resolve to. 
Collect diagnostic information related to Application Sandboxing and containers.
The information is collected into a single file that can be sent to Apple to aid in diagnosing 
problems when an application runs inside of a sandbox.
Should you choose to send the diagnostic information to Apple, then you must agree to this disclaimer:
This diagnostic tool generates files that allow Apple to investigate issues with your computer 
and help Apple to improve its products. The generated files may contain some of your personal 
information, which may include, but not be limited to, the serial number or similar unique number
for your device, your user name, your file names or your computer name. The information is used by Apple in
By enabling this diagnostic tool and sending a copy of the generated files to Apple, you are
consenting to Apple's use of the content of such files.
Additional information concerning a specific application can be gathered via the app subcommand.
This command must be run as 'root'.
The following command collects diagnostic information:
Collection diagnostic information. Outputs the path to the folder or file containing the information. 
Optional arguments:
Do not compress the folder containing the dianostic files into a Zip file.
Do not show the disclaimer. Use of this option constitutes acceptance of the disclaimer.
Do not reveal the resulting diagnostic file in Finder.
Do not show verbose output while running the diagnostic.
Optional subcommand:
Specify an application for which additional information will be gathered.
By default,
displays paths relative to the user's home directory.
This flag causes any paths in the output to be displayed as absolute paths
instead.
Write internal logging information to a temporary file.
Many commands require an application specification as one of their arguments.
Applications can be specified any of the following ways:
The application name as it appears in the Applications folder, with or
For example, "TextEdit".
The path to the application binary or bundle.
For example, 
Explicitly indicate the following argument is to be interpreted as the path
to the application binary or bundle.
The --file flag removes ambiguity when an argument can be interpreted as either
an application name or a valid path to an application.
For example, 
Interpret the following argument as the bunder identifier of the application.
For example, 
Interpret the following argument as the process identifier of a running
application.
For example, 
Interpret the following argument as a path to an existing container and determine the application for that container .
For example, 
The user's containers folder.
The
command first appeared in Mac OS X Version 10.7.
inspects or processes a .car file generated from an asset catalog, removing
requested scale factors, device idioms, subtypes, graphics feature set classes and
memory classes. 
A list of flags and their descriptions:
version information for 
Produce a JSON description of the asset catalog object with the given name to
--output directory if given or to stdout if no output path given. If no name is provided,
report on the contents of the entire car file.
Keep all assets that have idiom that is given on the command
line.
Keep all assets that have scale factor that is given on the command
line, present scale factors will not be removed if there is no fallback available.
Keep all assets that have memory class that is given on the command
line, present memory class will not be removed if there is no fallback available.
Keep all assets that have graphics class that is given on the command
line. The present graphics class will not be removed if there is no fallback available.
process the hosted idioms list, this is a list of the idioms that must
always be preserved in the car file. This list cannot contain
universal, and the different idioms should be given in a comma separated list.
Subtype to keep integer
Output file name, if no output file is given then input file is overwritten.
The
and
utilities
read commands from standard input or a specified file.
The commands are executed at a later time, using
executes commands at a specified time;
lists the user's pending jobs, unless the user is the superuser; in that
case, everybody's jobs are listed;
deletes jobs;
executes commands when system load levels permit; in other words, when the load average
drops below _LOADAVG_MX (1.5), or the value specified in the invocation of
The
utility allows some moderately complex
specifications.
It accepts times of the form
or
to run a job at a specific time of day.
(If that time is already past, the next day is assumed.)
As an alternative, the following keywords may be specified:
or
(4pm)
and time-of-day may be suffixed with
or
for running in the morning or the evening.
The day on which the job is to be run may also be specified
by giving a date in the form
with an optional
or giving a date of the forms
The specification of a date must follow the specification of
the time of day.
Time can also be specified as:
where the time-units can be
or
and
may be told to run the job today by suffixing the time with
and to run the job tomorrow by suffixing the time with
The shortcut
can be used instead of
For example, to run a job at 4pm three days from now, use
to run a job at 10:00am on July 31, use
and to run a job at 1am tomorrow, use
The
utility also supports the
time format (see
option).
For both
and
commands are read from standard input or the file specified
with the
option.
The working directory, the environment (except for the variables
and
and the
are retained from the time of invocation.
An
or
command invoked from a
shell will retain the current userid.
The user will be mailed standard error and standard output from his
commands, if any.
Mail will be sent using the command
If
is executed from a
shell, the owner of the login shell will receive the mail.
The superuser may use these commands in any case.
For other users, permission to use
is determined by the files
and
If the file
exists, only usernames mentioned in it are allowed to use
In these two files,
a user is considered to be listed
only if the user name has no blank or other characters
before it on its line and a newline character immediately after the name,
even at the end of the file.
Other lines are ignored and may be used for comments.
If
does not exist,
is checked, every username not mentioned in it is then allowed
to use
If neither exists, only the superuser is allowed use of
Note that
is implemented through the
daemon periodically invoking
which is disabled by default.
See 
for information about enabling
Is an alias for
Cat the jobs listed on the command line to standard output.
Is an alias for
(this option is deprecated; use
instead).
Read the job from
rather than standard input.
With no arguments, list all jobs for the invoking user.
If one or more
job numbers are given, list only those jobs.
Send mail to the user when the job has completed even if there was no
output.
Use the specified queue.
A queue designation consists of a single letter; valid queue designations
range from
to
and
to
The
queue (a) is the default for
and the
queue (b) is the default for
Queues with higher letters run with increased niceness.
If a job is submitted to a queue designated with an uppercase letter, it
is treated as if it had been submitted to batch at that time.
If
is given a specific queue, it will only show jobs pending in that queue.
Remove the specified jobs.
The argument should be in the form
where each pair of letters represents the following:
The first two digits of the year (the century).
The second two digits of the year.
The month of the year, from 1 to 12.
the day of the month, from 1 to 31.
The hour of the day, from 0 to 23.
The minute of the hour, from 0 to 59.
The second of the minute, from 0 to 61.
If the
and
letter pairs are not specified, the values default to the current
year.
If the
letter pair is not specified, the value defaults to 0.
For
shows completed but not yet deleted jobs in the queue; otherwise
shows the time the job will be executed.
directory containing job files
job-creation lock file
directory containing output spool files
allow permission control
deny permission control
login records
If the file
is not available or corrupted,
or if the user is not logged on at the time
is invoked, the mail is sent to the userid found
in the environment variable
If that is undefined or empty, the current userid is assumed.
The
and
utilities
as presently implemented are not suitable when users are competing for
resources.
If this is the case, another batch system such as
may be more suitable.
Specifying a date past 2038 may not work on some systems.
At was mostly written by
The time parsing routines are by
with minor enhancements by
The
command converts numeric addresses to their symbolic equivalents.  If full debug symbol information is available,
for example in a .app.dSYM sitting beside a .app, then the output of atos will include file name and source line
number information.
The input addresses may be given in one of three ways:
A list of addresses at the end of the argument list.
Using the
argument to specify the path of an input file containing whitespace-separated numeric addresses.
If no addresses were directly specified, 
enters an interactive mode, reading addresses from stdin.
The symbols are found in either a binary image file or in a currently executing process, as specified by:
The path to a binary image file in which to look up symbols.
The process ID or the partial name of a currently executing process in which to look up symbols.
Multiple process IDs or paths can be specified if necessary, and the two can be mixed in any order.
When working with a Mach-O binary image file, 
considers only addresses and symbols defined in that binary image file, at their default locations (unless the -l or -s option is given). 
When working with a running process, 
considers addresses and symbols defined in all binary images currently loaded by that process, at their loaded locations.
The following additional options are available.
The particular architecure of a binary image file in which to look up symbols.
The load address of the binary image.  This value is always assumed to be in hex, even without a "0x" prefix.  The input addresses are assumed to be in a binary image with that load address.  Load addresses for binary
images can be found in the Binary Images: section at the bottom of crash, sample, leaks, and malloc_history reports.
The slide value of the binary image -- this is the difference between the load address of a binary image, and the address at which the binary image was built.  
This slide value is subtracted from the input addresses.  
It is usually easier to directly specify the load address with the
argument than to manually calculate a slide value.
If a process was specified, the first line of atos output should be a header of the form "Looking up symbols in process <pid> named:  <process-name>".
This is primarily used when
is invoked as part of a stackshot(1) run, for verification of the process ID and name.
Full debug symbol information is available in Sketch.app.dSYM, which sits alongside Sketch.app.  When Sketch.app was run,
the Sketch binary (which was built at 0x100000000) was loaded at 0x10acde000.  Running 'sample Sketch' showed 3 addresses that
we want to get symbol information for -- 0x10acea1d3, 0x10ace4bea, and 0x10ace4b7a.
First notice that the .dSYM is next to the .app:
Sketch.app
Sketch.app.dSYM
Now, to symbolicate, we run atos with the
flag specifying the path to the actual Sketch executable (not the .app wrapper), the
flag, and the
flag to specify the load address.
-[SKTGraphicView drawRect:] (in Sketch) (SKTGraphicView.m:445)
-[SKTGraphic drawHandlesInView:] (in Sketch) (NSGeometry.h:110)
-[SKTGraphic drawHandleInView:atPoint:] (in Sketch) (SKTGraphic.m:490)
It is possible to get symbols for addresses from a different machine architecture than the system on which
is running.  For example, when running
on an Intel-based system, one may wish to get the symbol for an address that came from a backtrace of a process running on an ARM device.  To do so, use the
flag to specify the desired architecture (such as i386 or arm) and pass in a corresponding symbol-rich Mach-O binary image file with a binary image of the corresponding architecture (such as a Universal Binary).
The
utility selects records from the audit trail files based on the specified
criteria.
Matching audit records are printed to the standard output in
their raw binary form.
If no
argument is specified, the standard input is used
by default.
Use the
utility to print the selected audit records in human-readable form.
The options are as follows:
Select all records.
Select records that occurred after or on the given datetime.
Select records that occurred before the given datetime.
Select records matching the given audit classes specified as a comma
separated list of audit flags.
See
for a description of audit flags.
Select records that occurred on a given date.
This option cannot be used with
or
Select records with the given effective user ID or name.
Select records with the given effective group ID or name.
Select records with the given real group ID or name.
Select records having a subject token with matching ID.
Select records with the given event name or number. This option can
be used more then once to select records of multiple event types.
See
for a description of audit event names and numbers.
Select records containing path tokens, where the pathname matches
one of the comma delimited extended regular expression contained in
given specification.
Regular expressions which are prefixed with a tilde
are excluded
from the search results.
These extended regular expressions are processed from left to right,
and a path will either be selected or deslected based on the first match.
Since commas are used to delimit the regular expressions, a backslash
character should be used to escape the comma if it is a part of the search
pattern.
Select records containing the given message queue ID.
Select records containing the given process ID.
Select records containing the given semaphore ID.
Select records containing the given shared memory ID.
Select records with the given real user ID or name.
Select records with the given audit ID.
Invert sense of matching, to select records that do not match.
To select all records associated with effective user ID root from the audit
log
To select all
events from that log:
Output from the above command lines will typically be piped to a new trail
file, or via standard output to the
command.
Select all records containing a path token where the pathname contains
Select all records containing path tokens, where the pathname is a TTY
device:
Select all records containing path tokens, where the pathname is a TTY
except for
The OpenBSM implementation was created by McAfee Research, the security
It was subsequently adopted by the TrustedBSD Project as the foundation for
the OpenBSM distribution.
This software was created by McAfee Research, the security research division
of McAfee, Inc., under contract to Apple Computer Inc.
Additional authors include
and SPARTA Inc.
The Basic Security Module (BSM) interface to audit records and audit event
stream format were defined by Sun Microsystems.
provides authorization-based file opening services.  In its simplest form,
verifies that it is allowed to open
(using an appropriate
authorization right) and then writes the file to stdout.  If
is specified,
will read from
and write to the file.
is designed to be used both from the command line and programmatically.
The
flag allows a parent process to receive an open file descriptor pointing to
the file in question.
Before opening
will make an authorization request for a right of the form:
rights only allow for read-only file descriptors.
The
option can be used to provide an AuthorizationRef constructed by
the client.  This generally prevents
from presenting an authorization dialog containing its own name.
specifies that STDOUT_FILENO has been dup2()'d onto a pipe to a
parent process and that an open file descriptor to
should be sent back across it using the SCM_RIGHTS extension to
rather than
having the file itself written to or read from
specifies that
should read one AuthorizationExternalForm structure from
convert it to an AuthorizationRef, and attempt to use it to authorize
the
operation.  The authorization should refer to the 
right corresponding to the requested operation.  The authorization
data will be read before any additional data supplied on
and will not be included in data written with 
instructs
to open
has not been specified,
will then copy
to
until
is closed.
append to
rather than truncating it (truncating is the default).
create the file if it doesn't exist.
requires
specify the mode bits if a file is created.
numerically specify the flags that should be passed to
require that the file being created not exist.
or better can be obtained):
will fail if an appropriate
or
right cannot be obtained or if the named path does not exist.
should support prefix path authentication such that the right
should use
appeared in Mac OS X 10.1 to assist with the manipulation of disk devices.
runs the specified workflow.  To create or edit a workflow, use the Automator application.
The following options are available:
Set variable
to
for this run of 
Set 
as the input to 
If 
Run in verbose mode.
AUValidation tests a specified AudioUnit for API and behavioural conformance.
returns: OK: 0, malformed execution: 1, unit not conformant: -1
must be specified first. can specify either: -ppc to run using Rosetta on Intel machine, or -32 to run as 32 bit. If neither specified runs as 64 bit native architecture
print help text
lists all available AudioUnits of any type
lists all available AudioUnits of type 'TYPE'
opens the AudioUnit specified by the TYPE SUBT MANU component ID's and tests that unit.
iterates through all of the AU's of specified TYPE and MANU
execution is terminated when first error is encountered
execution is terminated when first warning is encountered
continue validating when an error occurs in batch mode. 
quiet - does no printing except for errors or warnings
doesn't print parameter or Factory Presets information
only runs a basic open and initialize test. good for debugging basic functionality
wait after finished - good for profiling memory usage see 'man leaks'
The version is printed to stdout.
The version is printed to stdout in hexadecimal.
Each line in the file should contain one complete command.
AUValidation tests a specified AudioUnit for API and behavioural conformance.
returns: OK: 0, malformed execution: 1, unit not conformant: -1
print help text
lists all available AudioUnits of any type
lists all available AudioUnits of type 'TYPE'
opens the AudioUnit specified by the TYPE SUBT MANU component ID's and tests that unit.
iterates through all of the AU's of specified TYPE and MANU
execution is terminated when first error is encountered
execution is terminated when first warning is encountered
continue validating when an error occurs in batch mode. 
quiet - does no printing except for errors or warnings
doesn't print parameter or Factory Presets information
only runs a basic open and initialize test. good for debugging basic functionality
wait after finished - good for profiling memory usage see 'man leaks'
The version is printed to stdout.
The version is printed to stdout in hexadecimal.
Each line in the file should contain one complete command.
The
executable is used for the managment of persistent AVB entities which are advertised by the Mac.
is launched automatically by launched as needed on demand and should not be launched manually.
configured Entities
allocated Entity IDs
The 
tool is used to capture a snapshot of the current AVB system state and help diagnose 
common issues with AVB.
looks for the system to determine that it actually has AVB capable interfaces and that at 
least one of these has been enabled.
will produce a number of warnings which may not be errors depending on the setup of the system.
Things such as missing local or remote attributes for MSRP will be flagged as a warning but is
not an error if the Mac is not sourcing or sinking streams as appropriate for the warning.
report may be the result of a network device. Please use your best judgement before filing the bug report.
The following options are available:
Disable the reading of the AVDECC AEM from the device and archiving it in the result.
Disable dumping of the state of the AVB audio driver device tree.
Enabled reading of and dumping the ACMP state of the entities.
Enable sending of the AVDECC AECP AEM GET_STREAM_INFO command to each of the possible stream sources and sinks and including in the info dump.
Enable sending of the AVDECC AECP AEM GET_COUNTER command to each of the possible stream sources and sinks and including in the info dump.
output The information gathered by
including the command line output, an ioreg dump and the current system.log and kernel.log files.
The
executable is used for the managment AVB features and settings.
The following options are available:
Enable or disable the virtual audio entity on the specified interface, or list the set of interfaces with a virtual audio entity enabled.
An interface must be present and enabled for AVB use to enable the virtual audio entity on that interface. A virtual audio entity can always be removed from an interface regardless of if the interface is present or not.
can be used to compress video media to different types for sharing on the web or loading onto devices.
prints usage information and available presets
sets the console output to verbose
sets the console output to quiet
shows progress during the export (default with -v)
converts the source media to an output file using the specified preset. Use --listPresets to get the full list. Common presets are:
is the source media file
is the output movie file
lists all of the presets avconvert supports
Optional flags to configure the audio export settings
a limit value for the data rate for the audio track in bits per second
sets the format of the audio output using a fourCC eg. aac
configures the sample rate of the output in Hertz. eg. 44100
is the channel count of the output eg. 1 (for mono) 2 (stereo) 4 (quad)
Optional flags to configure the video export settings
a limit value for the video data rate in bits per second
sets the height of the output video in pixels
sets the width of the output video in pixels
sets the format of the video output using a fourCC eg. avc1
sets the frame rate of the output video in frames per second
specifies how often keyframes appear in the output video
sets whether or not to enable frame reordering (b-frames)
Optional flags configuring track and metadata output
omits the listed track type from the exported movie Allowable track types are:
sets the file from which the metadata for the export is found if that is different from the source movie
	avconvert --listPresets
Lists the available presets that can be used for export
	avconvert --preset AppleM4ViPod --source sample_movie.mov --output ipod_movie.m4v
Exports the source movie "sample_movie.mov" to "ipod_movie.m4v" using the iPod encoding preset
	avconvert --preset AppleM4VAppleTV --source sample_movie.mov --output appletv_movie.m4v -adr 128000 -sr 441000
Overrides the AppleTV defaults for audio data rate and sample rate in the output movie
	avconvert --preset AppleM4VAppleTV --source sample_movie.mov --output appletv_movie.m4v -ot audioTrack
Omits the audio track from the output file "appletv_movie.m4v"
command first appeared in Mac OS X 10.7..de EX
awk
[
]
[
]
[
|
]
[
]
scans each input
for lines that match any of a set of patterns specified literally in
or in one or more files
specified as
With each pattern
there can be an associated action that will be performed
when a line of a
matches the pattern.
Each line is matched against the
pattern portion of every pattern-action statement;
the associated action is performed for each matched pattern.
The file name 
means the standard input.
Any
of the form
is treated as an assignment, not a filename,
and is executed at the time it would have been opened if it were a filename.
The option
followed by
is an assignment to be done before
is executed;
any number of
options may be present.
The
option defines the input field separator to be the regular expression
An input line is normally made up of fields separated by white space,
or by regular expression
The fields are denoted
refers to the entire line.
If
is null, the input line is split into one field per character.
A pattern-action statement has the form
A missing 
means print the line;
a missing pattern always matches.
Pattern-action statements are separated by newlines or semicolons.
An action is a sequence of statements.
A statement can be one of the following:
break
continue
Statements are terminated by
semicolons, newlines or right braces.
An empty
stands for
with the usual C escapes recognized within.
Expressions take on string or numeric values as appropriate,
and are built using the operators
(exponentiation), and concatenation (indicated by white space).
The operators
are also available in expressions.
Variables may be scalars, array elements
(denoted
or fields.
Variables are initialized to the null string.
Array subscripts may be any string,
not necessarily numeric;
this allows for a form of associative memory.
Multiple subscripts such as
are permitted; the constituents are concatenated,
separated by the value of
The
statement prints its arguments on the standard output
(or on a file if
or
is present or on a pipe if
is present), separated by the current output field separator,
and terminated by the output record separator.
and
may be literal names or parenthesized expressions;
identical string values in different statements denote
the same open file.
The
statement formats its expression list according to the format
(see
The built-in function
closes the file or pipe
The built-in function
flushes any buffered output for the file or pipe
The mathematical functions
and
are built in.
Other built-in functions:
the length of its argument
taken as a string,
or of
if no argument.
random number on (0,1)
sets seed for
and returns the previous seed.
truncates to an integer value
the
substring of
that begins at position
counted from 1.
the position in
where the string
occurs, or 0 if it does not.
the position in
where the regular expression
occurs, or 0 if it does not.
The variables
and
are set to the position and length of the matched string.
splits the string
into array elements
and returns
The separation is done with the regular expression
or with the field separator
if
is not given.
An empty string as field separator splits the string
into one array element per character.
substitutes
for the first occurrence of the regular expression
in the string
If
is not given,
is used.
same as
except that all occurrences of the regular expression
are replaced;
and
return the number of replacements.
the string resulting from formatting
according to the
format
executes
and returns its exit status
returns a copy of
with all upper-case characters translated to their
corresponding lower-case equivalents.
returns a copy of
with all lower-case characters translated to their
corresponding upper-case equivalents.
The ``function''
sets
to the next input record from the current input file;
sets
to the next record from
sets variable
instead.
Finally,
pipes the output of
into
each call of
returns the next line of output from
In all cases,
returns 1 for a successful input,
Patterns are arbitrary Boolean combinations
(with
of regular expressions and
relational expressions.
Regular expressions are as defined in
Isolated regular expressions
in a pattern apply to the entire line.
Regular expressions may also occur in
relational expressions, using the operators
and
is a constant regular expression;
any string (constant or variable) may be used
as a regular expression, except in the position of an isolated regular expression
in a pattern.
A pattern may consist of two patterns separated by a comma;
in this case, the action is performed for all lines
from an occurrence of the first pattern
though an occurrence of the second.
A relational expression is one of the following:
where a relop is any of the six relational operators in C,
and a matchop is either
(matches)
or
(does not match).
A conditional is an arithmetic expression,
a relational expression,
or a Boolean combination
of these.
The special patterns
and
may be used to capture control before the first input line is read
and after the last.
and
do not combine with other patterns.
Variable names with special meanings:
conversion format used when converting numbers
(default
regular expression used to separate fields; also settable
by option
number of fields in the current record
ordinal number of the current record
ordinal number of the current record in the current file
the name of the current input file
input record separator (default newline)
output field separator (default blank)
output record separator (default newline)
output format for numbers (default
separates multiple subscripts (default 034)
argument count, assignable
argument array, assignable;
non-null members are taken as filenames
array of environment variables; subscripts are names.
Functions may be defined (at the position of a pattern-action statement) thus:
function foo(a, b, c) { ...; return x }
Parameters are passed by value if scalar and by reference if array name;
functions may be called recursively.
Parameters are local to the function; all other variables are global.
Thus local variables may be created by providing excess parameters in
the function definition.
length($0) > 72
Print lines longer than 72 characters.
{ print $2, $1 }
Print first two fields in opposite order.
      { print $2, $1 }
	{ s += $1 }
Add up first column, print sum and average.
BEGIN	{	# Simulate echo(1)
	for (i = 1; i < ARGC; i++) printf "%s ", ARGV[i]
	exit }
A. V. Aho, B. W. Kernighan, P. J. Weinberger,
The AWK Programming Language,
Addison-Wesley, 1988.  ISBN 0-201-07981-X
There are no explicit conversions between numbers and strings.
To force an expression to be treated as a number add 0 to it;
to force it to be treated as a string concatenate
The scope rules for variables in functions are a botch;
the syntax is worse.
encodes and decodes Base64 data, as specified in RFC 4648. With no options,
reads raw data from stdin and writes encoded data as a continuous block to
stdout.
The following options are available:
Insert line breaks every
characters. Default is 0, which generates an unbroken stream.
Decode incoming Base64 stream into binary data.
Print usage summary and exit.
Read input from
Default is stdin; passing
also represents stdin.
Write output to
Default is stdout; passing
also represents stdout.
The
utility deletes any prefix ending with the last slash
character present in
(after first stripping trailing slashes),
and a
if given.
The
is not stripped if it is identical to the remaining characters in
The resulting filename is written to the standard output.
A non-existent suffix is ignored.
If
is specified, then every argument is treated as a
as if
were invoked with just one argument.
If
is specified, then the
is taken as its argument, and all other arguments are treated as a
The
utility deletes the filename portion, beginning
with the last slash
character to the end of
(after first stripping trailing slashes),
and writes the result to the standard output.
The following line sets the shell variable
to
The
and
utilities are expected to be
compatible.
[options]
[file]
executes commands read from the standard input or from a file.
is intended to be a conformant implementation of the
Shell and Utilities portion of the IEEE POSIX specification
(IEEE Standard 1003.1).
can be configured to be POSIX-conformant by default.
In addition to the single-character shell options documented in the
interprets the following options when it is invoked:
If the
option is present, then commands are read from
If there are arguments after the
they are assigned to the positional parameters, starting with
If the
option is present, the shell is
Make
act as if it had been invoked as a login shell (see
below).
If the
option is present, the shell becomes
(see
below).
If the
option is present, or if no arguments remain after option
processing, then commands are read from the standard input.
This option allows the positional parameters to be set
when invoking an interactive shell.
is printed on the standard output.
These are the strings that
are subject to language translation when the current locale
below).
that may be reused as input.
A
signals the end of options and disables further option processing.
Any arguments after the
are treated as filenames and arguments.  An argument of
also interprets a number of multi-character options.
These options must appear on the command line before the
single-character options to be recognized.
Arrange for the debugger profile to be executed before the shell
starts.
Turns on extended debugging mode (see the description of the
option to the
builtin below)
and shell function tracing (see the description of the
builtin below).
Display a usage message on standard output and exit successfully.
Execute commands from
instead of the standard personal initialization file
if the shell is interactive (see
below).
Do not use the GNU
library to read command lines when the shell is interactive.
Do not read either the system-wide startup file
or any of the personal initialization files
or
By default,
reads these files when it is invoked as a login shell (see
below).
Do not read and execute the personal initialization file
if the shell is interactive.
This option is on by default if the shell is invoked as
The shell becomes restricted (see
below).
Show version information for this instance of
on the standard output and exit successfully.
If arguments remain after option processing, and neither the
nor the
option has been supplied, the first argument is assumed to
be the name of a file containing shell commands.
If
is invoked in this fashion, 
is set to the name of the file, and the positional parameters
are set to the remaining arguments.
reads and executes commands from this file, then exits.
executed in the script.
If no commands are executed, the exit status is 0.
An attempt is first made to open the file in the current directory, and,
if no file is found, then the shell searches the directories in
for the script.
or one started with the 
option.
and without the
option
whose standard input and error are
both connected to terminals (as determined by
or one started with the
option.
is set and
includes
if
is interactive,
allowing a shell script or a startup file to test this state.
The following paragraphs describe how
executes its startup files.
If any of the files exist but cannot be read,
reports an error.
Tildes are expanded in file names as described below under
in the
section.
When
is invoked as an interactive login shell, or as a non-interactive shell
file exists.
and executes commands from the first one that exists and is readable.
The
option may be used when the shell is started to inhibit this behavior.
When a login shell exits,
exists.
When an interactive shell that is not a login shell is started,
This may be inhibited by using the
option.
When
is started non-interactively, to run a shell script, for example, it
looks for the variable
in the environment, expands its value if it appears there, and uses the
expanded value as the name of a file to read and execute.
behaves as if the following command were executed:
but the value of the
variable is not used to search for the file name.
If
is invoked with the name
it tries to mimic the startup behavior of historical versions of
as closely as possible,
while conforming to the POSIX standard as well.
When invoked as an interactive login shell, or a non-interactive
read and execute commands from
and
in that order.
The
option may be used to inhibit this behavior.
When invoked as an interactive shell with the name
looks for the variable
expands its value if it is defined, and uses the
expanded value as the name of a file to read and execute.
Since a shell invoked as
does not attempt to read and execute commands from any other startup
files, the
option has no effect.
A non-interactive shell invoked with the name
does not attempt to read any other startup files. 
When invoked as
enters
mode after the startup files are read.
When
is started in
mode, as with the
command line option, it follows the POSIX standard for startup files.
In this mode, interactive shells expand the
variable and commands are read and executed from the file
whose name is the expanded value.
No other startup files are read.
attempts to determine when it is being run by the remote shell
If
The
option may be used to inhibit this behavior, and the
option may be used to force another file to be read, but
or allow them to be specified.
If the shell is started with the effective user (group) id not equal to the
files are read, shell functions are not inherited from the environment, the
variable, if it appears in the environment, is ignored,
and the effective user id is set to the real user id.
the same, but the effective user id is not reset.
The following definitions are used throughout the rest of this
document.
A space or tab.
A sequence of characters considered as a single unit by the shell.
Also known as a
A 
consisting only of alphanumeric characters and underscores, and
beginning with an alphabetic character or an underscore.  Also
referred to as an
A character that, when unquoted, separates words.  One of the following:
symbols:
The following words are recognized as reserved when unquoted and either
the first word of a simple command (see
below) or the third word of a 
or
command:
specifies the command to be executed, and is passed as argument zero.
The remaining words are passed as arguments to the invoked command.
the character
The format for a pipeline is:
The standard output of
is connected via a pipe to the standard input of
This connection is performed before any redirections specified by the
command (see
below).
The return status of a pipeline is the exit status of the last
value of the last (rightmost) command to exit with a non-zero status,
or zero if all commands exit successfully.
If the reserved word
precedes a pipeline, the exit status of that pipeline is the logical
negation of the exit status as described above.
The shell waits for all commands in the pipeline to
terminate before returning a value.
If the
reserved word precedes a pipeline, the elapsed as well as user and
system time consumed by its execution are reported when the pipeline
terminates.
The
variable may be set to a format string that specifies how the timing
information should be displayed; see the description of
under
below.
Each command in a pipeline is executed as a separate process (i.e., in a
subshell).
of the operators
or
and optionally terminated by one of
or
Of these list operators,
and
have equal precedence, followed by
and
which have equal precedence.
of a semicolon to delimit commands.
If a command is terminated by the control operator
in a subshell.  The shell does not wait for the command to
finish, and the return status is 0.  Commands separated by a
are executed sequentially; the shell waits for each
command to terminate in turn.  The return status is the
exit status of the last command executed.
The control operators
and
denote AND lists and OR lists, respectively.
An AND list has the form
is executed if, and only if,
returns an exit status of zero.
An OR list has the form
is executed if and only if
returns a non-zero exit status.  The return status of
AND and OR lists is the exit status of the last command
executed in the list.
below).
Variable assignments and builtin
commands that affect the shell's environment do not remain in effect
after the command completes.  The return status is the exit status of
The return status is the exit status of
word is permitted to be recognized.  Since they do not cause a word
below under
If the value of the expression is non-zero, the return status is 0;
otherwise the return status is 1.  This is exactly equivalent to
Return a status of 0 or 1 depending on the evaluation of
Expressions are composed of the primaries described below under
Word splitting and pathname expansion are not performed on the words
variable expansion, arithmetic expansion, command substitution, process
substitution, and quote removal are performed.
as primaries.
right of the operator is considered a pattern and matched according
If the shell option
is enabled, the match is performed without regard to the case
of alphabetic characters.
Any part of the pattern may be quoted to force it to be matched as a
string.
When it is used, the string to the right of the operator is considered
The return value is 0 if the string matches
the pattern, and 1 otherwise.
If the regular expression is syntactically incorrect, the conditional
expression's return value is 2.
If the shell option
is enabled, the match is performed without regard to the case
of alphabetic characters.
Substrings matched by parenthesized subexpressions within the regular
matching the entire regular expression.
Expressions may be combined using the following operators, listed
in decreasing order of precedence:
This may be used to override the normal precedence of operators.
True if
is false.
True if both
and
are true.
True if either
or
is true.
the entire conditional expression.
of items.
below).
The return status is the exit status of the last command that executes.
list, no commands are executed, and the return status is 0.
to the rules described below under
until it evaluates to zero.
If any expression is omitted, it behaves as if it evaluates to 1.
that is executed, or false if any of the expressions is invalid.
of items.  The set of expanded words is printed on the standard
below).  The
prompt is then displayed and a line read from the standard input.
If the line consists of a number corresponding to one of
the displayed words, then the value of
is set to that word.  If the line is empty, the words and prompt
are displayed again.  If EOF is read, the command completes.  Any
other value read causes
to be set to null.  The line read is saved in the variable
The
is executed after each selection until a
command is executed.
The exit status of
is the exit status of the last command executed in
or zero if no commands were executed.
as for pathname expansion (see
below).
expansion, parameter and variable expansion, arithmetic substitution,
command substitution, process substitution and quote removal.
expansion, parameter and variable expansion, arithmetic substitution,
command substitution, and process substitution.
If the shell option
is enabled, the match is performed without regard to the case
of alphabetic characters.
When a match is found, the
subsequent matches are attempted.  The exit status is zero if no
pattern matches.  Otherwise, it is the exit status of the
The
is executed.  If its exit status is zero, the
executed, if present.  The exit status is the exit status of the
last command executed, or zero if no condition tested true.
the
is executed as long as the last command in
returns a non-zero exit status.
is the exit status
none was executed.
A shell function is an object that is called like a simple command and
executes a compound command with a new set of positional parameters.
Shell functions are declared as follows:
name of a simple command.
Any redirections (see
below) specified when a function is defined are performed
when the function is executed.
The exit status of a function definition is zero unless a syntax error
occurs or a readonly function with the same name already exists.
When executed, the exit status of a function is the exit status of the
last command executed in the body.  (See
below.)
In a non-interactive shell, or an interactive shell in which the
option to the
builtin is enabled (see
below), a word beginning with
causes that word and all remaining characters on that line to
be ignored.  An interactive shell without the
option enabled does not allow comments.  The
option is on by default in interactive shells.
characters or words to the shell.  Quoting can be used to 
disable special treatment for special characters, to prevent
reserved words from being recognized as such, and to prevent
parameter expansion.
has special meaning to the shell and must be quoted if it is to
represent itself.
When the command history expansion facilities are being used
(see
below), the
to prevent history expansion.
There are three quoting mechanisms: the
single quotes, and double quotes.
It preserves the literal value of the next character that follows,
is treated as a line continuation (that is, it is removed from the
input stream and effectively ignored).
Enclosing characters in single quotes preserves the literal value
of each character within the quotes.  A single quote may not occur
between single quotes, even when preceded by a backslash.
Enclosing characters in double quotes preserves the literal value
of all characters within the quotes, with the exception of
and, when history expansion is enabled,
The characters
and
retain their special meaning within double quotes.  The backslash
retains its special meaning only when followed by one of the following
characters:
or
A double quote may be quoted within double quotes by preceding it with
a backslash.
If enabled, history expansion will be performed unless an
appearing in double quotes is escaped using a backslash.
The backslash preceding the
is not removed.
The special parameters
and
have special meaning when in double
quotes (see
below).
as specified by the ANSI C standard.  Backslash escape sequences, if
present, are decoded as follows:
alert (bell)
backspace
an escape character
form feed
new line
carriage return
horizontal tab
vertical tab
backslash
single quote
(one to three digits)
(one or two hex digits)
The expanded result is single-quoted, as if the dollar sign had
not been present.
the string to be translated according to the current locale.
is ignored.
If the string is translated and replaced, the replacement is
double-quoted.
A
is an entity that stores values.
It can be a
a number, or one of the special characters listed below under
A
is a parameter denoted by a
Attributes are assigned using the
builtin command (see
below in
A parameter is set if it has been assigned a value.  The null string is
a valid value.  Once a variable is set, it may be unset only by using
the
builtin command (see
below).
A
may be assigned to by a statement of the form
If
is not given, the variable is assigned the null string.  All
undergo tilde expansion, parameter and variable expansion,
command substitution, arithmetic expansion, and quote
removal (see
below).  If the variable has its
attribute set, then
is evaluated as an arithmetic expression even if the $((...)) expansion is
not used (see
below).
Word splitting is not performed, with the exception
Pathname expansion is not performed.
Assignment statements may also appear as arguments to the
and
builtin commands.
In the context where an assignment statement is assigning a value
to a shell variable or array index, the += operator can be used to
append to or add to the variable's previous value.
When += is applied to a variable for which the integer attribute has been
variable's current value, which is also evaluated.
When += is applied to an array variable using compound assignment (see
below), the
variable's value is not unset (as it is when using =), and new values are
appended to the array beginning at one greater than the array's maximum index.
appended to the variable's value.
A
is a parameter denoted by one or more
digits, other than the single digit 0.  Positional parameters are
assigned from the shell's arguments when it is invoked,
and may be reassigned using the
builtin command.  Positional parameters may not be assigned to
with assignment statements.  The positional parameters are
temporarily replaced when a shell function is executed (see
below).
When a positional parameter consisting of more than a single
digit is expanded, it must be enclosed in braces (see
below).
The shell treats several parameters specially.  These parameters may
only be referenced; assignment to them is not allowed.
Expands to the positional parameters, starting from one.  When the
expansion occurs within double quotes, it expands to a single word
with the value of each parameter separated by the first character
of the 
is the first character of the value of the
variable.  If
is unset, the parameters are separated by spaces.
If
is null, the parameters are joined without intervening separators.
Expands to the positional parameters, starting from one.  When the
expansion occurs within double quotes, each parameter expands to a
If the double-quoted expansion occurs within a word, the expansion of
the first parameter is joined with the beginning part of the original
word, and the expansion of the last parameter is joined with the last
part of the original word.
expand to nothing (i.e., they are removed).
Expands to the number of positional parameters in decimal.
Expands to the status of the most recently executed foreground
pipeline.
Expands to the current option flags as specified upon invocation, 
by the
builtin command, or those set by the shell itself
(such as the
option).
Expands to the process ID of the shell.  In a () subshell, it
expands to the process ID of the current shell, not the
subshell.
Expands to the process ID of the most recently executed background
(asynchronous) command.
Expands to the name of the shell or shell script.  This is set at
shell initialization.  If
is invoked with a file of commands,
is set to the name of that file.  If
is started with the
option, then
is set to the first argument after the string to be
executed, if one is present.  Otherwise, it is set
to the file name used to invoke
as given by argument zero.
At shell startup, set to the absolute pathname used to invoke the
shell or shell script being executed as passed in the environment
or argument list.
Subsequently, expands to the last argument to the previous command,
after expansion.
Also set to the full pathname used to invoke each command executed
and placed in the environment exported to that command.
When checking mail, this parameter holds the name of the mail file
currently being checked.
The following variables are set by the shell:
Expands to the full file name used to invoke this instance of
An array variable whose values are the number of parameters in each
frame of the current bash execution call stack.
The number of
parameters to the current subroutine (shell function or script executed
When a subroutine is executed, the number of parameters passed is pushed onto
(see the description of the
option to the
builtin below)
An array variable containing all of the parameters in the current bash
execution call stack.  The final parameter of the last subroutine call
is at the top of the stack; the first parameter of the initial call is
at the bottom.  When a subroutine is executed, the parameters supplied
(see the description of the
option to the
builtin below)
The command currently being executed or about to be executed, unless the
shell is executing a command as the result of a trap,
in which case it is the command executing at the time of the trap.
An array variable whose members are the line numbers in source files
The element with index 0 is the portion of the string
matching the entire regular expression.
This variable is read-only.
An array variable whose members are the source filenames corresponding
Incremented by one each time a subshell or subshell environment is spawned.
The initial value is 0.
A readonly array variable whose members hold version information for
this instance of
The values assigned to the array members are as follows:
The patch level.
The build version.
Expands to a string describing the version of this instance of
cursor position.
This variable is available only in shell functions invoked by the
below).
The current command line.
This variable is available only in shell functions and external
commands invoked by the
below).
The index of the current cursor position relative to the beginning of
the current command.
If the current cursor position is at the end of the current command,
This variable is available only in shell functions and external
commands invoked by the
below).
The set of characters that the Readline library treats as word
separators when performing word completion.
If
is unset, it loses its special properties, even if it is
subsequently reset.
words in the current command line.
The words are split on shell metacharacters as the shell parser would
separate them.
This variable is available only in shell functions invoked by the
below).
An array variable (see
below) containing the current contents of the directory stack.
Directories appear in the stack in the order they are displayed by the
builtin.
Assigning to members of this array variable may be used to modify
directories already in the stack, but the
and
builtins must be used to add and remove directories.
Assignment to this variable will not change the current directory.
If
is unset, it loses its special properties, even if it is
subsequently reset.
Expands to the effective user ID of the current user, initialized at
shell startup.  This variable is readonly.
An array variable containing the names of all shell functions
currently in the execution call stack.
The element with index 0 is the name of any currently-executing
shell function.
The bottom-most element is "main".
This variable exists only when a shell function is executing.
Assignments to
have no effect and return an error status.
If
is unset, it loses its special properties, even if it is
subsequently reset.
An array variable containing the list of groups of which the current
user is a member.
Assignments to    
have no effect and return an error status.
If
is unset, it loses its special properties, even if it is
subsequently reset.
The history number, or index in the history list, of the current
command.
If
is unset, it loses its special properties, even if it is
subsequently reset.
Automatically set to the name of the current host.
Automatically set to a string that uniquely
describes the type of machine on which
is executing.
The default is system-dependent.
Each time this parameter is referenced, the shell substitutes
a decimal number representing the current sequential line number
(starting with 1) within a script or function.  When not in a
script or function, the value substituted is not guaranteed to
be meaningful.
If
is unset, it loses its special properties, even if it is
subsequently reset.
Automatically set to a string that fully describes the system
type on which
The default is system-dependent.
The previous working directory as set by the
command.
The value of the last option argument processed by the
builtin command (see
below).
The index of the next argument to be processed by the
builtin command (see
below).
Automatically set to a string that
describes the operating system on which
is executing.
The default is system-dependent.
An array variable (see
below) containing a list of exit status values from the processes
in the most-recently-executed foreground pipeline (which may
contain only a single command).
The process ID of the shell's parent.  This variable is readonly.
The current working directory as set by the
command.
Each time this parameter is referenced, a random integer between
0 and 32767 is
generated.  The sequence of random numbers may be initialized by assigning
a value to
If
is unset, it loses its special properties, even if it is
subsequently reset.
Set to the line of input read by the
builtin command when no arguments are supplied.
Each time this parameter is
referenced, the number of seconds since shell invocation is returned.  If a
value is assigned to 
the value returned upon subsequent
references is
the number of seconds since the assignment plus the value assigned.
If
is unset, it loses its special properties, even if it is
subsequently reset.
A colon-separated list of enabled shell options.  Each word in
the list is a valid argument for the
option to the
builtin command (see
below).  The options appearing in
are those reported as
If this variable is in the environment when
starts up, each shell option in the list will be enabled before
reading any startup files.
This variable is read-only.
Incremented by one each time an instance of
is started.
Expands to the user ID of the current user, initialized at shell startup.
This variable is readonly.
The following variables are used by the shell.  In some cases,
assigns a default value to a variable; these cases are noted
below.
its value is interpreted as a filename containing commands to
initialize the shell, as in
The value of
is subjected to parameter expansion, command substitution, and arithmetic
expansion before being interpreted as a file name.
is not used to search for the resultant file name.
The search path for the
command.
This is a colon-separated list of directories in which the shell looks
for destination directories specified by the
command.
A sample value is
when printing selection lists.  Automatically set upon receipt of a SIGWINCH.
generated by a shell function invoked by the programmable completion
with value
it assumes that the shell is running in an emacs shell buffer and disables
line editing.
The default editor for the
builtin command.
A colon-separated list of suffixes to ignore when performing
filename completion (see
below).
A filename whose suffix matches one of the entries in 
is excluded from the list of matched filenames.
A sample value is
A colon-separated list of patterns defining the set of filenames to
be ignored by pathname expansion.
If a filename matched by a pathname expansion pattern also matches one
of the patterns in
it is removed from the list of matches.
A colon-separated list of values controlling how commands are saved on
the history list.
If the list of values includes
lines which begin with a
character are not saved in the history list.
A value of 
causes lines matching the previous history entry to not be saved.
A value of
A value of
causes all previous lines matching the current line to be removed from
the history list before that line is saved.
Any value not in the above list is ignored.
all lines read by the shell parser are saved on the history list,
subject to the value of
The second and subsequent lines of a multi-line compound command are
not tested, and are added to the history regardless of the value of
The name of the file in which command history is saved (see
command history is not saved when an interactive shell exits.
The maximum number of lines contained in the history file.  When this
variable is assigned a value, the history file is truncated, if
necessary, by removing the oldest entries,
to contain no more than that number of lines.  The default
value is 500.  The history file is also truncated to this size after
writing it when an interactive shell exits.
A colon-separated list of patterns used to decide which command lines
should be saved on the history list.  Each pattern is anchored at the
beginning of the line and must match the complete line (no implicit
after the checks specified by
are applied.
backslash; the backslash is removed before attempting a match.
The second and subsequent lines of a multi-line compound command are
not tested, and are added to the history regardless of the value of
The number of commands to remember in the command history (see
below).  The default value is 500.
If this variable is set and not null, its value is used as a format string
If this variable is set, time stamps are written to the history file so
they may be preserved across shell sessions.
The home directory of the current user; the default argument for the
The value of this variable is also used when performing tilde expansion.
Contains the name of a file in the same format as
that should be read when the shell needs to complete a
hostname.
The list of possible hostname completions may be changed while the
shell is running;
the next time hostname completion is attempted after the
value is changed,
adds the contents of the new file to the existing list.
If
to obtain the list of possible hostname completions.
When
is unset, the hostname list is cleared.
The
that is used
for word splitting after expansion and to
split lines into words with the
builtin command.  The default value is
``<space><tab><newline>''.
Controls the
action of an interactive shell on receipt of an
character as the sole input.  If set, the value is the number of
consecutive
characters which must be
typed as the first characters on an input line before
exits.  If the variable exists but does not have a numeric value, or
has no value, the default value is 10.  If it does not exist,
signifies the end of input to the shell.
The filename for the
startup file, overriding the default of
(see
below).
Used to determine the locale category for any category not specifically
This variable determines the collation order used when sorting the
results of pathname expansion, and determines the behavior of range
expressions, equivalence classes, and collating sequences within
pathname expansion and pattern matching.
This variable determines the interpretation of characters and the
behavior of character classes within pathname expansion and pattern
matching.
This variable determines the locale used to translate double-quoted
This variable determines the locale category used for number formatting.
for printing selection lists.  Automatically set upon receipt of a SIGWINCH.
If this parameter is set to a file name and the
variable is not set,
informs the user of the arrival of mail in the specified file.
Specifies how
often (in seconds)
checks for mail.  The default is 60 seconds.  When it is time to check
for mail, the shell does so before displaying the primary prompt.
If this variable is unset, or set to a value that is not a number
greater than or equal to zero, the shell disables mail checking.
A colon-separated list of file names to be checked for mail. 
The message to be printed when mail arrives in a particular file
may be specified by separating the file name from the message with a `?'.
the current mailfile. 
Example:
supplies a default value for this variable, but the location of the user
If set to the value 1,
displays error messages generated by the
builtin command (see
below).
is initialized to 1 each time the shell is invoked or a shell
script is executed.
The search path for commands.  It
is a colon-separated list of directories in which
the shell looks for commands (see
below).
current directory.
A null directory name may appear as two adjacent colons, or as an initial
or trailing colon.
The default path is system-dependent,
and is set by the administrator who installs
A common value is
invocation option had been supplied.  If it is set while the shell is
had been executed.
If set, the value is executed as a command prior to issuing each primary
prompt.
The value of this parameter is expanded (see
below) and used as the primary prompt string.  The default value is
The value of this parameter is expanded as with
and used as the secondary prompt string.  The default is
The value of this parameter is used as the prompt for the
command (see
above).
The value of this parameter is expanded as with
and the value is printed before each command
displays during an execution trace.  The first character of
is replicated multiple times, as necessary, to indicate multiple
The full pathname to the shell is kept in this environment variable.
If it is not set when the shell starts,
assigns to it the full pathname of the current user's login shell.
The value of this parameter is used as a format string specifying
how the timing information for pipelines prefixed with the
reserved word should be displayed.
expanded to a time value or other information.
The escape sequences and their meanings are as follows; the
braces denote optional portions.
The elapsed time in seconds.
The number of CPU seconds spent in user mode.
The number of CPU seconds spent in system mode.
the number of fractional digits after a decimal point.
A value of 0 causes no decimal point or fraction to be output.
At most three places after the decimal point may be specified;
included.
If the value is null, no timing information is displayed.
A trailing newline is added when the format string is displayed.
In an interactive shell, the value is interpreted as the
number of seconds to wait for input after issuing the primary prompt.
terminates after waiting for that number of seconds if input does
not arrive.
This variable controls how the shell interacts with the user and
job control.  If this variable is set, single word simple
commands without redirections are treated as candidates for resumption
of an existing stopped job.  There is no ambiguity allowed; if there is
more than one job beginning with the string typed, the job most recently
accessed is selected.  The
of a stopped job, in this context, is the command line used to
start it.
If set to the value
the string supplied must match the name of a stopped job exactly;
if set to
the string supplied needs to match a substring of the name of a
stopped job.  The
value provides functionality analogous to the
job identifier (see
below).  If set to any other value, the supplied string must
be a prefix of a stopped job's name; this provides functionality
The two or three characters which control history expansion
and tokenization (see
the character which signals the start of a history
character, which is used as shorthand for re-running the previous
command entered, substituting one string for another in the command.
The optional third character is the character
which indicates that the remainder of the line is a comment when found
comment character causes history substitution to be skipped for the
remaining words on the line.  It does not necessarily cause the shell
parser to treat the rest of the line as a comment.
provides one-dimensional array variables.  Any variable may be used as
an array; the
builtin will explicitly declare an array.  There is no maximum
limit on the size of an array, nor any requirement that members
be indexed or assigned contiguously.  Arrays are indexed using
integers and are zero-based.
An array is created automatically if any variable is assigned to using
is treated as an arithmetic expression that must evaluate to a number
greater than or equal to zero.  To explicitly declare an array, use
(see
below).
specified for an array variable using the
and
builtins.  Each attribute applies to all members of an array.
Arrays are assigned to using compound assignments of the form
the optional brackets and subscript are supplied, that index is assigned to;
otherwise the index of the element assigned is the last index assigned
to by the statement plus one.  Indexing starts at zero.
This syntax is also accepted by the
builtin.  Individual array elements may be assigned to using the
Any element of an array may be referenced using
conflicts with pathname expansion.  If
word appears within double quotes.  If the word is double-quoted,
word with the value of each array member separated by the first
character of the
If the double-quoted expansion occurs within a word, the expansion of
the first parameter is joined with the beginning part of the original
word, and the expansion of the last parameter is joined with the last
part of the original word.
This is analogous to the expansion
Referencing an array variable without a subscript is equivalent to
referencing element zero.
The
Care must be taken to avoid unwanted side effects caused by filename
generation.
The
and
builtins each accept a
option to specify an array.  The
builtin accepts a
option to assign a list of words read from the standard input
to an array.  The
and
builtins display array values in a way that allows them to be
reused as assignments.
Expansion is performed on the command line after it has been split into
words.  There are seven kinds of expansion performed:
and
The order of expansions is: brace expansion, tilde expansion,
parameter, variable and arithmetic expansion and
command substitution
(done in a left-to-right fashion), word splitting, and pathname
expansion.
On systems that can support it, there is an additional expansion
Only brace expansion, word splitting, and pathname expansion
can change the number of words of the expansion; other expansions
expand a single word to a single word.
The only exceptions to this are the expansions of
as explained above (see
is a mechanism by which arbitrary strings
may be generated.  This mechanism is similar to
need not exist.  Patterns to be brace expanded take
the form of an optional
followed by either a series of comma-separated strings or
a sequence expression between a pair of braces, followed by
an optional
The preamble is prefixed to each string contained
within the braces, and the postscript is then appended
to each resulting string, expanding left to right.
Brace expansions may be nested.  The results of each expanded
string are not sorted; left to right order is preserved.
When integers are supplied, the expression expands to each number between
When characters are supplied, the expression expands to each character
Brace expansion is performed before any other expansions,
and any characters special to other expansions are preserved
in the result.  It is strictly textual.
does not apply any syntactic interpretation to the context of the
expansion or the text between the braces.
A correctly-formed brace expansion must contain unquoted opening
and closing braces, and at least one unquoted comma or a valid
sequence expression.
Any incorrectly formed brace expansion is left unchanged.
being considered part of a brace expression.
is not considered eligible for brace expansion.
This construct is typically used as shorthand when the common
prefix of the strings to be generated is longer than in the
above example:
or
Brace expansion introduces a slight incompatibility with
historical versions of
does not treat opening or closing braces specially when they
appear as part of a word, and preserves them in the output.
removes braces from words as a consequence of brace
expansion.  For example, a word entered to
appears identically in the output.  The same word is
output as
after expansion by
If strict compatibility with
is desired, start
with the
option or disable brace expansion with the
option to the
command (see
below).
the characters preceding the first unquoted slash (or all characters,
If none of the characters in the tilde-prefix are quoted, the
characters in the tilde-prefix following the tilde are treated as a
If this login name is the null string, the tilde is replaced with the
value of the shell parameter
If
is unset, the home directory of the user executing the shell is
substituted instead.
Otherwise, the tilde-prefix is replaced with the home directory
associated with the specified login name.
If the tilde-prefix is a `~+', the value of the shell variable
replaces the tilde-prefix.
if it is set, is substituted.
If the characters following the tilde in the tilde-prefix consist
element from the directory stack, as it would be displayed by the
builtin invoked with the tilde-prefix as an argument.
If the characters following the tilde in the tilde-prefix consist of a
If the login name is invalid, or the tilde expansion fails, the word
is unchanged.
Each variable assignment is checked for unquoted tilde-prefixes immediately
following a
or the first
In these cases, tilde expansion is also performed.
Consequently, one may use file names with tildes in assignments to
and
and the shell assigns the expanded value.
command substitution, or arithmetic expansion.  The parameter name
or symbol to be expanded may be enclosed in braces, which
are optional but serve to protect the variable to be expanded from
characters immediately following it which could be
interpreted as part of the name.
not escaped by a backslash or within a quoted string, and not within an
embedded arithmetic expansion, command substitution, or parameter
expansion.
when
is a positional parameter with more than one digit,
or when
is followed by a character which is not to be
interpreted as part of its name.
a level of variable indirection is introduced.
expanded and that value is used in the rest of the substitution, rather
The exclamation point must immediately follow the left brace in order to
introduce indirection.
parameter expansion, command substitution, and arithmetic expansion.
that is unset or null; omitting the colon results in a test only for a
parameter that is unset.
is unset or null, the expansion of
is substituted.  Otherwise, the value of
is substituted.
If
is unset or null, the expansion of
is assigned to
The value of
is then substituted.  Positional parameters and special parameters may
not be assigned to in this way.
If
if
is not present) is written to the standard error and the shell, if it
substituted.
If
is null or unset, nothing is substituted, otherwise the expansion of
is substituted.
ARITHMETIC EVALUATION
below).
index of the specified array.
Note that a negative offset must be separated from the colon by at least
one space to avoid being confused with the :- expansion.
Substring indexing is zero-based unless the positional parameters 
are used, in which case the indexing starts at 1.
separated by the first character of the
special variable.
otherwise.
key expands to a separate word.
If
is
or 
the value substituted is the number of positional parameters.
If
is an array name subscripted by
or
the value substituted is the number of elements in the array.
The 
is expanded to produce a pattern just as in pathname
expansion.  If the pattern matches the beginning of
the value of
then the result of the expansion is the expanded value of
If
is
or
the pattern removal operation is applied to each positional
parameter in turn, and the expansion is the resultant list.
If
is an array variable subscripted with
or
the pattern removal operation is applied to each member of the
array in turn, and the expansion is the resultant list.
pathname expansion.
If the pattern matches a trailing portion of the expanded value of
then the result of the expansion is the expanded value of
If
is
or
the pattern removal operation is applied to each positional
parameter in turn, and the expansion is the resultant list.
If
is an array variable subscripted with
or
the pattern removal operation is applied to each member of the
array in turn, and the expansion is the resultant list.
pathname expansion.
If
is
or
the substitution operation is applied to each positional
parameter in turn, and the expansion is the resultant list.
If
is an array variable subscripted with
or
the substitution operation is applied to each member of the
array in turn, and the expansion is the resultant list.
the command name.  There are two forms:
or
replacing the command substitution with the standard output of the
command, with any trailing newlines deleted.
Embedded newlines are not deleted, but they may be removed during
word splitting.
When the old-style backquote form of substitution is used,
backslash retains its literal meaning except when followed by
or
The first backquote not preceded by a backslash terminates the
command substitution.
parentheses make up the command; none are treated specially.
Command substitutions may be nested.  To nest when using the backquoted form,
escape the inner backquotes with backslashes.
If the substitution appears within double quotes, word splitting and
pathname expansion are not performed on the results.
Arithmetic expansion allows the evaluation of an arithmetic expression
and the substitution of the result.  The format for arithmetic expansion is:
The
is treated as if it were within double quotes, but a double quote
inside the parentheses is not treated specially.
All tokens in the expression undergo parameter expansion, string
expansion, command substitution, and quote removal.
Arithmetic expansions may be nested.
The evaluation is performed according to the rules listed below under
If
is invalid,
prints a message indicating failure and no substitution occurs.
It takes the form of
or
passed as an argument to the current command as the result of the
When available, process substitution is performed
simultaneously with parameter and variable expansion, 
command substitution,
and arithmetic expansion.
The shell scans the results of
parameter expansion,
command substitution,
and
arithmetic expansion
that did not occur within double quotes for
The shell treats each character of
as a delimiter, and splits the results of the other
expansions into words on these characters.  If
is unset, or its
value is exactly
the default, then
any sequence of
characters serves to delimit words.  If
has a value other than the default, then sequences of
the whitespace characters
and
are ignored at the beginning and end of the
word, as long as the whitespace character is in the
value of
(an
whitespace character).
Any character in
that is not
whitespace, along with any adjacent
whitespace characters, delimits a field.
A sequence of
whitespace characters is also treated as a delimiter.
If the value of
is null, no word splitting occurs.
Unquoted implicit null arguments, resulting from the expansion of
parameters that have no values, are removed.
If a parameter with no value is expanded within double quotes, a
null argument results and is retained.
Note that if no expansion occurs, no splitting
is performed.
After word splitting,
unless the
option has been set,
scans each word for the characters
and
If one of these characters appears, then the word is
regarded as a
and replaced with an alphabetically sorted list of
file names matching the pattern.
If no matching file names are found,
and the shell option
is disabled, the word is left unchanged.
If the 
option is set, and no matches are found,
the word is removed.
If the
shell option is set, and no matches are found, an error message
is printed and the command is not executed.
If the shell option
is enabled, the match is performed without regard to the case
of alphabetic characters.
When a pattern is used for pathname expansion,
the character
at the start of a name or immediately following a slash
must be matched explicitly, unless the shell option
is set.
When matching a pathname, the slash character must always be
matched explicitly.
In other cases, the
character is not treated specially.
See the description of
below under
for a description of the
and
shell options.
The
shell variable may be used to restrict the set of file names matching a
If
is set, each matching file name that also matches one of the patterns in
is removed from the list of matches.
The file names
and
are always ignored when
is set and not null.  However, setting
to a non-null value has the effect of enabling the
shell option, so all other file names beginning with a
will match.
To get the old behavior of ignoring file names beginning with a
make
one of the patterns in
The
option is disabled when
is unset.
Any character that appears in a pattern, other than the special pattern
characters described below, matches itself.  The NUL character may not
occur in a pattern.  A backslash escapes the following character; the
escaping backslash is discarded when matching.
The special pattern characters must be quoted if
they are to be matched literally.
The special pattern characters have the following meanings:
Matches any string, including the null string.
Matches any single character.
Matches any one of the enclosed characters.  A pair of characters
separated by a hyphen denotes a
any character that sorts between those two characters, inclusive,
using the current locale's collating sequence and character set,
is matched.  If the first character following the
is a
or a
then any character not enclosed is matched.
The sorting order of characters in range expressions is determined by
if set.
A 
may be matched by including it as the first or last character
in the set.
A
may be matched by including it as the first character
in the set.
Within
and
following classes defined in the POSIX standard:
A character class matches any character belonging to that class.
Within
and 
same collation weight (as defined by the current locale) as
Within
and 
builtin, several extended pattern matching operators are recognized.
Composite patterns may be formed using one or more of the following
sub-patterns:
Matches zero or one occurrence of the given patterns
Matches zero or more occurrences of the given patterns
Matches one or more occurrences of the given patterns
Matches one of the given patterns
Matches anything except one of the given patterns
After the preceding expansions, all unquoted occurrences of the
characters
expansions are removed.
Before a command is executed, its input and output
may be
using a special notation interpreted by the shell.
Redirection may also be used to open and close files for the
current shell execution environment.  The following redirection
operators may precede or appear anywhere within a
or may follow a
Redirections are processed in the order they appear, from
left to right.
In the following descriptions, if the file descriptor number is
omitted, and the first character of the redirection operator is
the redirection refers to the standard input (file descriptor
0).  If the first character of the redirection operator is
the redirection refers to the standard output (file descriptor
1).
The word following the redirection operator in the following
descriptions, unless otherwise noted, is subjected to brace expansion,
tilde expansion, parameter expansion, command substitution, arithmetic
expansion, quote removal, pathname expansion, and word splitting.
If it expands to more than one word,
reports an error.
Note that the order of redirections is significant.  For example, 
the command
directs both standard output and standard error to the file 
while the command
directs only the standard output to file
because the standard error was duplicated as standard output
before the standard output was redirected to
redirections, as described in the following table:
File descriptor 0 is duplicated.
File descriptor 1 is duplicated.
File descriptor 2 is duplicated.
a TCP connection to the corresponding socket.
a UDP connection to the corresponding socket.
A failure to open or create a file causes the redirection to fail.
Redirections using file descriptors greater than 9 should be used with
care, as they may conflict with file descriptors the shell uses
internally.
Redirection of input causes the file whose name results from
the expansion of
to be opened for reading on file descriptor
or the standard input (file descriptor 0) if
is not specified.
The general format for redirecting input is:
Redirection of output causes the file whose name results from
the expansion of
to be opened for writing on file descriptor
or the standard output (file descriptor 1) if
is not specified.  If the file does not exist it is created;
if it does exist it is truncated to zero size.
The general format for redirecting output is:
If the redirection operator is
and the
option to the
builtin has been enabled, the redirection will fail if the file
a regular file.
If the redirection operator is
or the redirection operator is
and the
option to the
builtin command is not enabled, the redirection is attempted even
Redirection of output in this fashion
causes the file whose name results from
the expansion of
to be opened for appending on file descriptor
or the standard output (file descriptor 1) if
is not specified.  If the file does not exist it is created.
The general format for appending output is:
allows both the
standard output (file descriptor 1) and
the standard error output (file descriptor 2)
to be redirected to the file whose name is the
expansion of
with this construct.
There are two formats for redirecting standard output and
standard error:
and
Of the two forms, the first is preferred.
This is semantically equivalent to
This type of redirection instructs the shell to read input from the
current source until a line containing only
(with no trailing blanks)
is seen.  All of
the lines read up to that point are then used as the standard
input for a command.
The format of here-documents is:
No parameter expansion, command substitution, arithmetic expansion,
or pathname expansion is performed on
If any characters in
are quoted, the
is the result of quote removal on
and the lines in the here-document are not expanded.
all lines of the here-document are subjected to parameter expansion,
command substitution, and arithmetic expansion.  In the latter
case, the character sequence
is ignored, and
must be used to quote the characters
and
If the redirection operator is
then all leading tab characters are stripped from input lines and the
line containing
This allows
here-documents within shell scripts to be indented in a
natural fashion.
A variant of here documents, the format is:
input.
The redirection operator
is used to duplicate input file descriptors.
If
expands to one or more digits, the file descriptor denoted by
is made to be a copy of that file descriptor.
If the digits in
do not specify a file descriptor open for input, a redirection error occurs.
If
evaluates to
file descriptor
is closed.  If
is not specified, the standard input (file descriptor 0) is used.
The operator
is used similarly to duplicate output file descriptors.  If
is not specified, the standard output (file descriptor 1) is used.
If the digits in
do not specify a file descriptor open for output, a redirection error occurs.
expand to one or more digits, the standard output and standard
error are redirected as described previously.
The redirection operator
Similarly, the redirection operator
The redirection operator
causes the file whose name is the expansion of
to be opened for both reading and writing on file descriptor
or on file descriptor 0 if
is not specified.  If the file does not exist, it is created.
as the first word of a simple command.
The shell maintains a list of aliases that may be set and unset with the
and
builtin commands (see
below).
The first word of each simple command, if unquoted,
is checked to see if it has an
alias.  If so, that word is replaced by the text of the alias.
listed above may not appear in an alias name.
The replacement text may contain any valid shell input,
including shell metacharacters.
The first word of the replacement text is tested
for aliases, but a word that is identical to an alias being expanded
is not expanded a second time.
This means that one may alias
to
for instance, and
does not try to recursively expand the replacement text.
If the last character of the alias value is a
then the next command
word following the alias is also checked for alias expansion.
Aliases are created and listed with the
command, and removed with the
command.
There is no mechanism for using arguments in the replacement text.
If arguments are needed, a shell function should be used (see
below).
Aliases are not expanded when the shell is not interactive, unless
the
shell option is set using
(see the description of
under
below).
The rules concerning the definition and use of aliases are
somewhat confusing.
always reads at least one complete line
of input before executing any
of the commands on that line.  Aliases are expanded when a
command is read, not when it is executed.  Therefore, an
alias definition appearing on the same line as another
command does not take effect until the next line of input is read.
The commands following the alias definition
on that line are not affected by the new alias.
This behavior is also an issue when functions are executed.
Aliases are expanded when a function definition is read,
not when the function is executed, because a function definition
is itself a compound command.  As a consequence, aliases
defined in a function are not available until after that
function is executed.  To be safe, always put
alias definitions on a separate line, and do not use
in compound commands.
For almost every purpose, aliases are superseded by
shell functions.
A shell function, defined as described above under
stores a series of commands for later execution.
When the name of a shell function is used as a simple command name,
the list of commands associated with that function name is executed.
Functions are executed in the context of the
current shell; no new process is created to interpret
them (contrast this with the execution of a shell script).
When a function is executed, the arguments to the
function become the positional parameters
during its execution.
The special parameter
is updated to reflect the change.  Special parameter 0
is unchanged.
The first element of the
variable is set to the name of the function while the function
is executing.
All other aspects of the shell execution
environment are identical between a function and its caller
with the exception that the
and
traps (see the description of the
builtin under
below) are not inherited unless the function has been given the
builtin below) or the
Variables local to the function may be declared with the
builtin command.  Ordinarily, variables and their values
are shared between the function and its caller.
If the builtin command
is executed in a function, the function completes and
execution resumes with the next command after the function
call.
before execution resumes.
When a function completes, the values of the
positional parameters and the special parameter
are restored to the values they had prior to the function's
execution.
Function names and definitions may be listed with the
option to the
or
builtin commands.  The
option to
or
will list the function names only
shell option is enabled).
Functions may be exported so that subshells
automatically have them defined with the
option to the 
builtin.
the
builtin.
Note that shell functions and variables with the same name may result
in multiple identically-named entries in the environment passed to the
shell's children.
Care should be taken in cases where this may cause a problem.
Functions may be recursive.  No limit is imposed on the number
of recursive calls.
The shell allows arithmetic expressions to be evaluated, under
Evaluation is done in fixed-width integers with no check for overflow,
though division by 0 is trapped and flagged as an error.
The operators and their precedence, associativity, and values
are the same as in the C language.
The following list of operators is grouped into levels of
equal-precedence operators.
The levels are listed in order of decreasing precedence.
variable post-increment and post-decrement
variable pre-increment and pre-decrement
unary minus and plus
logical and bitwise negation
exponentiation
multiplication, division, remainder
addition, subtraction
left and right bitwise shifts
comparison
equality and inequality
bitwise AND
bitwise exclusive OR
bitwise OR
logical AND
logical OR
conditional operator
assignment
comma
Shell variables are allowed as operands; parameter expansion is
performed before the expression is evaluated.
Within an expression, shell variables may also be referenced by name
without using the parameter expansion syntax.
A shell variable that is null or unset evaluates to 0 when referenced
by name without using the parameter expansion syntax.
The value of a variable is evaluated as an arithmetic expression
when it is referenced, or when a variable which has been given the
A null value evaluates to 0.
A shell variable need not have its integer attribute
turned on to be used in an expression.
Constants with a leading 0 are interpreted as octal numbers.
A leading 0x or 0X denotes hexadecimal.
is a decimal number between 2 and 64 representing the arithmetic
The digits greater than 9 are represented by the lowercase letters,
the uppercase letters, @, and _, in that order.
letters may be used interchangeably to represent numbers between 10
and 35.
Operators are evaluated in order of precedence.  Sub-expressions in
parentheses are evaluated first and may override the precedence
rules above.
and perform string and arithmetic comparisons.
Expressions are formed from the following unary or binary primaries.
descriptor 0, 1, or 2, respectively, is checked.
Unless otherwise specified, primaries that operate on files follow symbolic
links and operate on the target of the link, rather than the link itself.
True if file descriptor
is open and refers to a terminal.
inode numbers.
True if shell option
is enabled.
See the list of options under the description of the
option to the
builtin below.
True if the length of
is non-zero.
True if the strings are not equal.
in the current locale.
in the current locale.
is one of
or
is equal to, not equal to, less than, less than or equal to,
and
may be positive or negative integers.
When a simple command is executed, the shell performs the following
expansions, assignments, and redirections, from left to right.
The words that the parser has marked as variable assignments (those
preceding the command name) and redirections are saved for later
processing.
The words that are not variable assignments or redirections are
expanded.  If any words remain after expansion, the first word
is taken to be the name of the command and the remaining words are
the arguments.
Redirections are performed as described above under
expansion, parameter expansion, command substitution, arithmetic expansion,
and quote removal before being assigned to the variable.
If no command name results, the variable assignments affect the current
shell environment.  Otherwise, the variables are added to the environment
of the executed command and do not affect the current shell environment.
If any of the assignments attempts to assign a value to a readonly variable,
an error occurs, and the command exits with a non-zero status.
If no command name results, redirections are performed, but do not
affect the current shell environment.  A redirection error causes the
command to exit with a non-zero status.
If there is a command name left after expansion, execution proceeds as
described below.  Otherwise, the command exits.  If one of the expansions
contained a command substitution, the exit status of the command is
the exit status of the last command substitution performed.  If there
were no command substitutions, the command exits with a status of zero.
After a command has been split into words, if it results in a
simple command and an optional list of arguments, the following
actions are taken.
If the command name contains no slashes, the shell attempts to
locate it.  If there exists a shell function by that name, that
function is invoked as described above in
If the name does not match a function, the shell searches for
it in the list of shell builtins.  If a match is found, that
builtin is invoked.
If the name is neither a shell function nor a builtin,
and contains no slashes,
searches each element of the
for a directory containing an executable file by that name.
uses a hash table to remember the full pathnames of executable
files (see
under
below).
A full search of the directories in
is performed only if the command is not found in the hash table.
If the search is unsuccessful, the shell prints an error
message and returns an exit status of 127.
If the search is successful, or if the command name contains
one or more slashes, the shell executes the named program in a
separate execution environment.
Argument 0 is set to the name given, and the remaining arguments
to the command are set to the arguments given, if any.
If this execution fails because the file is not in executable
format, and the file is not a directory, it is assumed to be
containing shell commands.  A subshell is spawned to execute
it.  This subshell reinitializes itself, so
that the effect is as if a new shell had been invoked
to handle the script, with the exception that the locations of
commands remembered by the parent (see
below under
are retained by the child.
If the program is a file beginning with
the remainder of the first line specifies an interpreter
for the program.  The shell executes the
specified interpreter on operating systems that do not
handle this executable format themselves.  The arguments to the 
interpreter consist of a single optional argument following the
interpreter name on the first line of the program, followed
by the name of the program, followed by the command
arguments, if any.
following:
open files inherited by the shell at invocation, as modified by
the shell's parent
or inherited from the shell's parent in the environment
shell functions defined during execution or inherited from the shell's
parent in the environment
options enabled at invocation (either by default or with command-line
various process IDs, including those of background jobs, the value
When a simple command other than a builtin or shell function
is to be executed, it
is invoked in a separate execution environment that consists of
the following.  Unless otherwise noted, the values are inherited
from the shell.
the shell's open files, plus any modifications and additions specified
by redirections to the command
the current working directory
the file creation mode mask
shell variables and functions marked for export, along with variables
exported for the command, passed in the environment
traps caught by the shell are reset to the values inherited from the
shell's parent, and traps ignored by the shell are ignored
A command invoked in this separate environment cannot affect the
shell's execution environment. 
Command substitution, commands grouped with parentheses,
and asynchronous commands are invoked in a
subshell environment that is a duplicate of the shell environment,
except that traps caught by the shell are reset to the values
that the shell inherited from its parent at invocation.  Builtin
commands that are invoked as part of a pipeline are also executed in a
subshell environment.  Changes made to the subshell environment
cannot affect the shell's execution environment.
Otherwise, the invoked command inherits the file descriptors of the calling
shell as modified by redirections.
When a program is invoked it is given an array of strings
called the
This is a list of 
The shell provides several ways to manipulate the environment.
On invocation, the shell scans its own environment and
creates a parameter for each name found, automatically marking
it for
to child processes.  Executed commands inherit the environment.
The
and
commands allow parameters and functions to be added to and
deleted from the environment.  If the value of a parameter
in the environment is modified, the new value becomes part
of the environment, replacing the old.  The environment
inherited by any executed command consists of the shell's
initial environment, whose values may be modified in the shell,
less any pairs removed by the
command, plus any additions via the
and
commands.
The environment for any
or function may be augmented temporarily by prefixing it with
parameter assignments, as described above in
These assignment statements affect only the environment seen
by that command.
If the 
option is set (see the
builtin command below), then
parameter assignments are placed in the environment for a command,
not just those that precede the command name.
When
invokes an external command, the variable
is set to the full file name of the command and passed to that
command in its environment.
For the shell's purposes, a command which exits with a 
zero exit status has succeeded.  An exit status of zero
indicates success.  A non-zero exit status indicates failure.
If a command is not found, the child process created to
execute it returns a status of 127.  If a command is found
but is not executable, the return status is 126.
If a command fails because of an error during expansion or redirection,
the exit status is greater than zero.
while they execute. 
All builtins return an exit status of 2 to indicate incorrect usage.
executed, unless a syntax error occurs, in which case it exits
command below.
and
If job control is in effect,
ignores
and
set to the values inherited by the shell from its parent.
When job control is not in effect, asynchronous commands
ignore
and
in addition to these inherited handlers.
Commands run as a result of command substitution ignore the
keyboard-generated job control signals
and
The shell exits by default upon receipt of a
Before exiting, an interactive shell resends the
to all jobs, running or stopped.
Stopped jobs are sent
to ensure that they receive the
To prevent the shell from
sending the signal to a particular job, it should be removed from the
jobs table with the 
builtin (see
below) or marked 
to not receive
using
If the
shell option has been set with
sends a 
to all jobs when an interactive login shell exits.
for which a trap has been set, the trap will not be executed until
the command completes. 
builtin, the reception of a signal for which a trap has been set will
greater than 128, immediately after which the trap is executed.
their execution at a later point.  A user typically employs
this facility via an interactive interface supplied jointly
by the system's terminal driver and
The shell associates a
with each pipeline.  It keeps a table of currently executing
jobs, which may be listed with the
command.  When
starts a job asynchronously (in the
it prints a line that looks like:
[1] 25647
indicating that this job is job number 1 and that the process ID
of the last process in the pipeline associated with this job is 25647.
All of the processes in a single pipeline are members of the same job.
uses the
abstraction as the basis for job control.
To facilitate the implementation of the user interface to job
process group ID is equal to the current terminal process group ID)
receive keyboard-generated signals such as
These processes are said to be in the
processes are those whose process group ID differs from the terminal's;
such processes are immune to keyboard-generated signals.
Only foreground processes are allowed to read from or write to the
terminal.  Background processes which attempt to read from (write to) the
terminal are sent a 
signal by the terminal driver, 
which, unless caught, suspends the process.
If the operating system on which
is running supports
job control,
contains facilities to use it.
Typing the
character (typically
Control-Z) while a process is running
causes that process to be stopped and returns control to 
Typing the
character (typically
Control-Y) causes the process to be stopped when it
attempts to read input from the terminal, and control to
be returned to
The user may then manipulate the state of this job, using the
command to continue it in the background, the
command to continue it in the foreground, or
the
and has the additional side effect of causing pending output
and typeahead to be discarded.
There are a number of ways to refer to a job in the shell.
The character
introduces a job name.  Job number
may be referred to as
A job may also be referred to using a prefix of the name used to
start it, or using a substring that appears in its command line.
For example,
refers to a stopped
job.  If a prefix matches more than one job,
reports an error.  Using
on the other hand, refers to any job containing the string
in its command line.  If the substring matches more than one job,
reports an error.  The symbols
and
refer to the shell's notion of the
which is the last job stopped while it was in
the foreground or started in the background.
The 
may be referenced using
In output pertaining to jobs (e.g., the output of the
command), the current job is always flagged with a
and the previous job with a
A single % (with no accompanying job specification) also refers to the
current job.
Simply naming a job can be used to bring it into the
foreground:
is a synonym for
bringing job 1 from the background into the foreground.
Similarly,
resumes job 1 in the background, equivalent to
The shell learns immediately whenever a job changes state.
Normally,
waits until it is about to print a prompt before reporting
changes in a job's status so as to not interrupt
any other output.  If the 
option to the
builtin command
is enabled,
reports such changes immediately.
Any trap on
is executed for each child that exits.
If an attempt to exit
is made while jobs are stopped, the shell prints a warning message.  The
command may then be used to inspect their status.
If a second attempt to exit is made without an intervening command,
the shell does not print another warning, and the stopped
jobs are terminated.
When executing interactively, 
displays the primary prompt
when it is ready to read a command, and the secondary prompt
when it needs more input to complete a command.
allows these prompt strings to be customized by inserting a number of
backslash-escaped special characters that are decoded as follows:
an ASCII bell character (07)
the date in "Weekday Month Date" format (e.g., "Tue May 26")
time representation.  The braces are required
an ASCII escape character (033)
the hostname up to the first `.'
the hostname
the number of jobs currently managed by the shell
the basename of the shell's terminal device name
newline
carriage return
the name of the shell, the basename of
(the portion following the final slash)
the current time in 24-hour HH:MM:SS format
the current time in 12-hour HH:MM:SS format
the current time in 24-hour HH:MM format
the username of the current user
abbreviated with a tilde
the history number of this command
the command number of this command
if the effective UID is 0, a
otherwise a
a backslash
begin a sequence of non-printing characters, which could be used to
embed a terminal control sequence into the prompt
end a sequence of non-printing characters
The command number and the history number are usually different:
the history number of a command is its position in the history
list, which may include commands restored from the history file
(see
below), while the command number is the position in the sequence
of commands executed during the current shell session.
After the string is decoded, it is expanded via
parameter expansion, command substitution, arithmetic
expansion, and quote removal, subject to the value of the
shell option (see the description of the
command under
below).
This is the library that handles reading input when using an interactive
shell, unless the
option is given at shell invocation.
By default, the line editing commands are similar to those of emacs.
A vi-style line editing interface is also available.
To turn off line editing after the shell is running, use the
or
options to the
builtin (see
below).
In this section, the emacs-style notation is used to denote
without a 
then the
or press the Escape key
then hold the Control key while pressing the
key.)
Readline commands may be given numeric
which normally act as a repeat count.
Sometimes, however, it is the sign of the argument that is significant.
Passing a negative argument to a command that acts in the forward
backward direction. 
Commands whose behavior with arguments deviates from this are noted
below.
deleted is saved for possible future retrieval
accumulated into one unit, which can be yanked all at once. 
Commands which do not kill text separate the chunks of text
on the kill ring.
Readline is customized by putting commands in an initialization
The name of this file is taken from the value of the
variable.  If that variable is unset, the default is
When a program which uses the readline library starts up, the
initialization file is read, and the key bindings and variables
are set.
There are only a few basic constructs allowed in the
readline initialization file.
Blank lines are ignored.
Other lines denote key bindings and variable settings.
The default key-bindings may be changed with an
file.
Other programs that use this library may add their own commands
and bindings.
For example, placing
or
into the 
The following symbolic character names are recognized:
and
In addition to command names, readline allows keys to be bound
The syntax for controlling key bindings in the
file is simple.  All that is required is the name of the
command or the text of a macro and a key sequence to which
it should be bound. The name may be specified in one of two ways:
prefixes, or as a key sequence.
is the name of a key spelled out in English.  For example:
Meta-Rubout: backward-kill-word
Control-o: "> output"
In the above example,
is bound to the function
is bound to the function
and
is bound to run the macro
expressed on the right hand side (that is, to insert the text
into the line).
differs from
above in that strings denoting
an entire key sequence may be specified by placing the sequence
within double quotes.  Some GNU Emacs style key escapes can be
used, as in the following example, but the symbolic character names
are not recognized.
In this example,
is again bound to the function
is bound to the function
and 
is bound to insert the text
The full set of GNU Emacs style escape sequences is
control prefix
meta prefix
an escape character
backslash
literal "
In addition to the GNU Emacs style escape sequences, a second
set of backslash escapes is available:
alert (bell)
backspace
delete
form feed
newline
carriage return
horizontal tab
vertical tab
(one to three digits)
(one or two hex digits)
When entering the text of a macro, single or double quotes must
be used to indicate a macro definition.
Unquoted text is assumed to be a function name.
In the macro body, the backslash escapes described above are expanded.
Backslash will quote any other character in the macro text,
allows the current readline key bindings to be displayed or modified
with the
builtin command.  The editing mode may be switched during interactive
use by using the
option to the
builtin command (see
below).
Readline has variables that can be used to further customize its
behavior.  A variable may be set in the
file with a statement of the form
Except where noted, readline variables can take the values
or
(without regard to case).
Unrecognized variable names are ignored.
When a variable value is read, empty or null values, "on" (case-insensitive),
The variables and their default values are:
Controls what happens when readline wants to ring the terminal bell.
treated specially by the kernel's terminal driver to their readline
equivalents.
The string that is inserted when the readline
command is executed.
This command is bound to
in emacs mode and to
in vi command mode.
This determines when the user is queried about viewing
the number of possible completions
It may be set to any integer value greater than or equal to
zero.  If the number of possible completions is greater than
or equal to the value of this variable, the user is asked whether
or not he wishes to view them; otherwise they are simply listed
on the terminal.
eighth bit set to an ASCII key sequence
by stripping the eighth bit and prefixing an
characters will be inserted into the line as if they had been
Controls whether readline begins with a set of key bindings similar
can be set to either
or
keypad when it is called.  Some systems need this to enable the
arrow keys.
attempts word completion.
scrolling the input horizontally on a single screen line when it
becomes longer than the screen width rather than wrapping to a new line.
it will not strip the high bit from the characters it reads),
regardless of what the terminal claims it can support.  The name
is a synonym for this variable.
The string of characters that should terminate an incremental
search without subsequently executing the character as a command.
If this variable has not been given a value, the characters
Set the current readline keymap.  The set of valid keymap names is
the value of
also affects the default keymap.
appended.
have a slash appended (subject to the value of
names begin with a `.' (hidden files) when performing filename 
completion, unless the leading `.' is
supplied by the user in the filename to be completed.
eighth bit set directly rather than as a meta-prefixed escape
sequence.
to display a screenful of possible completions at a time.
sorted horizontally in alphabetical order, rather than down the screen.
This alters the default behavior of the completion functions.  If
set to
words which have more than one possible completion cause the
matches to be listed immediately instead of ringing the bell.
This alters the default behavior of the completion functions in
If set to
words which have more than one possible completion without any
possible partial completion (the possible completions don't share
a common prefix) cause the matches to be listed immediately instead
of ringing the bell.
completions.
Readline implements a facility similar in spirit to the conditional
compilation features of the C preprocessor which allows key
bindings and variable settings to be performed as the result
of tests.  There are four parser directives used.
The 
construct allows bindings to be made based on the
editing mode, the terminal being used, or the application using
readline.  The text of the test extends to the end of the line;
no characters are required to isolate it.
whether readline is in emacs or vi mode.
This may be used in conjunction
readline is starting out in emacs mode.
key bindings, perhaps to bind the key sequences output by the
terminal's function keys.  The word on the right side of the
is tested against the both full name of the terminal and the portion
to match both
and
for instance.
application-specific settings.  Each program using the readline
file can test for a particular value.
This could be used to bind key sequences to functions useful for
a specific program.  For instance, the following command adds a
key sequence that quotes the current or previous word in Bash:
# Quote the current or previous word
This command, as seen in the previous example, terminates an
the test fails.
This directive takes a single filename as an argument and reads commands
and bindings from that file.  For example, the following directive
Readline provides commands for searching through the command history
(see
below) for lines containing a specified string.
There are two search modes:
and
Incremental searches begin before the user has finished typing the
search string.
As each character of the search string is typed, readline displays
the next entry from the history matching the string typed so far.
An incremental search requires only as many characters as needed to
find the desired history entry.
variable are used to terminate an incremental search.
If that variable has not been assigned a value the Escape and
Control-J characters will terminate an incremental search.
Control-G will abort an incremental search and restore the original
line.
When the search is terminated, the history entry containing the
search string becomes the current line.
To find other matching entries in the history list, type Control-S or
Control-R as appropriate.
This will search backward or forward in the history for the next
entry matching the search string typed so far.
Any other key sequence bound to a readline command will terminate
the search and execute that command.
the line, thereby executing the command from the history list.
Readline remembers the last incremental search string.  If two
Control-Rs are typed without any intervening characters defining a
new search string, any remembered search string is used.
Non-incremental searches read the entire search string before starting
to search for matching history lines.  The search string may be
typed by the user or be part of the contents of the current line.
The following is a list of the names of the commands and the default
key sequences to which they are bound.
Command names without an accompanying key sequence are unbound by default.
Move to the start of the current line.
Move to the end of the line.
Move forward a character.
Move back a character.
Move forward to the end of the next word.  Words are composed of
alphanumeric characters (letters and digits).
Move back to the start of the current or previous word.  Words are
composed of alphanumeric characters (letters and digits).
Clear the screen leaving the current line at the top of the screen.
With an argument, refresh the current line without clearing the
screen.
Refresh the current line.
Accept the line regardless of where the cursor is.  If this line is
non-empty, add it to the history list according to the state of the
variable.  If the line is a modified history
line, then restore the history line to its original state.
Fetch the previous command from the history list, moving back in
the list.
Fetch the next command from the history list, moving forward in the
list.
Move to the first line in the history.
Move to the end of the input history, i.e., the line currently being
entered.
Search backward starting at the current line and moving `up' through
the history as necessary.  This is an incremental search.
Search forward starting at the current line and moving `down' through
the history as necessary.  This is an incremental search.
Search backward through the history starting at the current line
using a non-incremental search for a string supplied by the user.
Search forward through the history using a non-incremental search for
a string supplied by the user.
Search forward through the history for the string of characters
between the start of the current line and the point.
This is a non-incremental search.
Search backward through the history for the string of characters
between the start of the current line and the point.
This is a non-incremental search.
Insert the first argument to the previous command (usually
the second word on the previous line) at point.
With an argument
in the previous command begin with word 0).  A negative argument
Insert the last argument to the previous command (the last word of
the previous history entry).  With an argument,
list, inserting the last argument of each line in turn.
The history expansion facilities are used to extract the last argument,
as if the "!$" history expansion had been specified.
Expand the line as the shell does.  This
performs alias and history expansion as well as all of the shell
word expansions.  See
below for a description of history expansion.
Perform history expansion on the current line.
See
below for a description of history expansion.
Perform history expansion on the current line and insert a space.
See
below for a description of history expansion.
Perform alias expansion on the current line.
See
above for a description of alias expansion.
Perform history and alias expansion on the current line.
Accept the current line for execution and fetch the next line
relative to the current line from the history for editing.  Any
argument is ignored.
Invoke an editor on the current command line, and execute the result as shell
commands.
Delete the character at point.  If point is at the
beginning of the line, there are no characters in the line, and
then return
Delete the character behind the cursor.  When given a numeric argument,
save the deleted text on the kill ring.
Delete the character under the cursor, unless the cursor is at the
end of the line, in which case the character behind the cursor is
deleted.
Add the next character typed to the line verbatim.  This is
Insert a tab character.
Insert the character typed.
Drag the character before point forward over the character at point,
moving point forward as well.
If point is at the end of the line, then this transposes
the two characters before point.
Negative arguments have no effect.
Drag the word before point past the word after point,
moving point over that word as well.
If point is at the end of the line, this transposes
the last two words on the line.   
Uppercase the current (or following) word.  With a negative argument,
uppercase the previous word, but do not move point.
Lowercase the current (or following) word.  With a negative argument,
lowercase the previous word, but do not move point.
Capitalize the current (or following) word.  With a negative argument,
capitalize the previous word, but do not move point.
Toggle overwrite mode.  With an explicit positive numeric argument,
switches to overwrite mode.  With an explicit non-positive numeric
argument, switches to insert mode.  This command affects only
the text at point rather than pushing the text to the right.
before point with a space.  By default, this command is unbound.
Kill the text from point to the end of the line.
Kill backward to the beginning of the line.
Kill backward from point to the beginning of the line.
The killed text is saved on the kill-ring.
Kill all characters on the current line, no matter where point is.
Kill from point to the end of the current word, or if between
words, to the end of the next word.
Kill the word behind point.
Kill the word behind point, using white space as a word boundary.
The killed text is saved on the kill-ring.
Kill the word behind point, using white space and the slash character
as the word boundaries.
The killed text is saved on the kill-ring.
Delete all spaces and tabs around point.
Kill the text in the current region.
Copy the text in the region to the kill buffer.
Copy the word before point to the kill buffer.
Copy the word following point to the kill buffer.
Yank the top of the kill ring into the buffer at point.
Rotate the kill ring, and yank the new top.  Only works following
or
Add this digit to the argument already accumulating, or start a new
This is another way to specify an argument.
If this command is followed by one or more digits, optionally with a
leading minus sign, those digits define the argument.
If the command is followed by digits, executing
again ends the numeric argument, but is otherwise ignored.
As a special case, if this command is immediately followed by a
character that is neither a digit or minus sign, the argument count
for the next command is multiplied by four.
The argument count is initially one, so executing this function the
first time makes the argument count four, a second time makes the
argument count sixteen, and so on.
Attempt to perform completion on the text before point.
attempts completion treating the text as a variable (if the
command (including aliases and functions) in turn.  If none
of these produces a match, filename completion is attempted.
List the possible completions of the text before point.
Insert all completions of the text before point
that would have been generated by
with a single match from the list of possible completions.
of possible completions, inserting each match in turn.
At the end of the list of completions, the bell is rung
and the original text is restored.
of matches; a negative argument may be used to move backward
through the list.
by default.
Deletes the character under the cursor if not at the beginning or
If at the end of the line, behaves identically to
This command is unbound by default.
Attempt filename completion on the text before point.
List the possible completions of the text before point,
treating it as a filename.
Attempt completion on the text before point, treating
it as a username.
List the possible completions of the text before point,
treating it as a username.
Attempt completion on the text before point, treating
it as a shell variable.
List the possible completions of the text before point,
treating it as a shell variable.
Attempt completion on the text before point, treating
it as a hostname.
List the possible completions of the text before point,
treating it as a hostname.
Attempt completion on the text before point, treating
it as a command name.  Command completion attempts to
match the text against aliases, reserved words, shell
functions, shell builtins, and finally executable filenames,
in that order.
List the possible completions of the text before point,
treating it as a command name.
Attempt completion on the text before point, comparing
the text against lines from the history list for possible
completion matches.
Perform filename completion and insert the list of possible completions
enclosed within braces so the list is available to the shell (see
above).
Begin saving the characters typed into the current keyboard macro.
Stop saving the characters typed into the current keyboard macro
and store the definition.
Re-execute the last keyboard macro defined, by making the characters
in the macro appear as if typed at the keyboard.
any bindings or variable assignments found there.
Abort the current editing command and
ring the terminal's bell (subject to the setting of
that is bound to the corresponding uppercase character.
Metafy the next character typed.
is equivalent to
Incremental undo, separately remembered for each line.
Undo all changes made to this line.  This is like executing the
command enough times to return the line to its initial state.
Perform tilde expansion on the current word.
Set the mark to the point.  If a
numeric argument is supplied, the mark is set to that position.
Swap the point with the mark.  The current cursor position is set to
the saved position, and the old cursor position is saved as the mark.
A character is read and point is moved to the next occurrence of that
character.  A negative count searches for previous occurrences.
A character is read and point is moved to the previous occurrence of that
character.  A negative count searches for subsequent occurrences.
Without a numeric argument, the value of the readline
variable is inserted at the beginning of the current line.
If a numeric argument is supplied, this command acts as a toggle:  if
the characters at the beginning of the line do not match the value
the line.
In either case, the line is accepted as if a newline had been typed.
The default value of
a shell comment.
If a numeric argument causes the comment character to be removed, the line
will be executed by the shell.
The word before point is treated as a pattern for pathname expansion,
with an asterisk implicitly appended.  This pattern is used to
generate a list of matching file names for possible completions.
The word before point is treated as a pattern for pathname expansion,
and the list of matching file names is inserted, replacing the word.
If a numeric argument is supplied, an asterisk is appended before
pathname expansion.
The list of expansions that would have been generated by
is displayed, and the line is redrawn.
If a numeric argument is supplied, an asterisk is appended before
pathname expansion.
Print all of the functions and their key bindings to the
readline output stream.  If a numeric argument is supplied,
the output is formatted in such a way that it can be made part
Print all of the settable readline variables and their values to the
readline output stream.  If a numeric argument is supplied,
the output is formatted in such a way that it can be made part
Print all of the readline key sequences bound to macros and the
strings they output.  If a numeric argument is supplied,
the output is formatted in such a way that it can be made part
Display version information about the current instance of
When word completion is attempted for an argument to a command for
below), the programmable completion facilities are invoked.
First, the command name is identified.
If a compspec has been defined for that command, the
compspec is used to generate the list of possible completions for the word.
If the command word is a full pathname, a compspec for the full
pathname is searched for first.
If no compspec is found for the full pathname, an attempt is made to
find a compspec for the portion following the final slash.
Once a compspec has been found, it is used to generate the list of
matching words.
First, the actions specified by the compspec are used.
Only matches which are prefixed by the word being completed are
returned.
When the
or
option is used for filename or directory name completion, the shell
variable
is used to filter the matches.
Any completions specified by a filename expansion pattern to the
The words generated by the pattern need not match the word
being completed.
The
shell variable is not used to filter the matches, but the
variable is used.
is considered.
The string is first split using the characters in the
special variable as delimiters.
Shell quoting is honored.
Each word is then expanded using
brace expansion, tilde expansion, parameter and variable expansion,
command substitution, and arithmetic expansion,
as described above under 
The results are split using the rules described above under
The results of the expansion are prefix-matched against the word being
completed, and the matching words become the possible completions.
After these matches have been generated, any shell function or command
When the command or function is invoked, the
and
variables are assigned values as described above under
If a shell function is being invoked, the 
and
variables are also set.
When the function or command is invoked, the first argument is the
name of the command whose arguments are being completed, the
second argument is the word being completed, and the third argument
is the word preceding the word being completed on the current command line.
No filtering of the generated completions against the word being completed
is performed; the function or command has complete freedom in generating
the matches.
The function may use any of the shell facilities, including the
It must put the possible completions in the
array variable.
in an environment equivalent to command substitution.
It should print a list of completions, one per line, to the
standard output.
Backslash may be used to escape a newline, if necessary.
After all of the possible completions are generated, any filter
in the pattern is replaced with the text of the word being completed.
is removed before attempting a match.
Any completion that matches the pattern will be removed from the list.
not matching the pattern will be removed.
options are added to each member of the completion list, and the result is
returned to the readline completion code as the list of possible
completions.
If the previously-applied actions do not generate any matches, and the
compspec was defined, directory name completion is attempted.
compspec was defined, directory name completion is attempted and any
matches are added to the results of the other actions.
By default, if a compspec is found, whatever it generates is returned
to the completion code as the full set of possible completions.
default of filename completion is disabled.
if the compspec generates no matches.
compspec was defined, readline's default completion will be performed
generate no matches.
When a compspec indicates that directory name completion is desired,
the programmable completion functions force readline to append a slash
to completed names which are symbolic links to directories, subject to  
When the
option to the
builtin is enabled, the shell provides access to the
the list of commands previously typed.
number of commands to save in a history list.
The text of the last
commands (default 500) is saved.  The shell
stores each command in the history list prior to parameter and
variable expansion (see
above) but after history expansion is performed, subject to the
values of the shell variables
and
On startup, the history is initialized from the file named by
the variable
The file named by the value of
is truncated, if necessary, to contain no more than
the number of lines specified by the value of
When an interactive shell exits, the last
lines are copied from the history list to
If the
shell option is enabled
(see the description of
under
below), the lines are appended to the history file,
otherwise the history file is overwritten.
If
is unset, or if the history file is unwritable, the history is
not saved.  After saving the history, the history file is truncated
to contain no more than
lines.  If
is not set, no truncation is performed.
The builtin command
(see
below) may be used to list or edit and re-execute a portion of
the history list.
The
builtin may be used to display or modify the history list and
manipulate the history file.
When using command-line editing, search commands
are available in each editing mode that provide access to the
history list.
The shell allows control over which commands are saved on the history
list.  The
and
variables may be set to cause the shell to save only a subset of the
commands entered.
The
shell option, if enabled, causes the shell to attempt to save each
line of a multi-line command in the same history entry, adding
semicolons where necessary to preserve syntactic correctness.
The
shell option causes the shell to save the command with embedded newlines
instead of semicolons.  See the description of the
builtin below under
for information on setting and unsetting shell options.
The shell supports a history expansion feature that
is similar to the history expansion in
This section describes what syntax features are available.  This
feature is enabled by default for interactive shells, and can be
disabled using the
option to the
builtin command (see
below).  Non-interactive shells do not perform history expansion
by default.
History expansions introduce words from the history list into
the input stream, making it easy to repeat commands, insert the
arguments to a previous command into the current input line, or
fix errors in previous commands quickly.
History expansion is performed immediately after a complete line
is read, before the shell breaks it into words.
It takes place in two parts.
The first is to determine which line from the history list
to use during substitution.
The second is to select portions of that line for inclusion into
the current one.
The line is broken into words in the same fashion as when reading input,
quotes are considered one word.
History expansions are introduced by the appearance of the
the history expansion character.
Several characters inhibit history expansion if found immediately
following the history expansion character, even if it is unquoted:
inhibit expansion.
Several shell options settable with the
builtin may be used to tailor the behavior of history expansion.
If the
shell option is enabled (see the description of the
builtin), and
is being used, history substitutions are not immediately passed to
the shell parser.
Instead, the expanded line is reloaded into the
editing buffer for further modification.
If
is being used, and the
shell option is enabled, a failed history substitution will be reloaded
into the
editing buffer for correction.
The
option to the
builtin command may be used to see what a history expansion will
do before using it.
The
option to the
builtin may be used to add commands to the end of the history list
without actually executing them, so that they are available for
subsequent recall.
The shell allows control of the various characters used by the
history expansion mechanism (see the description of
above under
An event designator is a reference to a command line entry in the
history list.
Start a history substitution, except when followed by a
newline, carriage return, =
Refer to command line
Refer to the current command line minus
Refer to the most recent command starting with 
Refer to the most recent command containing
is followed immediately by a newline.
Quick substitution.  Repeat the last command, replacing
with
Equivalent to
The entire command line typed so far.
Word designators are used to select desired words from the event.
A 
separates the event specification from the word designator.
It may be omitted if the word designator begins with a
or
Words are numbered from the beginning of the line,
with the first word being denoted by 0 (zero).
Words are inserted into the current line separated by single spaces.
The zeroth word.  For the shell, this is the command
word.
The first argument.  That is, word 1.
The last argument.
All of the words but the zeroth.  This is a synonym
if there is just one
word in the event; the empty string is returned in that case.
If a word designator is supplied without an event specification, the
previous command is used as the event.
After the optional word designator, there may appear a sequence of
one or more of the following modifiers, each preceded by a `:'.
Remove a trailing file name component, leaving only the head.
Remove all leading file name components, leaving the tail.
basename.
Remove all but the trailing suffix.
Print the new command but do not execute it.
Quote the substituted words, escaping further substitutions.
Quote the substituted words as with
but break into words at
and newlines.
Substitute
for the first occurrence of
final delimiter is optional if it is the last character of the
event line.  The delimiter may be quoted in
and
with a single backslash.  If & appears in
it is replaced by
A single backslash will quote the &.  If
is null, it is set to the last
substituted, or, if no previous history substitutions took place,
the last
in a
search.
Repeat the previous substitution.
Cause changes to be applied over the entire event line.  This is
if it is the last character of the event line.
Unless otherwise noted, each builtin command documented in this
section as accepting options preceded by
accepts
to signify the end of the options.
do not accept options.
No effect; the command does nothing beyond expanding
and performing any specified
redirections.  A zero exit code is returned.
Read and execute commands from
in the current
shell environment and return the exit status of the last command
executed from
If
does not contain a slash, file names in
are used to find the directory containing
The file searched for in
need not be executable.
searched if no file is found in
If the
option to the
builtin command is turned off, the
is not searched.
parameters are unchanged.
The return status is the status of the last command exited within
the script (0 if no commands are executed), and false if
is not found or cannot be read.
option prints the list of aliases in the form
When arguments are supplied, an alias is defined for
checked for alias substitution when the alias is expanded.
is supplied, the name and value of the alias is printed.
no alias has been defined.
had been started with
returns 0 unless run when job control is disabled or, when run with
or was started without job control.
Display current
key and function bindings, bind a key sequence to a
function or macro, or set a
variable.
Each non-option argument is a command as it would appear in
but each binding or command must be passed as a separate argument;
Options, if supplied, have the following meanings:
Use
as the keymap to be affected by the subsequent bindings.
Acceptable
names are
that they can be re-read.
can be re-read.
they output in such a way that they can be re-read.
they output.
entered.
The return value is 0 unless an unrecognized option is given or an
error occurred.
Exit from within a
or
is greater than the number of enclosing loops, all enclosing loops
are exited.  The return value is 0 unless the shell is not executing
a loop when
is executed.
Execute the specified shell builtin, passing it
and return its exit status.
This is useful when defining a
function whose name is the same as a shell builtin,
retaining the functionality of the builtin within the function.
The return status is false if
is not a shell builtin command.
is the
default
The variable
defines the search path for the directory containing
Alternative directory names in
are separated by a colon (:).  A null directory name in
then
is not used. The
option says to use the physical directory structure instead of
following symbolic links (see also the
option to the
builtin command); the
option forces symbolic links to be followed.  An argument of
is equivalent to
successful, the absolute pathname of the new working directory is
written to the standard output.
The return value is true if the directory was successfully changed;
false otherwise.
Returns the context of any active subroutine call (a shell function or
filename of the current subroutine call.
displays the line number, subroutine name, and source file corresponding
to that position in the current execution call stack.  This extra
information may be used, for example, to print a stack trace.  The
current frame is frame 0.
The return value is 0 unless the shell is not executing a subroutine
call stack.
Run
with
suppressing the normal shell function lookup. Only builtin
commands or commands found in the
are executed.  If the
option is given, the search for
is performed using a default value for
that is guaranteed to find all of the standard utilities.
If either the
or
option is supplied, a description of
is printed.  The
option causes a single word indicating the command or file name
used to invoke
to be displayed; the
option produces a more verbose description.
If the
or
option is supplied, the exit status is 0 if
was found, and 1 if not.  If neither option is supplied and
an error occurred or
cannot be found, the exit status is 127.  Otherwise, the exit status of the
builtin is the exit status of
the matches to the standard output.
set by the programmable completion facilities, while available, will not
have useful values.
The matches will be generated in the same way as if the programmable
completion code had generated them directly from a completion specification
with the same flags.
will be displayed.
The return value is true unless an invalid option is supplied, or no
matches were generated.
existing completion specifications are printed in a way that allows
them to be reused as input.
completion specifications.
The process of applying these completion specifications when word completion
Other options, if specified, have the following meanings.
should be quoted to protect them from expansion before the
builtin is invoked.
beyond the simple generation of completions.
generates no matches.
Use readline's default filename completion if the compspec generates
no matches.
Perform directory name completion if the compspec generates no matches.
Tell readline that the compspec generates filenames, so it can perform any
suppressing trailing spaces).  Intended to be used with shell functions.
Tell readline not to append a space (the default) to words completed at
the end of the line.
After any matches defined by the compspec are generated, 
directory name completion is attempted and any
matches are added to the results of the other actions.
completions:
Array variable names.
Names of disabled shell builtins.
Names of enabled shell builtins.
Names of shell functions.
Hostnames, as taken from the file specified by the
shell variable.
Names of running jobs, if job control is active.
Signal names.
Names of stopped jobs, if job control is active.
the possible completions.
special variable as delimiters, and each resultant word is expanded.
The possible completions are the members of the resultant list which
match the word being completed.
used as the possible completions.
environment.
When it finishes, the possible completions are retrieved from the value
of the
array variable.
It is applied to the list of possible completions generated by the
preceding options and arguments, and each completion matching
after all other options have been applied.
after all other options have been applied.
The return value is true unless an invalid option is supplied, an option
argument, an attempt is made to remove a completion specification for
an error occurs adding a completion specification.
Resume the next iteration of the enclosing
or
loop.
If
is greater than the number of enclosing loops, the last enclosing loop
(the ``top-level'' loop) is resumed.  The return value is 0 unless the
shell is not executing a loop when
is executed.
The
option will display the attributes and values of each
When
is used, additional options are ignored.
The
option inhibits the display of function definitions; only the
function name and attributes are printed.
the source file name and line number where the function is defined
are displayed as well.  The
option implies
The following options can
be used to restrict output to variables with the specified attribute or
to give variables attributes:
above).
Use function names only.
The variable is treated as an integer; arithmetic evaluation (see
is performed when the variable is assigned a value.
by subsequent assignment statements or unset.
the calling shell.
The trace attribute has no special meaning for variables.
may not be used to destroy an array variable.  When used in a function,
makes each
command.
The return value is 0 unless an invalid option is encountered,
an attempt is made to define a function using
an attempt is made to assign a value to a readonly variable,
an attempt is made to assign a value to an array variable without
using the compound assignment syntax (see
an attempt is made to turn off readonly status for a readonly variable,
an attempt is made to turn off array status for an array variable,
Without options, displays the list of currently remembered directories.
The default display is on a single line with directory names separated
by spaces.
Directories are added to the list with the 
command; the
command removes entries from the list.
shown by
when invoked without options, starting with zero.
shown by
when invoked without options, starting with zero.
Clears the directory stack by deleting all of the entries.
Produces a longer listing; the default listing format uses a 
tilde to denote the home directory.
Print the directory stack with one entry per line.
Print the directory stack with one entry per line,
prefixing each entry with its index in the stack.
The return value is 0 unless an
of the directory stack.
Without options, each
is removed from the table of active jobs.
is not removed from the table, but is marked so that
is not sent to the job if the shell receives a
If no
is present, and neither the
nor the
If no
is supplied, the
option means to remove or mark all jobs; the
option without a
argument restricts operation to running jobs.
The return value is 0 unless a
does not specify a valid job.
The return status is always 0.
the following backslash-escaped characters is enabled.  The
option disables the interpretation of these escape characters,
even on systems where they are interpreted by default.
escape characters by default.
interprets the following escape sequences:
alert (bell)
backspace
suppress trailing newline
an escape character
form feed
new line
carriage return
horizontal tab
vertical tab
backslash
(zero to three octal digits)
(one or two hex digits)
Enable and disable builtin shell commands.
Disabling a builtin allows a disk command which has the same name
as a shell builtin to be executed without specifying a full pathname,
even though the shell normally searches for builtins before disk commands.
is disabled; otherwise,
binary found via the
instead of the shell builtin version, run
The
option means to load the new builtin command
from shared object
on systems that support dynamic loading.  The
option will delete a builtin previously loaded with
option is supplied, a list of shell builtins is printed.
With no other option arguments, the list consists of all enabled
shell builtins.
indication of whether or not each is enabled.
The return value is 0 unless a
is not a shell builtin or there is an error loading a new builtin
from a shared object.
command.  This command is then read and executed by the shell, and
its exit status is returned as the value of
If there are no
or only null arguments,
returns 0.
If
is specified, it replaces the shell.
No new process is created.  The
If the
option is supplied,
the shell places a dash at the beginning of the zeroth arg passed to 
This is what
does.  The
option causes
to be executed with an empty environment.  If
is supplied, the shell passes
as the zeroth argument to the executed command.  If
cannot be executed for some reason, a non-interactive shell exits,
unless the shell option
is enabled, in which case it returns failure.
An interactive shell returns failure if the file cannot be executed.
If
is not specified, any redirections take effect in the current shell,
and the return status is 0.  If there is a redirection error, the
return status is 1.
Cause the shell to exit
is omitted, the exit status
is that of the last command executed.
A trap on
is executed before the shell terminates.
The supplied
are marked for automatic export to the environment of
subsequently executed commands.  If the 
option is given,
the 
refer to functions.
If no
are given, or if the
option is supplied, a list
of all names that are exported in this shell is printed.
The
option causes the export property to be removed from each
returns an exit status of 0 unless an invalid option is
encountered,
is supplied with a
that is not a function.
Fix Command.  In the first form, a range of commands from
to
is selected from the history list.
and
may be specified as a string (to locate the last command beginning
with that string) or as a number (an index into the history list,
where a negative number is used as an offset from the current
command number).  If 
is not specified it is set to
the current command for listing (so that
prints the last 10 commands) and to
otherwise.
If
is not specified it is set to the previous
The
option suppresses
the command numbers when listing.  The
option reverses the order of
the commands.  If the
option is given,
the commands are listed on
standard output.  Otherwise, the editor given by
is invoked
on a file containing those commands.  If
is not given, the
value of the
variable is used, and
the value of
if
is not set.  If neither variable is set,
is used.  When editing is complete, the edited commands are
echoed and executed.
A useful alias to use with this is
so that typing
runs the last command beginning with
and typing
re-executes the last command.
If the first form is used, the return value is 0 unless an invalid
option is encountered or
or
specify history lines out of range.
If the
option is supplied, the return value is the value of the last
command executed or failure if an error occurs with the temporary
file of commands.  If the second form is used, the return status
is that of the command re-executed, unless
does not specify a valid history line, in which case
returns failure.
Resume
in the foreground, and make it the current job.
If
The return value is that of the command placed into the foreground,
or failure if run when job control is disabled or, when run with
job control enabled, if
does not specify a valid job or
specifies a job that was started without job control.
is used by shell procedures to parse positional parameters.
contains the option characters to be recognized; if a character
is followed by a colon, the option is expected to have an
argument, which should be separated from it by white space.
The colon and question mark characters may not be used as
option characters.
Each time it is invoked,
places the next option in the shell variable
initializing
if it does not exist,
and the index of the next argument to be processed into the
variable
is initialized to 1 each time the shell or a shell script
is invoked.  When an option requires an argument,
places that argument into the variable
The shell does not reset
automatically; it must be manually reset between multiple
calls to
within the same shell invocation if a new set of parameters
is to be used.
return value greater than zero.
normally parses the positional parameters, but if more arguments are
given in
parses those instead.
can report errors in two ways.  If the first character of
is a colon,
error reporting is used.  In normal operation diagnostic messages
are printed when invalid options or missing option arguments are
encountered.
If the variable
is set to 0, no error messages will be displayed, even if the first
character of 
is not a colon.
If an invalid option is seen,
places ? into
and, if not silent,
prints an error message and unsets
If
is silent,
the option character found is placed in
and no diagnostic message is printed.
If a required argument is not found, and
is not silent,
is unset, and a diagnostic message is printed.
If
and
is set to the option character found.
returns true if an option, specified or unspecified, is found.
It returns false if the end of options is encountered or an
error occurs.
For each
the full file name of the command is determined by searching
the directories in
and remembered.
If the
option is supplied, no path search is performed, and
is used as the full file name of the command.
The
option causes the shell to forget all
remembered locations.
The
If the
The
option causes output to be displayed in a format that may be reused as input.
information about remembered commands is printed.
The return status is true unless a
is not found or an invalid option is supplied.
Display helpful information about builtin commands.  If
is specified,
gives detailed help on all commands matching
otherwise help for all the builtins and shell control structures
is printed.
usage synopsis.
The return status is 0 unless no command matches
With no options, display the command
history list with line numbers.  Lines listed
with a 
have been modified.  An argument of
lists only the last
lines.
the time stamp associated with each displayed history entry.
No intervening blank is printed between the formatted time stamp
and the history line.
name of the history file; if not, the value of
is used.  Options, if supplied, have the following meanings:
Clear the history list by deleting all the entries.
Append the ``new'' history lines (history lines entered since the
Read the history lines not already read from the history
file into the current history list.  These are lines
appended to the history file since the beginning of the
Read the contents of the history file
and use them as the current history.
Write the current history to the history file, overwriting the
history file's contents.
the result on the standard output.
Does not store the results in the history list.
Store the
in the history list as a single entry.  The last command in the
history list is removed before the
are added.
associated with each history entry is written to the history file.
The return value is 0 unless an invalid option is encountered, an
error occurs while reading or writing the history file, an invalid
The first form lists the active jobs.  The options have the following
meanings:
List process IDs
in addition to the normal information.
List only the process ID of the job's process group
leader.
Display information only about jobs that have changed status since
the user was last notified of their status.
Restrict output to running jobs.
Restrict output to stopped jobs.
If
is given, output is restricted to information about that job.
The return status is 0 unless an invalid option is encountered
or an invalid
is supplied.
If the
option is supplied,
replaces any
found in
or
with the corresponding process group ID, and executes
passing it
returning its exit status.
Send the signal named by
or
to the processes named by
or
is either a case-insensitive signal name such as
(with or without the
prefix) or a signal number;
is a signal number.
If
is not present, then
is assumed.
An argument of
lists the signal names.
If any arguments are supplied when
is given, the names of the signals corresponding to the arguments are
listed, and the return status is 0.
is a number specifying either a signal number or the exit status of
a process terminated by a signal.
returns true if at least one signal was successfully sent, or false
if an error occurs or an invalid option is encountered.
Each
is an arithmetic expression to be evaluated (see
If the last
evaluates to 0,
returns 1; 0 is returned otherwise.
For each argument, a local variable named
is created, and assigned
When
is used within a function, it causes the variable
to have a visible scope restricted to that function and its children.
With no operands,
writes a list of local variables to the standard output.  It is
an error to use
when not within a function.  The return status is 0 unless
is used outside a function, an invalid
is supplied, or
Exit a login shell.
Removes entries from the directory stack.  With no arguments,
removes the top directory from the stack, and performs a
to the new top directory.
Arguments, if supplied, have the following meanings:
shown by
starting with zero.  For example:
removes the first directory,
the second.
shown by
starting with zero.  For example:
removes the last directory,
the next to last.
Suppresses the normal change of directory when removing directories
from the stack, so that only the stack is manipulated.
If the
command is successful, a 
is performed as well, and the return status is 0.
returns false if an invalid option is encountered, the directory stack
is empty, a non-existent directory stack entry is specified, or the
directory change fails.
plain characters, which are simply copied to standard output, character
escape sequences, which are converted and copied to the standard output, and
format specifications, each of which causes printing of the next successive
extra format specifications behave as if a zero value or null string, as
appropriate, had been supplied.  The return value is zero on success,
non-zero on failure.
Adds a directory to the top of the directory stack, or rotates
the stack, making the new top of the stack the current working
directory.  With no arguments, exchanges the top two directories
and returns 0, unless the directory stack is empty.
Arguments, if supplied, have the following meanings:
(counting from the left of the list shown by
starting with zero)
is at the top.
(counting from the right of the list shown by
starting with zero) is at the top.
Suppresses the normal change of directory when adding directories
to the stack, so that only the stack is manipulated.
Adds
to the directory stack at the top, making it the
new current working directory.
If the
command is successful, a 
is performed as well.
If the first form is used,
returns 0 unless the cd to
fails.  With the second form,
returns 0 unless the directory stack is empty,
a non-existent directory stack element is specified,
or the directory change to the specified new current directory
fails.
Print the absolute pathname of the current working directory.
The pathname printed contains no symbolic links if the
option is supplied or the 
option to the
builtin command is enabled.
If the
option is used, the pathname printed may contain symbolic links.
The return status is 0 unless an error occurs while
reading the name of the current directory or an
invalid option is supplied.
One line is read from the standard input, or from the file descriptor
is assigned to the first
the second word to the second
and so on, with leftover words and their intervening separators assigned
to the last
If there are fewer words read from the input stream than names,
the remaining names are assigned empty values.
The characters in 
are used to split the line into words.
meaning for the next character read and for line continuation.
Options, if supplied, have the following meanings:
The words are assigned to sequential indices
of the array variable
starting at 0.
is unset before any new values are assigned.
rather than newline.
If the standard input
is coming from a terminal,
(see
above) is used to obtain the line.
waiting for a complete line of input.
trailing newline, before attempting to read any input.  The prompt
is displayed only if input is coming from a terminal.
Backslash does not act as an escape character.
The backslash is considered to be part of the line.
In particular, a backslash-newline pair may not be used as a line
continuation.
Silent mode.  If input is coming from a terminal, characters are
not echoed.
terminal or a pipe.
If no
are supplied, the line read is assigned to the variable
times out, or an invalid file descriptor is supplied as the argument to
The given
may not be changed by subsequent assignment.
If the
option is supplied, the functions corresponding to the
marked.
The
option restricts the variables to arrays.
If no
arguments are given, or if the
option is supplied, a list of all readonly names is printed.
The
option causes output to be displayed in a format that
may be reused as input.
The return status is 0 unless an invalid option is encountered,
one of the
is not a valid shell variable name, or
is supplied with a
that is not a function.
Causes a function to exit with the return value specified by
If 
is omitted, the return status is that of the last command
executed in the function body.  If used outside a function,
but during execution of a script by the 
that script and return either
or the exit status of the last command executed within the
script as the exit status of the script.  If used outside a
the return status is false.
before execution resumes after the function or script.
Without options, the name and value of each shell variable are displayed
in a format that can be reused as input
for setting or resetting the currently-set variables.
Read-only variables cannot be reset.
The output is sorted according to the current locale.
When options are specified, they set or unset shell attributes.
Any arguments remaining after the options are processed are treated
as values for the positional parameters and are assigned, in order, to 
Options, if specified, have the following meanings:
Automatically mark variables and functions which are modified or
created for export to the environment of subsequent commands.
Report the status of terminated background jobs
immediately, rather than before the next primary prompt.  This is
effective only when job control is enabled.
above) exits with a non-zero status.
The shell does not exit if the
command that fails is part of the command list immediately following a
or
keyword, 
part of the test in an
statement, part of a
or
list, or if the command's return value is
being inverted via
Disable pathname expansion.
Remember the location of commands as they are looked up for execution.
This is enabled by default.
All arguments in the form of assignment statements
are placed in the environment for a command, not just
those that precede the command name.
Monitor mode.  Job control is enabled.  This option is on
by default for interactive shells on systems that support
it (see
above).  Background processes run in a separate process
group and a line containing their exit status is printed
upon their completion.
Read commands but do not execute them.  This may be used to 
check a shell script for syntax errors.  This is ignored by
interactive shells.
Same as
Same as
Use an emacs-style command line editing interface.  This is enabled
by default when the shell is interactive, unless the shell is started
with the
option.
Same as
Same as
Same as
Same as
Same as
Enable command history, as described above under
This option is on by default in interactive shells.
The effect is as if the shell command
had been executed
(see
above).
Same as
Same as
Same as
Same as
Same as
Currently ignored.
Same as
Same as
Same as
Same as
If set, the return value of a pipeline is the value of the last
(rightmost) command to exit with a non-zero status, or zero if all
commands in the pipeline exit successfully.
This option is disabled by default.
Change the behavior of
where the default operation differs
Same as
Same as
Use a vi-style command line editing interface.
Same as
If
printed.
If
commands to recreate the current option settings is displayed on
the standard output.
Turn on
mode.  In this mode, the
and
files are not processed, shell functions are not inherited from the
environment, and the
variable, if it appears in the environment, is ignored.
If the shell is started with the effective user (group) id not equal to the
are taken and the effective user id is set to the real user id.
not reset.
Turning this option off causes the effective user
and group ids to be set to the real user and group ids.
Exit after reading and executing one command.
Treat unset variables as an error when performing
parameter expansion.  If expansion is attempted on an
unset variable, the shell prints an error message, and,
if not interactive, exits with a non-zero status.
Print shell input lines as they are read.
followed by the command and its expanded arguments
or associated word list.
The shell performs brace expansion (see
above).  This is on by default.
If set,
does not overwrite an existing file with the
and
redirection operators.  This may be overridden when 
creating output files by using the redirection operator
instead of
substitutions, and commands executed in a subshell environment.
Enable
style history substitution.  This option is on by
default when the shell is interactive.
If set, the shell does not follow symbolic links when executing
commands such as
that change the current working directory.  It uses the
physical directory structure instead.  By default,
follows the logical chain of directories when performing commands
which change the current directory.
functions, command substitutions, and commands executed in a
subshell environment.
in such cases.
If no arguments follow this option, then the positional parameters are
unset.  Otherwise, the positional parameters are set to the
assigned to the positional parameters.  The
and
options are turned off.
the positional parameters remain unchanged.
The options are off by default unless otherwise noted.
The options can also be specified as arguments to an invocation of
the shell.
The current set of options may be found in
The return status is always true unless an invalid option is encountered.
If
is 0, no parameters are changed.
If
is not given, it is assumed to be 1.
If
The return status is greater than zero if
is greater than
or less than zero; otherwise 0.
Toggle the values of variables controlling optional shell behavior.
With no options, or with the
option, a list of all settable options is displayed, with
an indication of whether or not each is set.
may be reused as input.
Other options have the following meanings:
Suppresses normal output (quiet mode); the return status indicates
otherwise.
option to the
builtin.
If either
or
those options which are set or unset, respectively.
by default.
are enabled, non-zero otherwise.  When setting or unsetting options,
option.
If set, an argument to the
builtin command that
is not a directory is assumed to be the name of a variable whose
value is the directory to change to.
If set, minor errors in the spelling of a directory component in a
command will be corrected.
The errors checked for are transposed characters,
a missing character, and one character too many.
If a correction is found, the corrected file name is printed,
and the command proceeds.
This option is only used by interactive shells.
table exists before trying to execute it.  If a hashed command no
longer exists, a normal path search is performed.
and, if necessary, updates the values of
and
If set,
attempts to save all lines of a multiple-line
command in the same history entry.  This allows
easy re-editing of multi-line commands.
If set,
changes its behavior to that of version 3.1 with respect to quoted
arguments to the conditional command's =~ operator.
If set, 
includes filenames beginning with a `.' in the results of pathname
expansion.
If set, a non-interactive shell will not exit if
it cannot execute the file specified as an argument to the
builtin command.  An interactive shell does not exit if
fails.
If set, aliases are expanded as described above under
This option is enabled by default for interactive shells.
If set, behavior intended for use by debuggers is enabled:
file name and line number corresponding to each function name supplied
as an argument.
next command is skipped and not executed.
shell is executing in a subroutine (a shell function or a shell script
descriptions above.
Function tracing is enabled:  command substitution, shell functions, and
Error tracing is enabled:  command substitution, shell functions, and
If set, the extended pattern matching features described above under
enclosed in double quotes.  This option is enabled by default.
If set, patterns which fail to match filenames during pathname expansion
result in an expansion error.
cause words to be ignored when performing word completion even if
the ignored words are the only possible completions.
See
This option is enabled by default.
If set, shell error messages are written in the standard GNU error
message format.
If set, the history list is appended to the file named by the value
of the
variable when the shell exits, rather than overwriting the file.
If set, and
is being used, a user is given the opportunity to re-edit a
failed history substitution.
If set, and 
is being used, the results of history substitution are not immediately
passed to the shell parser.  Instead, the resulting line is loaded into
If set, and
under
above).
This is enabled by default.
to all jobs when an interactive login shell exits.
If set, allow a word beginning with
to cause that word and all remaining characters on that
line to be ignored in an interactive shell (see
above).  This option is enabled by default.
If set, and the
option is enabled, multi-line commands are saved to the history with
embedded newlines rather than using semicolon separators where possible.
The shell sets this option if it is started as a login shell (see
above).
The value may not be changed.
accessed since the last time it was checked, the message ``The mail in
If set, and
is being used,
completion is attempted on an empty line.
If set,
expansion (see
above).
If set,
If set,
allows patterns which match no
files (see
above)
to expand to a null string, rather than themselves.
If set, the programmable completion facilities (see
This option is enabled by default.
If set, prompt strings undergo
parameter expansion, command substitution, arithmetic
expansion, and quote removal after being expanded as described in
above.  This option is enabled by default.
The shell sets this option if it is started in restricted mode (see
below).
The value may not be changed.
This is not reset when the startup files are executed, allowing
the startup files to discover whether or not a shell is restricted.
If set, the
builtin prints an error message when the shift count exceeds the
number of positional parameters.
If set, the
to find the directory containing the file supplied as an argument.
This option is enabled by default.
by default.
Suspend the execution of this shell until it receives a
signal.  The
option says not to complain if this is 
a login shell; just suspend anyway.  The return status is 0 unless
the shell is a login shell and
is not supplied, or if job control is not enabled.
Return a status of 0 or 1 depending on
the evaluation of the conditional expression
Each operator and operand must be a separate argument.
Expressions are composed of the primaries described above under
Expressions may be combined using the following operators, listed
in decreasing order of precedence.
True if
is false.
This may be used to override the normal precedence of operators.
True if both
and
are true.
True if either
or
is true.
expressions using a set of rules based on the number of arguments.
0 arguments
The expression is false.
1 argument
The expression is true if and only if the argument is not null.
2 arguments
only if the second argument is null.
If the first argument is one of the unary conditional operators listed above
under
the expression is true if the unary test is true.
If the first argument is not a valid unary conditional operator, the expression
is false.
3 arguments
If the second argument is one of the binary conditional operators listed above
under
the result of the expression is the result of the binary test using
the first and third arguments as operands.
the two-argument test using the second and third arguments.
argument.
Otherwise, the expression is false.
in this case.  
4 arguments
the three-argument expression composed of the remaining arguments.
Otherwise, the expression is parsed and evaluated according to 
precedence using the rules listed above.
5 or more arguments
The expression is parsed and evaluated according to precedence
using the rules listed above.
Print the accumulated user and system times for the shell and
for processes run from the shell.  The return status is 0.
The command
is to be read and executed when the shell receives
signal(s)
If
each specified signal is
reset to its original disposition (the value it had
upon entrance to the shell).
If 
is the null string the signal specified by each
is ignored by the shell and by the commands it invokes.
If
is not present and
has been supplied, then the trap commands associated with each
are displayed.
If no arguments are supplied or if only
is given,
prints the list of commands associated with each signal.
The
option causes the shell to print a list of signal names and
their corresponding numbers.
Each
is either
Signal names are case insensitive and the SIG prefix is optional.
If a
is
(0) the command
is executed on exit from the shell.
If a
is
the command
command, and before the first command executes in a shell function (see
above).
If a
is
the command
subject to the following conditions.
The
trap is not executed if the failed
command is part of the command list immediately following a
or
keyword, 
part of the test in an
statement, part of a
or
list, or if the command's return value is
being inverted via
If a
is
the command
is executed each time a shell function or a script executed with the
Signals ignored upon entry to the shell cannot be trapped or reset.
Trapped signals that are not being ignored are reset to their original
values in a child process when it is created.
The return status is false if any
is invalid; otherwise
returns true.
With no options, 
indicate how each
would be interpreted if used as a command name.
If the
option is used,
prints a string which is one of
or
if
is an alias, shell reserved word, function, builtin, or disk file,
respectively.
If the
is not found, then nothing is printed, and an exit status of false
is returned.
If the
option is used,
either returns the name of the disk file
that would be executed if
were specified as a command name,
or nothing if
would not return
The
option forces a
would not return
If a command is hashed,
and
print the hashed value, not necessarily the file that appears
first in 
If the
option is used, 
prints all of the places that contain
an executable named 
This includes aliases and functions,
if and only if the 
option is not also used.
The table of hashed commands is not consulted
when using
The
returns true if any of the arguments are found, false if
none are found.
Provides control over the resources available to the shell and to
processes started by it, on systems that allow such control.
set for the given resource.  A hard limit cannot be increased once it
is set; a soft limit may be increased up to the value of the hard limit.
limits are set.
The value of
can be a number in the unit specified for the resource
or one of the special values
or
which stand for the current hard limit, the current soft limit, and
no limit, respectively.
If
is omitted, the current value of the soft limit of the resource is
resource is specified, the limit name and unit are printed before the value.
Other options are interpreted as follows:
All current limits are reported
The maximum size of core files created
The maximum size of a process's data segment
The maximum scheduling priority ("nice")
The maximum size of files written by the shell and its children
The maximum number of pending signals
The maximum size that may be locked into memory
The maximum resident set size
The maximum number of open file descriptors (most systems do not
allow this value to be set)
The pipe size in 512-byte blocks (this may not be set)
The maximum number of bytes in POSIX message queues
The maximum real-time scheduling priority
The maximum stack size
The maximum amount of cpu time in seconds
The maximum number of processes available to a single user
The maximum amount of virtual memory available to the shell
The maximum number of file locks
If
is given, it is the new value of the specified resource (the
option is display only).
If no option is given, then
is assumed.  Values are in 1024-byte increments, except for
which is in seconds,
which is in units of 512-byte blocks,
and
and
which are unscaled values.
The return status is 0 unless an invalid option or argument is supplied,
or an error occurs while setting a new limit.
The user file-creation mask is set to 
If
begins with a digit, it
is interpreted as an octal number; otherwise
it is interpreted as a symbolic mode mask similar
to that accepted by
If
is omitted, the current value of the mask is printed.
The
option causes the mask to be printed in symbolic form; the
default output is an octal number.
If the
option is supplied, and
is omitted, the output is in a form that may be reused as input.
The return status is 0 if the mode was successfully changed or if
is supplied, all alias definitions are removed.  The return
value is true unless a supplied
is not a defined alias.
For each
remove the corresponding variable or function.
If no options are supplied, or the
option is given, each
refers to a shell variable.
Read-only variables may not be unset.
If
is specified, each
refers to a shell function, and the function definition
is removed.
Each unset variable or function is removed from the environment
passed to subsequent commands.
If any of
or
are unset, they lose their special properties, even if they are
subsequently reset.  The exit status is true unless a
is readonly.
Wait for each specified process and return its termination status.
Each
may be a process
ID or a job specification; if a job spec is given, all processes
in that job's pipeline are waited for.  If
is not given, all currently active child processes
are waited for, and the return status is zero.  If
specifies a non-existent process or job, the return status is
127.  Otherwise, the return status is the exit status of the last
process or job waited for.
If
is started with the name
or the
option is supplied at invocation,
the shell becomes restricted.
A restricted shell is used to
set up an environment more controlled than the standard shell.
It behaves identically to
with the exception that the following are disallowed or not performed:
setting or unsetting the values of
or
specifying command names containing
specifying a file name containing a
as an argument to the
builtin command
Specifying a filename containing a slash as an argument to the
option to the
builtin command
importing function definitions from the shell environment at startup
redirecting output using the >, >|, <>, >&, &>, and >> redirection operators
using the
builtin command to replace the shell with another command
adding or deleting builtin commands with the
and
options to the
builtin command
specifying the
option to the
builtin command
turning off restricted mode with
These restrictions are enforced after any startup files are read.
(see
above),
turns off any restrictions in the shell spawned to execute the
script.
The systemwide initialization file, executed for login shells
The personal initialization file, executed for login shells
The individual per-interactive-shell startup file
The individual login shell cleanup file, executed when a login shell exits
Brian Fox, Free Software Foundation
bfox@gnu.org
Chet Ramey, Case Western Reserve University
chet@po.cwru.edu
If you find a bug in
you should report it.  But first, you should
make sure that it really is a bug, and that it appears in the latest
version of
The latest version is always available from
Once you have determined that a bug actually exists, use the
command to submit a bug report.
If you have a fix, you are encouraged to mail that as well!
Suggestions and `philosophical' bug reports may be mailed
newsgroup
ALL bug reports should include:
The hardware and operating system
The compiler used to compile
A description of the bug behaviour
A short script or `recipe' which exercises the bug
inserts the first three items automatically into the template
it provides for filing a bug report.
Comments and bug reports concerning
this manual page should be directed to
It's too big and too slow.
There are some subtle differences between 
and traditional versions of
mostly because of the
specification.
Aliases are confusing in some uses.
Compound commands and command sequences of the form `a ; b ; c'
are not handled gracefully when process suspension is attempted.
When a process is stopped, the shell immediately executes the next
command in the sequence.
It suffices to place the sequence of commands between
parentheses to force it into a subshell, which may be stopped as
a unit.
parsed until substitution is attempted.  This will delay error
reporting until some time after the command is entered.  For example,
unmatched parentheses, even inside shell comments, will result in
error messages while the construct is being read.
Array variables may not (yet) be exported.
is a shell script to help the user compose and mail bug reports
concerning bash in a standard format.
invokes the editor specified by the environment variable
on a temporary copy of the bug report format outline. The user must
fill in the appropriate fields and exit the editor.
The bug report format outline consists of several sections.  The first
section provides information about the machine, operating system, the
bash version, and the compilation environment.  The second section
should be filled in with a description of the bug.  The third section
should be a description of how to reproduce the bug.  The optional
fourth section is for a proposed fix.  Fixes are encouraged.
will utilize the following environment variables if they exist:
Specifies the preferred editor. If
is not set,
defaults to
Directory in which the failed bug report is saved if the mail fails.
bc - An arbitrary precision calculator language
This man page documents GNU bc version 1.06.
with interactive execution of statements.  There are some similarities
in the syntax to the C programming language. 
A standard math library is available by command line option.
If requested, the math library is defined before processing any files.
on the command line in the order listed.  After all files have been
executed as it is read.  (If a file contains a command to halt the
Command line options can cause these extensions to print a warning 
or to be rejected.  This 
document describes the language accepted by this processor.
Extensions will be identified as such.
Print the usage and exit.
Force interactive mode.
Define the standard math library.
Do not print the normal GNU bc welcome.
Print the version number and copyright and quit.
arbitrary precision numbers.  This precision is both in the integer
part and the fractional part.  All numbers are represented internally
in decimal and all computation is done in decimal.  (This version
truncates results from divide and multiply operations.)  There are two
attributes of numbers, the length and the scale.  The length is the
total number of significant decimal digits in a number and the scale
is the total number of decimal digits after the decimal point.  For
example:
 .000001 has a length of 6 and scale of 6.
 1935.000 has a length of 7 and a scale of 3.
Numbers are stored in two types of variables, simple variables and
arrays.  Both simple variables and array variables are named.  Names
begin with a letter followed by any number of letters, digits and
underscores.  All letters must be lower case.  (Full alpha-numeric
lower case letter.)  The type of variable is clear by the context
because all array variable names will be followed by brackets ([]).
numbers.  The default for both input and output is base 10.
printed number.  These will be discussed in further detail where
appropriate.  All of these variables may have values assigned to them
as well as used in expressions.
single space in the input.  (This causes comments to delimit other
input items.  For example, a comment can not be found in the middle of
a variable name.)  Comments include any newlines (end of line) between
the start and the end of the comment.
character and continues to the next end of the line.  The end of line
character is not part of the comment and is processed normally.
The numbers are manipulated by expressions and statements.  Since
the language was designed to be interactive, statements and expressions
are executed as soon as possible.  There is no "main" program.  Instead,
code is executed as it is encountered.  (Functions, discussed in
detail later, are defined when encountered.)
into internal decimal numbers using the current input base, specified
or 16.  Input numbers may contain the characters 0-9 and A-F. (Note:
They must be capitals.  Lower case letters are variable names.)
Single digit numbers always have the value of the digit regardless of
the largest 3 digit number of the input base.
Full expressions are similar to many other high level languages.
Since there is only one kind of number, there are no rules for mixing
types.  Instead, there are rules on the scale of expressions.  Every
expression has a scale.  This is derived from the scale of original
numbers, the operation performed and in many cases, the value of the
0 to the maximum number representable by a C integer.
In the following descriptions of legal expressions, "expr" refers to a
complete expression and "var" refers to a simple or an array variable.
A simple variable is just a
and an array variable is specified as
Unless specifically
mentioned the scale of the result is the maximum scale of the
expressions involved.
The result is the negation of the expression.
The variable is incremented by one and the new value is the result of
the expression.
The variable
is decremented by one and the new value is the result of the
expression.
 The result of the expression is the value of
the variable and then the variable is incremented by one.
The result of the expression is the value of the variable and then
the variable is decremented by one.
The result of the expression is the sum of the two expressions.
The result of the expression is the difference of the two expressions.
The result of the expression is the product of the two expressions.
The result of the expression is the quotient of the two expressions.
The result of the expression is the "remainder" and it is computed in the
to zero and both expressions are integers this expression is the
integer remainder function.
The result of the expression is the value of the first raised to the
second. The second expression must be an integer.  (If the second
expression is not an integer, a warning is generated and the
expression is truncated to get an integer value.)  The scale of the
is positive the scale of the result is the minimum of the scale of the
first expression times the value of the exponent and the maximum of
that expr^0 will always return the value of 1.
This alters the standard precedence to force the evaluation of the
expression.
The variable is assigned the value of the expression.
This is equivalent to "var = var <op> expr" with the exception that
the "var" part is evaluated only once.  This can make a difference if
"var" is an array.
 Relational expressions are a special kind of expression
that always evaluate to 0 or 1, 0 if the relation is false and 1 if
the relation is true.  These may appear in any legal expression.
(POSIX bc requires that relational expressions are used only in if,
while, and for statements and that only one relational test may be
done in them.)  The relational operators are
The result is 1 if expr1 is strictly less than expr2.
The result is 1 if expr1 is less than or equal to expr2.
The result is 1 if expr1 is strictly greater than expr2.
The result is 1 if expr1 is greater than or equal to expr2.
The result is 1 if expr1 is equal to expr2.
The result is 1 if expr1 is not equal to expr2.
boolean operations). The result of all boolean operations are 0 and 1
(for false and true) as in relational expressions.  The boolean
operators are:
The result is 1 if expr is 0.
The result is 1 if both expressions are non-zero.
The result is 1 if either expression is non-zero.
The expression precedence is as follows: (lowest to highest)
|| operator, left associative
&& operator, left associative
! operator, nonassociative
Relational operators, left associative
Assignment operator, right associative
+ and - operators, left associative
^ operator, right associative
unary - operator, nonassociative
++ and -- operators, nonassociative
will run correctly. This will cause the use of the relational and
logical operators to have some unusual behavior when used with
assignment expressions.  Consider the expression:
a = 3 < 5
Most C programmers would assume this would assign the result of "3 <
assign the value 3 to the variable "a" and then compare 3 to 5.  It is
best to use parenthesis when using relational and logical operators
with the assignment operators.
These have to do with user defined functions and standard
See the section on functions for user defined functions.  The standard
functions are:
The value of the length function is the number of significant digits in the
expression.
The read function (an extension) will read a number from the standard
input, regardless of where the function occurs.   Beware, this can
cause problems with the mixing of data and program in the standard input.
The best use for this function is in a previously written program that
needs input from the user, but never allows program code to be input
from the user.  The value of the read function is the number read from
the standard input using the current value of the variable 
The value of the scale function is the number of digits after the decimal
point in the expression.
The value of the sqrt function is the square root of the expression.  If
the expression is negative, a run time error is generated.
Statements (as in most algebraic languages) provide the sequencing of
as possible."  Execution happens when a newline in encountered and
there is one or more complete statements.  Due to this immediate
semicolon and a newline are used as statement separators.  An
improperly placed newline will cause a syntax error.  Because newlines
are statement separators, it is possible to hide a newline by using
statement list is a series of statements separated by semicolons and
they do: (Things enclosed in brackets ([]) are optional parts of the
statement.)
This statement does one of two things.  If the expression starts with
"<variable> <assignment> ...", it is considered to be an assignment
statement.  If the expression is not an assignment statement, the
expression is evaluated and printed to the output.  After the number
is printed, a newline is printed.  For example, "a=1" is an assignment
statement and "(a=1)" is an expression that has an embedded
assignment.  All numbers that are printed are printed in the base
bases 2 through 16, the usual method of writing numbers is used.  For
of printing the numbers where each higher base digit is printed as a
base 10 number.  The multi-character digits are separated by spaces.
Each digit contains the number of characters required to represent the
base ten value of "obase-1".  Since numbers are of arbitrary
precision, some numbers may not be printable on a single output line.
last character on a line.  The maximum number of characters printed
a number causes the side effect of assigning the printed value to the
last value printed without having to retype the expression that
overwrite the last printed value with the assigned value.  The newly
assigned value will remain until the next number is printed or another
use of a single period (.) which is not part of a number as a short
The string is printed to the output.  Strings start with a double quote
character and contain all characters until the next double quote character.
All characters are take literally, including any newline.  No newline
character is printed after the string.
The print statement (an extension) provides another method of output.
The "list" is a list of strings and expressions separated by commas.
Each string or expression is printed in the order of the list.  No
terminating newline is printed.  Expressions are evaluated and their
in the print statement are printed to the output and may contain
special characters.  Special characters start with the backslash
"a" (alert or bell), "b" (backspace), "f" (form feed), "n" (newline),
Any other character following the backslash will be ignored.  
This is the compound statement.  It allows multiple statements to be
grouped together for execution.
The if statement evaluates the expression and executes statement1 or
statement2 depending on the value of the expression.  If the expression
is non-zero, statement1 is executed.  If statement2 is present and
the value of the expression is 0, then statement2 is executed.  (The
else clause is an extension.)
The while statement will execute the statement while the expression
is non-zero.  It evaluates the expression before each execution of
the statement.   Termination of the loop is caused by a zero
expression value or the execution of a break statement.
The for statement controls repeated execution of the statement.  
Expression1 is evaluated before the loop.  Expression2 is evaluated
before each execution of the statement.  If it is non-zero, the statement
is evaluated.  If it is zero, the loop is terminated.  After each
execution of the statement, expression3 is evaluated before the reevaluation
of expression2.  If expression1 or expression3 are missing, nothing is
evaluated at the point they would be evaluated.
If expression2 is missing, it is the same as substituting
the value 1 for expression2.  (The optional expressions are an
The following is equivalent code for the for statement:
expression1;
while (expression2) {
   statement;
   expression3;
}
This statement causes a forced exit of the most recent enclosing while
statement or for statement.
The continue statement (an extension)  causes the most recent enclosing
for statement to start the next iteration.
The halt statement (an extension) is an executed statement that causes
not executed.
Return the value 0 from a function.  (See the section on functions.)
Return the value of the expression from a function.  (See the section on 
functions.)  As an extension, the parenthesis are not required.
These statements are not statements in the traditional sense.  They are
not executed statements.  Their function is performed at "compile" time.
is an extension.
is terminated, regardless of where the quit statement is found.  For
Print a longer warranty notice.  This is an extension.
Functions provide a method of defining a computation that can be executed
later.  Functions in 
always compute a value and return it to the caller.  Function definitions
are "dynamic" in the sense that a function is undefined until a definition
is encountered in the input.  That definition is then used until another
definition function for the same name is encountered.  The new definition
then replaces the older definition.  A function is defined as follows:
A function call is just an expression of the form
Parameters are numbers or arrays (an extension).  In the function definition,
zero or more parameters are defined by listing their names separated by
commas.  Numbers are only call by value parameters.  Arrays are only
call by variable.  Arrays are specified in the parameter definition by
are full expressions for number parameters.  The same notation is used
for passing arrays as for defining array parameters.  The named array is
passed by variable to the function.  Since function definitions are dynamic,
parameter numbers and types are checked when a function is called.  Any
mismatch in number or types of parameters will cause a runtime error.
A runtime error will also occur for the call to an undefined function.
the name of an auto variable.  Arrays may be specified by using the
same notation as used in parameters.  These variables have their
values pushed onto a stack at the start of the function.  The
variables are then initialized to zero and used throughout the
execution of the function.  At function exit, these variables are
popped so that the original value (at the time of the function call)
of these variables are restored.  The parameters are really auto
variables that are initialized to a value provided in the function
call.  Auto variables are different than traditional local variables
because if function A calls function B, B may access function
A's auto variables by just using the same name, unless function B has
called them auto variables.  Due to the fact that auto variables and
are separated by semicolons or newlines.  Return statements cause the
termination of a function and the return of a value.  There are two
the value 0 to the calling expression.  The second form, 
and returns that value to the calling expression.  There is an implied
to terminate and return 0 without an explicit return statement.
constants in the function body will be converted using the value of
will be ignored during the execution of the function except for the
As an extension, the format of the definition has been slightly relaxed.
The standard requires the opening brace be on the same line as the 
after the opening brace of the function.  For example, the following
definitions are legal.
define d (n) { return (2*n); }
define d (n)
  { return (2*n); }
and the default scale is set to 20.   The math functions will calculate their
results to the scale set at the time of their call.  
The math library defines the following functions:
The sine of x, x is in radians.
The cosine of x, x is in radians.
The arctangent of x, arctangent returns radians.
The natural logarithm of x.
The exponential function of raising e to the value x.
The bessel function of integer order n of x.
pi=$(echo "scale=10; 4*a(1)" | bc -l)
The following is the definition of the exponential function used in the
scale = 20

   When x is small enough, we use the series:

define e(x) {
  auto  a, d, e, f, i, m, v, z

  if (x<0) {
    m = 1
    x = -x
  } 

  z = scale;
  scale = 4 + z + .44*x;
  while (x > 1) {
    f += 1;
  }

  v = 1+x
  a = x
  d = 1

  for (i=2; 1; i++) {
    if (e == 0) {
      if (f>0) while (f--)  v = v*v;
      scale = z
    }
    v += e
  }
}
implement a simple program for calculating checkbook balances.  This
program is best kept in a file so that it can be used many times 
without having to retype it at every use.
scale=2

print "Initial balance? "; bal = read()
while (1) {
  "current balance = "; bal
  "transaction? "; trans = read()
  if (trans == 0) break;
  bal -= trans
}
quit
The following is the definition of the recursive factorial function.
define f (x) {
  if (x <= 1) return (1);
  return (f(x-1) * x);
}
This allows the user to do editing of lines before sending them
number of history lines are retained.  Setting the value of
lines to the number given.  The value of 0 disables the history
feature.  The default value is 100. For more information, read the
at the same time.
This version of 
several differences and extensions relative to the draft and
traditional implementations.
It is not implemented in the traditional way using
This version is a single process which parses and runs a byte code
translation of the program.  There is an "undocumented" option (-c)
that causes the program to output the byte code to
the standard output instead of running it.  It was mainly used for
debugging the parser and preparing the math library.
A major source of differences is
extensions, where a feature is extended to add more functionality and
additions, where new features are added. 
The following is the list of differences and extensions.
This version does not conform to the POSIX standard in the processing
of the LANG environment variable and all environment variables starting
with LC_.
Traditional and POSIX
have single letter names for functions, variables and arrays.  They have
been extended to be multi-character names that start with a letter and
may contain letters, numbers and the underscore character.
Strings are not allowed to contain NUL characters.  POSIX says all characters
must be included in strings.
statement, and the second expression of the for statement.  Also, only
one relational operation is allowed in each of those statements.
The POSIX grammar allows for arrays in function definitions, but does
not provide a method to specify an array as an actual parameter.  (This
is most likely an oversight in the grammar.)  Traditional implementations
be defined.  This version may allow these "old style" assignments.  Use
the limits statement to see if the installed version supports them.  If
it does support the "old style" assignment operators, the statement
value -1.
"x=1 3" would assign the value 13 to the variable x.  The same statement
This implementation varies from other implementations in terms of what
code will be executed when syntax and other errors are found in the
program.  If a syntax error is found in a function definition, error
recovery tries to find the beginning of a statement and continue to
parse the function.  Once a syntax error is found in the function, the
function will not be callable and becomes undefined.
Syntax errors in the interactive execution code will invalidate the
current execution block.  The execution block is terminated by an
end of line that appears after a complete sequence of statements.
For example, 
a = 1
b = 2
has two execution blocks and
{ a = 1
  b = 2 }
has one execution block.  Any runtime error will terminate the execution
of the current execution block.  A runtime warning will not terminate the
current execution block.
During an interactive session, the SIGINT signal (usually generated by
the control-C character from the terminal) will cause execution of the
current execution block to be interrupted.  It will display a "runtime"
error indicating which function was interrupted.  After all runtime
structures have been cleaned up, a message will be printed to notify the
remain defined and the value of all non-auto variables are the value at
the point of interruption.  All auto variables and function parameters
are removed during the
clean up process.  During a non-interactive
The following are the limits currently in place for this 
processor.  Some of them may have been changed by an installation.
Use the limits statement to see the actual values.
The maximum output base is currently set at 999.  The maximum input base
is 16.
This is currently an arbitrary limit of 65535 as distributed.  Your
installation may be different.
The number of digits after the decimal point is limited to INT_MAX digits.
Also, the number of digits before the decimal point is limited to INT_MAX
digits.
The limit on the number of characters in a string is INT_MAX characters.
The value of the exponent in the raise operation (^) is limited to LONG_MAX.
The current limit on the number of unique names is 32767 for each of
simple variables, arrays and functions.
format is the same as the command line arguments.  These arguments
are processed first, so any files listed in the environent arguments
are processed before any command line argument files.  This allows
the user to set up "standard" options and files to be processed
variables would typically contain function definitions for functions
This should be an integer specifing the number of characters in an
output line for numbers. This includes the backslash and newline characters
for long numbers.
that the file is unavailable and terminate.  Also, there are compile
and run time diagnostics that should be self-explanatory.
Error recovery is not very good yet.
Email bug reports to
Be sure to include the word ``bc'' somewhere in the ``Subject:'' field.
Philip A. Nelson
philnelson@acm.org
The author would like to thank Steve Sommars (Steve.Sommars@att.com) for
his extensive help in testing the implementation.  Many great suggestions
were given.  This is a much better product due to his involvement.
The
utility informs the system whether you want to be notified on your terminal
when mail arrives.
Affected is the first terminal associated with the standard input,
standard output or standard error file descriptor, in that order.
Thus, it is possible to use the redirection facilities of a shell to
toggle the notification for other terminals than the one
runs on.
The following options are available:
Disable notification.
Enable header notification.
Enable bell notification.
When header notification is enabled, the header and first few lines of
the message will be printed on your terminal whenever mail arrives.
A
command is often included in the file
or
to be executed at each login.
When bell notification is enabled, only two bell characters
will be printed on your terminal whenever mail arrives.
If no arguments are given,
displays the present notification status of the terminal to the
standard output.
The
utility operates asynchronously.
For synchronous notification use the
variable of
or the
variable of
The
utility exits with one of the following values:
Notification is enabled.
Notification is disabled.
An error occurred.
Previous versions of the
utility affected the terminal attached to standard error without first
trying the standard input or output devices.
The
command appeared in
It was named after the dog of Heidi Stettner.
He died
in August 1993, at 15.
Usage:
Where the options are:
Each file is converted to file.hqx.
Largely untested.
his grubby paws off anything...
Usage:
Where the options are:
Each file is converted to file.hqx.
Largely untested.
his grubby paws off anything...
understands the following commands:
    diagnose and collect logs
    -M,--collect-mobile-documents[=<container>]  (default: all containers)
    -s,--sysdiagnose     Do not collect what's already part of sysdiagnose
    -n,--name=<name>     Change the device name
    [<diagnosis-output-path>]
                         Specifies the output path of the diagnosis; -n becomes useless.
    -c,--color[={yes,no}]
                         turn on or off color use
    -d,--path=<logs-dir> use <logs-dir> instead of default
    -f,--filter=<predicate>
                         only show lines matching predicate
    -m,--multiline[={yes,no}]
                         turn on or off multiple line logging
    -n=<number>          number of initial lines to display
    -p,--page            use paging
    -w,--wait            wait for new logs continuously (syslog -w)
    -t,--shorten         Shorten UUIDs, paths, etc
    -s,--digest          Only print digest logs
    dump the CloudDocs database
    -o,--output=<file-path>
                         redirect output to <file-path>
    -d,--database-path=<db-path>
                         Use the database at <db-path>
    [<container>]        the container to be dumped
    use NSMetadataQuery to monitor the container
    -S,--scope=<scope>
                         restrict the NSMDQ scope to DOCS, DATA, or BOTH
creates and manipulates streaming archive files.
This implementation can extract from tar, pax, cpio, zip, jar, ar,
and ISO 9660 cdrom images and can create tar, pax, cpio, ar,
and shar archives.
The first synopsis form shows a
option word.
This usage is provided for compatibility with historical implementations.
See COMPATIBILITY below for details.
The other synopsis forms show the preferred usage.
The first option to
is a mode indicator from the following list:
Create a new archive containing the specified items.
Like
but new entries are appended to the archive.
Note that this only works on uncompressed archives stored in regular files.
The
option is required.
List archive contents to stdout.
Like
but new entries are added only if they have a modification date
newer than the corresponding entry in the archive.
Note that this only works on uncompressed archives stored in regular files.
The
option is required.
Extract to disk from the archive.
If a file with the same name appears more than once in the archive,
each copy will be extracted, with later copies overwriting (replacing)
earlier copies.
In
or
mode, each specified file or directory is added to the
archive in the order specified on the command line.
By default, the contents of each directory are also archived.
In extract or list mode, the entire command line
is read and parsed before the archive is opened.
The pathnames or patterns on the command line indicate
which items in the archive should be processed.
Patterns are shell-style globbing patterns as
documented in
Unless specifically stated otherwise, options are applicable in
all operating modes.
(c and r mode only)
The specified archive is opened and the entries
in it will be appended to the current archive.
As a simple example,
writes a new archive to standard output containing a file
and all of the entries from
In contrast,
creates a new archive with only two entries.
Similarly,
reads an archive from standard input (whose format will be determined
automatically) and converts it into a gzip-compressed
pax-format archive on stdout.
In this way,
can be used to convert archives from one format to another.
As a rule, this argument is only needed when reading from or writing
to tape drives, and usually not even then as the default block size of
20 records (10240 bytes) is very common.
In c and r mode, this changes the directory before adding
the following files.
In x mode, change directories after opening the archive
but before extracting entries from the archive.
(c and r modes only)
Issue a warning message unless all links to each file are archived.
(x mode only)
to the current directory after processing any
options and before extracting any files.
Do not process files or directories that match the
specified pattern.
Note that exclusions take precedence over patterns or filenames
specified on the command line.
(c, r, u mode only)
Use the specified format for the created archive.
Supported formats include
and
Other formats may also be supported; see
for more information about currently-supported formats.
In r and u modes, when extending an existing archive, the format specified
here must be compatible with the format of the existing archive on disk.
Read the archive from or write the archive to the specified file.
The filename can be
for standard input or standard output.
(c and r mode only)
Symbolic links named on the command line will be followed; the
target of the link will be archived, not the link itself.
(c and r mode only)
Synonym for
Synonym for
Process only files or directories that match the specified pattern.
Note that exclusions specified with
take precedence over inclusions.
If no inclusions are explicitly specified, all entries are processed by
default.
The
option is especially useful when filtering archives.
For example, the command
creates a new archive
containing only the entries from
containing the string
(c mode only)
Compress the resulting archive with
In extract or list modes, this option is ignored.
Note that, unlike other
implementations, this implementation recognizes bzip2 compression
automatically when reading archives.
(x mode only)
Do not overwrite existing files.
In particular, if a file appears more than once in an archive,
later copies will not overwrite earlier copies.
(x mode only)
Do not overwrite existing files that are newer than the
versions appearing in the archive being extracted.
(c and r mode only)
All symbolic links will be followed.
Normally, symbolic links are archived as such.
With this option, the target of the link will be archived instead.
This is a synonym for the
option.
(x mode only)
Do not extract modification time.
By default, the modification time is set to the time stored in the archive.
(c, r, u modes only)
Do not recursively archive the contents of directories.
(c, r, u modes only)
Only include files and directories newer than the specified date.
This compares ctime entries.
(c, r, u modes only)
Like
except it compares mtime entries instead of ctime entries.
(c, r, u modes only)
Only include files and directories newer than the specified file.
This compares ctime entries.
(c, r, u modes only)
Like
except it compares mtime entries instead of ctime entries.
(c and r modes only)
Honor the nodump file flag by skipping this file.
(use with
or
Filenames or patterns are separated by null characters,
not by newlines.
This is often used to read filenames output by the
option to
(x mode only)
Ignore symbolic user and group names when restoring archives to disk,
only numeric uid and gid values will be obeyed.
(x, t modes only)
In extract (-x) mode, files will be written to standard out rather than
being extracted to disk.
In list (-t) mode, the file listing will be written to stderr rather than
the usual stdout.
(x mode)
Use the user and group of the user running the program rather
than those specified in the archive.
Note that this has no significance unless
is specified, and the program is being run by the root user.
In this case, the file modes and flags from
the archive will be restored, but ACLs or owner information in
the archive will be discarded.
(c, r, u mode)
A synonym for
(c, r, and u modes)
Do not cross mount points.
Select optional behaviors for particular modules.
The argument is a text string containing comma-separated
keywords and values.
These are passed to the modules that handle particular
formats to control how those formats will behave.
Each option has one of the following forms:
The key will be set to the specified value in every module that supports it.
Modules that do not support this key will ignore it.
The key will be enabled in every module that supports it.
This is equivalent to
The key will be disabled in every module that supports it.
As above, but the corresponding key and value will be provided
only to modules whose name matches
The currently supported modules and keys are:
Support Joliet extensions.
This is enabled by default, use
or
to disable.
Support Rock Ridge extensions.
This is enabled by default, use
or
to disable.
A decimal integer from 0 to 9 specifying the gzip compression level.
A decimal integer from 0 to 9 specifying the xz compression level.
The mtree writer module allows you to specify which mtree keywords
will be included in the output.
Supported keywords include:
The default is equivalent to:
Enables all of the above keywords.
You can also use
to disable all keywords.
Enable generation of
lines in the output.
Produce human-readable output by indenting options and splitting lines
to fit into 80 columns.
Use
as compression method.
Supported values are store (uncompressed) and deflate (gzip algorithm).
If a provided option is not supported by any module, that
is a fatal error.
Preserve pathnames.
character) have the leading slash removed both when creating archives
and extracting from them.
Also,
will refuse to extract archive entries whose pathnames contain
or whose target directory would be altered by a symlink.
This option suppresses these behaviors.
(x mode only)
Preserve file permissions.
Attempt to restore the full permissions, including owner, file modes, file
flags and ACLs, if available, for each item extracted from the archive.
By default, newly-created files are owned by the user running
the file mode is restored for newly-created regular files, and
all other types of entries receive default permissions.
If
is being run by root, the default is to restore the owner unless the
option is also specified.
(x and t mode only)
Extract or list only the first archive entry that matches each pattern
or filename operand.
Exit as soon as each specified pattern or filename has been matched.
By default, the archive is always read to the very end, since
there can be multiple entries with the same name and, by convention,
later entries overwrite earlier entries.
This option is provided as a performance optimization.
(x mode only)
Extract files as sparse files.
For every block on disk, check first if it contains only NULL bytes and seek
over it otherwise.
This works similiar to the conv=sparse option of dd.
(x mode only)
Remove the specified number of leading path elements.
Pathnames with fewer elements will be silently skipped.
but before security checks.
Modify file or archive member names according to
The pattern has the format
where
is a basic regular expression,
is the replacement string of the matched part,
and the optional trailing letters modify
how the replacement is handled.
If
is not matched, the pattern is skipped.
Within
the corresponding captured group.
The optional trailing g specifies that matching should continue
after the matched part and stopped on the first unmatched pattern.
The optional trailing s specifies that the pattern applies to the value
of symbolic links.
The optional trailing p specifies that after a successful substitution
the original path name and the new path name should be printed to
standard error.
In x or t mode,
will read the list of names to be extracted from
In c mode,
will read names to be archived from
The special name
on a line by itself will cause the current directory to be changed to
the directory specified on the following line.
Names are terminated by newlines unless
is specified.
Note that
also disables the special handling of lines containing
(x mode only)
Unlink files before creating them.
Without this option,
overwrites existing files, which preserves existing hardlinks.
With this option, existing hardlinks will be broken, as will any
symlink that would affect the location of an extracted file.
Pipe the input (in x or t mode) or the output (in c mode) through
instead of using the builtin compression support.
Produce verbose output.
In create and extract modes,
will list each file name as it is read from or written to
the archive.
In list mode,
will produce output similar to that of
Additional
options will provide additional detail.
Print version of
and
and exit.
Ask for confirmation for every action.
Read a list of exclusion patterns from the specified file.
See
for more information about the handling of exclusions.
(c mode only)
Compress the resulting archive with
In extract or list modes, this option is ignored.
Note that, unlike other
implementations, this implementation recognizes bzip2 compression
automatically when reading archives.
(c mode only)
Compress the resulting archive with
In extract or list modes, this option is ignored.
Note that, unlike other
implementations, this implementation recognizes gzip compression
automatically when reading archives.
(c mode only)
Compress the resulting archive with
In extract or list modes, this option is ignored.
Note that, unlike other
implementations, this implementation recognizes compress compression
automatically when reading archives.
The following environment variables affect the execution of
The locale to use.
See
for more information.
The timezone to use when displaying dates.
See
for more information.
The following creates a new archive
called
that contains two files
and
To view a detailed table of contents for this
archive:
To examine the contents of an ISO 9660 cdrom image:
To move file hierarchies, invoke
as
or more traditionally
In create mode, the list of files and directories to be archived
can also include directory change instructions of the form
and archive inclusions of the form
For example, the command line
will create a new archive
will read the file
from the current directory and add it to the output archive.
It will then read each entry from
and add those entries to the output archive.
Finally, it will switch to the
directory and add
to the output archive.
An input file in
format can be used to create an output archive with arbitrary ownership,
permissions, or names that differ from existing data on disk:
The
and
switches accept a variety of common date and time specifications, including
and
The
argument can be used to control various details of archive generation
or reading.
For example, you can generate mtree output which only contains
and
keywords:
or you can set the compression level used by gzip or xz compression:
For more details, see the explanation of the
and
API calls that are described in
and
The bundled-arguments format is supported for compatibility
with historic implementations.
It consists of an initial word (with no leading - character) in which
each character indicates an option.
Arguments follow as separate words.
The order of the arguments must match the order
of the corresponding characters in the bundled command word.
For example,
specifies three flags
and
The
and
flags both require arguments,
so there must be two additional items
on the command line.
The
is the argument to the
flag, and
is the argument to the
flag.
The mode options c, r, t, u, and x and the options
b, f, l, m, o, v, and w comply with SUSv2.
For maximum portability, scripts that invoke
should use the bundled-argument format above, should limit
themselves to the
and
modes, and the
and
options.
Additional long options are provided to improve compatibility with other
tar implementations.
Certain security issues are common to many archiving programs, including
In particular, carefully-crafted archives can request that
extract files to locations outside of the target directory.
This can potentially be used to cause unwitting users to overwrite
files they did not intend to overwrite.
If the archive is being extracted by the superuser, any file
on the system can potentially be overwritten.
There are three ways this can happen.
Although
has mechanisms to protect against each one,
savvy users should be aware of the implications:
Archive entries can have absolute pathnames.
By default,
removes the leading
character from filenames before restoring them to guard against this problem.
Archive entries can have pathnames that include
components.
By default,
will not extract files containing
components in their pathname.
Archive entries can exploit symbolic links to restore
files to other directories.
An archive can restore a symbolic link to another directory,
then use that link to restore a file into that directory.
To guard against this,
checks each extracted path for symlinks.
If the final path element is a symlink, it will be removed
and replaced with the archive entry.
If
is specified, any intermediate symlink will also be unconditionally removed.
If neither
nor
is specified,
will refuse to extract the entry.
To protect yourself, you should be wary of any archives that
come from untrusted sources.
You should examine the contents of an archive with
before extraction.
You should use the
option to ensure that
will not overwrite any existing files or the
option to remove any pre-existing files.
You should generally not extract archives while running with super-user
privileges.
Note that the
option to
disables the security checks above and allows you to extract
an archive while preserving any absolute pathnames,
components, or symlinks to other directories.
There is no current POSIX standard for the tar command; it appeared
in
but was dropped from
The options used by this implementation were developed by surveying a
number of existing tar implementations as well as the old POSIX specification
for tar and the current POSIX specification for pax.
The ustar and pax interchange file formats are defined by
for the pax command.
A
command appeared in Seventh Edition Unix, which was released in January, 1979.
There have been numerous other implementations,
many of which extended the file format.
John Gilmore's
public-domain implementation (circa November, 1987)
was quite influential, and formed the basis of GNU tar.
GNU tar was included as the standard system tar
in
beginning with
This is a complete re-implementation based on the
library.
This program follows
for the definition of the
option.
Note that GNU tar prior to version 1.15 treated
as a synonym for the
option.
The
option may differ from historic implementations.
All archive output is written in correctly-sized blocks, even
if the output is being compressed.
Whether or not the last output block is padded to a full
block size varies depending on the format and the
output device.
For tar and cpio formats, the last block of output is padded
to a full block size if the output is being
written to standard output or to a character or block device such as
a tape drive.
If the output is being written to a regular file, the last block
will not be padded.
Many compressors, including
and
complain about the null padding when decompressing an archive created by
although they still extract it correctly.
The compression and decompression is implemented internally, so
there may be insignificant differences between the compressed output
generated by
and that generated by
but tradition (and POSIX) dictates otherwise.
The
and
modes require that the archive be uncompressed
and located in a regular file on disk.
Other archives can be modified using
mode with the
extension.
To archive a file called
or
you must specify it as
or
respectively.
In create mode, a leading
is always removed.
A leading
is stripped unless the
option is specified.
There needs to be better support for file selection on both create
and extract.
There is not yet any support for multi-volume archives or for archiving
sparse files.
Converting between dissimilar archive formats (such as tar and cpio) using the
convention can cause hard link information to be lost.
(This is a consequence of the incompatible ways that different archive
formats store hardlink information.)
There are alternative long options for many of the short options that
are deliberately not documented.
generates
from
and
where
is a binary patch built by bsdiff(1).
uses memory equal to the size of 
plus the size of 
but can tolerate a very small working set without a dramatic loss
of performance.
Shell builtin commands are commands that can be executed within the
running shell's process.
Note that, in the case of
builtin commands, the command is executed in a subshell if it occurs as
any component of a pipeline except the last.
If a command specified to the shell contains a slash
the shell will not execute a builtin command, even if the last component
of the specified command matches the name of a builtin command.
Thus, while specifying
causes a builtin command to be executed under shells that support the
builtin command,
specifying
or
does not.
While some builtin commands may exist in more than one shell, their
operation may be different under each shell which supports them.
Below is a table which lists shell builtin commands, the standard shells
that support them and whether they exist as standalone utilities.
Only builtin commands for the
and
shells are listed here.
Consult a shell's manual page for
details on the operation of its builtin commands.
Beware that the
manual page, at least, calls some of these commands
and some of them
Users of other shells may need to consult an
page or other sources of documentation.
Commands marked
under
do exist externally,
but are implemented as scripts using a builtin command of the same name.
The
manual page first appeared in
This manual page was written by

[
]
[ 
]
[ 
]

compresses files using the Burrows-Wheeler block sorting
text compression algorithm, and Huffman coding.  Compression is
generally considerably better than that achieved by more conventional
family of statistical compressors.

The command-line options are deliberately very similar to 
those of 
but they are not identical.

expects a list of file names to accompany the
command-line flags.  Each file is replaced by a compressed version of
itself, with the name "original_name.bz2".  
Each compressed file
has the same modification date, permissions, and, when possible,
ownership as the corresponding original, so that these properties can
be correctly restored at decompression time.  File name handling is
naive in the sense that there is no mechanism for preserving original
file names, permissions, ownerships or dates in filesystems which lack
these concepts, or have serious file name length restrictions, such as
MS-DOS.

and
will by default not overwrite existing

If no file names are specified,
compresses from standard
input to standard output.  In this case,
will decline to
write compressed output to a terminal, as this would be entirely
incomprehensible and therefore pointless.

(or
decompresses all
specified files.  Files which were not created by 
will be detected and ignored, and a warning issued.  
attempts to guess the filename for the decompressed file 
from that of the compressed file as follows:

       filename.bz2    becomes   filename
       filename.bz     becomes   filename
       filename.tbz2   becomes   filename.tar
       filename.tbz    becomes   filename.tar
       anyothername    becomes   anyothername.out

If the file does not end in one of the recognised endings, 
or
complains that it cannot
guess the name of the original file, and uses the original name
with
appended.

As with compression, supplying no
filenames causes decompression from 
standard input to standard output.

will correctly decompress a file which is the
concatenation of two or more compressed files.  The result is the
concatenation of the corresponding uncompressed files.  Integrity
of concatenated 
compressed files is also supported.

You can also compress or decompress files to the standard output by
decompressed like this.  The resulting outputs are fed sequentially to
stdout.  Compression of multiple files 
in this manner generates a stream
containing multiple compressed file representations.  Such a stream
can be decompressed correctly only by
version 0.9.0 or
later.  Earlier versions of
will stop after decompressing
the first file in the stream.

(or
decompresses all specified files to
the standard output.

will read arguments from the environment variables
and
in that order, and will process them
before any arguments read from the command line.  This gives a 
convenient way to supply default arguments.

Compression is always performed, even if the compressed 
file is slightly
larger than the original.  Files of less than about one hundred bytes
tend to get larger, since the compression mechanism has a constant
overhead in the region of 50 bytes.  Random data (including the output
of most file compressors) is coded at about 8.05 bits per byte, giving
an expansion of around 0.5%.

As a self-check for your protection, 
bzip2
uses 32-bit CRCs to
make sure that the decompressed version of a file is identical to the
original.  This guards against corruption of the compressed data, and
against undetected bugs in
(hopefully very unlikely).  The
chances of data corruption going undetected is microscopic, about one
chance in four billion for each file processed.  Be aware, though, that
the check occurs upon decompression, so it can only tell you that
something is wrong.  It can't help you 
recover the original uncompressed
data.  You can use 
to try to recover data from
damaged files.

Return values: 0 for a normal exit, 1 for environmental problems (file
compressed file, 3 for an internal consistency error (eg, bug) which
caused
to panic.

Compress or decompress to standard output.
Force decompression.  
and
are
really the same program, and the decision about what actions to take is
done on the basis of which name is used.  This flag overrides that
mechanism, and forces 
to decompress.
invocation name.
Check integrity of the specified file(s), but don't decompress them.
This really performs a trial decompression and throws away the result.
Force overwrite of output files.  Normally,
will not overwrite
existing output files.  Also forces 
to break hard links
to files, which it otherwise wouldn't do.

bzip2 normally declines to decompress files which don't have the
correct magic header bytes.  If forced (-f), however, it will pass
such files through unmodified.  This is how GNU gzip behaves.
Keep (don't delete) input files during compression
or decompression.
Reduce memory usage, for compression, decompression and testing.  Files
are decompressed and tested using a modified algorithm which only
requires 2.5 bytes per block byte.  This means any file can be
decompressed in 2300k of memory, albeit at about half the normal speed.

memory use to around the same figure, at the expense of your compression
ratio.  In short, if your machine is low on memory (8 megabytes or
Suppress non-essential warning messages.  Messages pertaining to
Verbose mode -- show the compression ratio for each file processed.
information which is primarily of interest for diagnostic purposes.
Display the software version, license terms and conditions.
Set the block size to 100 k, 200 k ..  900 k when compressing.  Has no
effect when decompressing.  See MEMORY MANAGEMENT below.
significantly faster.  
Treats all subsequent arguments as file names, even if they start
with a dash.  This is so you can handle files with names beginning
These flags are redundant in versions 0.9.5 and above.  They provided
some coarse control over the behaviour of the sorting algorithm in
earlier versions, which was sometimes useful.  0.9.5 and above have an
improved algorithm which renders these flags irrelevant.

compresses large files in blocks.  The block size affects
both the compression ratio achieved, and the amount of memory needed for
specify the block size to be 100,000 bytes through 900,000 bytes (the
default) respectively.  At decompression time, the block size used for
compression is read from the header of the compressed file, and
then allocates itself just enough memory to decompress
the file.  Since block sizes are stored in compressed files, it follows
during decompression.

Compression and decompression requirements, 
in bytes, can be estimated as:

       Compression:   400k + ( 8 x block size )

       Decompression: 100k + ( 4 x block size ), or
                      100k + ( 2.5 x block size )

Larger block sizes give rapidly diminishing marginal returns.  Most of
the compression comes from the first two or three hundred k of block
size, a fact worth bearing in mind when using
on small machines.
It is also important to appreciate that the decompression memory
requirement is set at compression time by the choice of block size.

For files compressed with the default 900k block size,
will require about 3700 kbytes to decompress.  To support decompression
of any file on a 4 megabyte machine, 
has an option to
decompress using approximately half this amount of memory, about 2300
kbytes.  Decompression speed is also halved, so you should use this
option only where necessary.  The relevant flag is -s.

In general, try and use the largest block size memory constraints allow,
since that maximises the compression achieved.  Compression and
decompression speed are virtually unaffected by block size.

Another significant point applies to files which fit in a single block
-- that means most files you'd encounter using a large block size.  The
amount of real memory touched is proportional to the size of the file,
since the file is smaller than a block.  For example, compressing a file
20,000 bytes long with the flag -9 will cause the compressor to
allocate around 7600k of memory, but only touch 400k + 20000 * 8 = 560
kbytes of it.  Similarly, the decompressor will allocate 3700k but only
touch 100k + 20000 * 4 = 180 kbytes.

Here is a table which summarises the maximum memory usage for different
block sizes.  Also recorded is the total compressed size for 14 files of
the Calgary Text Compression Corpus totalling 3,141,622 bytes.  This
column gives some feel for how compression varies with block size.
These figures tend to understate the advantage of larger block sizes for
larger files, since the Corpus is dominated by smaller files.

           Compress   Decompress   Decompress   Corpus
    Flag     usage      usage       -s usage     Size

     -1      1200k       500k         350k      914704
     -2      2000k       900k         600k      877703
     -3      2800k      1300k         850k      860338
     -4      3600k      1700k        1100k      846899
     -5      4400k      2100k        1350k      845160
     -6      5200k      2500k        1600k      838626
     -7      6100k      2900k        1850k      834096
     -8      6800k      3300k        2100k      828642
     -9      7600k      3700k        2350k      828642

compresses files in blocks, usually 900kbytes long.  Each
block is handled independently.  If a media or transmission error causes
a multi-block .bz2
file to become damaged, it may be possible to
recover data from the undamaged blocks in the file.

The compressed representation of each block is delimited by a 48-bit
pattern, which makes it possible to find the block boundaries with
reasonable certainty.  Each block also carries its own 32-bit CRC, so
damaged blocks can be distinguished from undamaged ones.

is a simple program whose purpose is to search for
blocks in .bz2 files, and write each block out into its own .bz2 
file.  You can then use
to test the
integrity of the resulting files, and decompress those which are
undamaged.

takes a single argument, the name of the damaged file, 
and writes a number of files "rec00001file.bz2",
"rec00002file.bz2", etc, containing the  extracted  blocks.
The  output  filenames  are  designed  so  that the use of
wildcards in subsequent processing -- for example,  
"bzip2 -dc  rec*file.bz2 > recovered_data" -- processes the files in
the correct order.

should be of most use dealing with large .bz2
files,  as  these will contain many blocks.  It is clearly
futile to use it on damaged single-block  files,  since  a
damaged  block  cannot  be recovered.  If you wish to minimise 
any potential data loss through media  or  transmission errors, 
you might consider compressing with a smaller
block size.

The sorting phase of compression gathers together similar strings in the
file.  Because of this, files containing very long runs of repeated
symbols, like "aabaabaabaab ..."  (repeated several hundred times) may
compress more slowly than normal.  Versions 0.9.5 and above fare much
better than previous versions in this respect.  The ratio between
worst-case and average-case compression time is in the region of 10:1.
For previous versions, this figure was more like 100:1.  You can use the

Decompression speed is unaffected by these phenomena.

usually allocates several megabytes of memory to operate
in, and then charges all over it in a fairly random fashion.  This means
that performance, both for compressing and decompressing, is largely
determined by the speed at which your machine can service cache misses.
Because of this, small changes to the code to reduce the miss rate have
been observed to give disproportionately large performance improvements.
I imagine 
will perform best on machines with very large caches.

what the problem is sometimes seem rather misleading.

This manual page pertains to version 1.0.6 of
Compressed data created by this version is entirely forwards and
backwards compatible with the previous public releases, versions
0.1pl2, 0.9.0, 0.9.5, 1.0.0, 1.0.1, 1.0.2 and above, but with the following
exception: 0.9.0 and above can correctly decompress multiple
concatenated compressed files.  0.1pl2 cannot do this; it will stop
after decompressing just the first file in the stream.

versions prior to 1.0.2 used 32-bit integers to represent
bit positions in compressed files, so they could not handle compressed
files more than 512 megabytes long.  Versions 1.0.2 and above use
64-bit ints on some platforms which support them (GNU supported
targets, and Windows).  To establish whether or not bzip2recover was
built with such a limitation, run it without arguments.  In any event
you can build yourself an unlimited version if you can recompile it
with MaybeUInt64 set to be an unsigned 64-bit integer.



Julian Seward, jsewardbzip.org.


The ideas embodied in
are due to (at least) the following
people: Michael Burrows and David Wheeler (for the block sorting
transformation), David Wheeler (again, for the Huffman coder), Peter
Fenwick (for the structured coding model in the original
and many refinements), and Alistair Moffat, Radford Neal and Ian Witten
(for the arithmetic coder in the original
I am much
indebted for their help, support and advice.  See the manual in the
source distribution for pointers to sources of documentation.  Christian
von Roques encouraged me to look for faster sorting algorithms, so as to
speed up compression.  Bela Lubkin encouraged me to improve the
worst-case compression performance.  
Donna Robinson XMLised the documentation.
The bz* scripts are derived from those of GNU gzip.
Many people sent patches, helped
with portability problems, lent machines, gave advice and were generally
helpful.

[
]
[ 
]
[ 
]

compresses files using the Burrows-Wheeler block sorting
text compression algorithm, and Huffman coding.  Compression is
generally considerably better than that achieved by more conventional
family of statistical compressors.

The command-line options are deliberately very similar to 
those of 
but they are not identical.

expects a list of file names to accompany the
command-line flags.  Each file is replaced by a compressed version of
itself, with the name "original_name.bz2".  
Each compressed file
has the same modification date, permissions, and, when possible,
ownership as the corresponding original, so that these properties can
be correctly restored at decompression time.  File name handling is
naive in the sense that there is no mechanism for preserving original
file names, permissions, ownerships or dates in filesystems which lack
these concepts, or have serious file name length restrictions, such as
MS-DOS.

and
will by default not overwrite existing

If no file names are specified,
compresses from standard
input to standard output.  In this case,
will decline to
write compressed output to a terminal, as this would be entirely
incomprehensible and therefore pointless.

(or
decompresses all
specified files.  Files which were not created by 
will be detected and ignored, and a warning issued.  
attempts to guess the filename for the decompressed file 
from that of the compressed file as follows:

       filename.bz2    becomes   filename
       filename.bz     becomes   filename
       filename.tbz2   becomes   filename.tar
       filename.tbz    becomes   filename.tar
       anyothername    becomes   anyothername.out

If the file does not end in one of the recognised endings, 
or
complains that it cannot
guess the name of the original file, and uses the original name
with
appended.

As with compression, supplying no
filenames causes decompression from 
standard input to standard output.

will correctly decompress a file which is the
concatenation of two or more compressed files.  The result is the
concatenation of the corresponding uncompressed files.  Integrity
of concatenated 
compressed files is also supported.

You can also compress or decompress files to the standard output by
decompressed like this.  The resulting outputs are fed sequentially to
stdout.  Compression of multiple files 
in this manner generates a stream
containing multiple compressed file representations.  Such a stream
can be decompressed correctly only by
version 0.9.0 or
later.  Earlier versions of
will stop after decompressing
the first file in the stream.

(or
decompresses all specified files to
the standard output.

will read arguments from the environment variables
and
in that order, and will process them
before any arguments read from the command line.  This gives a 
convenient way to supply default arguments.

Compression is always performed, even if the compressed 
file is slightly
larger than the original.  Files of less than about one hundred bytes
tend to get larger, since the compression mechanism has a constant
overhead in the region of 50 bytes.  Random data (including the output
of most file compressors) is coded at about 8.05 bits per byte, giving
an expansion of around 0.5%.

As a self-check for your protection, 
bzip2
uses 32-bit CRCs to
make sure that the decompressed version of a file is identical to the
original.  This guards against corruption of the compressed data, and
against undetected bugs in
(hopefully very unlikely).  The
chances of data corruption going undetected is microscopic, about one
chance in four billion for each file processed.  Be aware, though, that
the check occurs upon decompression, so it can only tell you that
something is wrong.  It can't help you 
recover the original uncompressed
data.  You can use 
to try to recover data from
damaged files.

Return values: 0 for a normal exit, 1 for environmental problems (file
compressed file, 3 for an internal consistency error (eg, bug) which
caused
to panic.

Compress or decompress to standard output.
Force decompression.  
and
are
really the same program, and the decision about what actions to take is
done on the basis of which name is used.  This flag overrides that
mechanism, and forces 
to decompress.
invocation name.
Check integrity of the specified file(s), but don't decompress them.
This really performs a trial decompression and throws away the result.
Force overwrite of output files.  Normally,
will not overwrite
existing output files.  Also forces 
to break hard links
to files, which it otherwise wouldn't do.

bzip2 normally declines to decompress files which don't have the
correct magic header bytes.  If forced (-f), however, it will pass
such files through unmodified.  This is how GNU gzip behaves.
Keep (don't delete) input files during compression
or decompression.
Reduce memory usage, for compression, decompression and testing.  Files
are decompressed and tested using a modified algorithm which only
requires 2.5 bytes per block byte.  This means any file can be
decompressed in 2300k of memory, albeit at about half the normal speed.

memory use to around the same figure, at the expense of your compression
ratio.  In short, if your machine is low on memory (8 megabytes or
Suppress non-essential warning messages.  Messages pertaining to
Verbose mode -- show the compression ratio for each file processed.
information which is primarily of interest for diagnostic purposes.
Display the software version, license terms and conditions.
Set the block size to 100 k, 200 k ..  900 k when compressing.  Has no
effect when decompressing.  See MEMORY MANAGEMENT below.
significantly faster.  
Treats all subsequent arguments as file names, even if they start
with a dash.  This is so you can handle files with names beginning
These flags are redundant in versions 0.9.5 and above.  They provided
some coarse control over the behaviour of the sorting algorithm in
earlier versions, which was sometimes useful.  0.9.5 and above have an
improved algorithm which renders these flags irrelevant.

compresses large files in blocks.  The block size affects
both the compression ratio achieved, and the amount of memory needed for
specify the block size to be 100,000 bytes through 900,000 bytes (the
default) respectively.  At decompression time, the block size used for
compression is read from the header of the compressed file, and
then allocates itself just enough memory to decompress
the file.  Since block sizes are stored in compressed files, it follows
during decompression.

Compression and decompression requirements, 
in bytes, can be estimated as:

       Compression:   400k + ( 8 x block size )

       Decompression: 100k + ( 4 x block size ), or
                      100k + ( 2.5 x block size )

Larger block sizes give rapidly diminishing marginal returns.  Most of
the compression comes from the first two or three hundred k of block
size, a fact worth bearing in mind when using
on small machines.
It is also important to appreciate that the decompression memory
requirement is set at compression time by the choice of block size.

For files compressed with the default 900k block size,
will require about 3700 kbytes to decompress.  To support decompression
of any file on a 4 megabyte machine, 
has an option to
decompress using approximately half this amount of memory, about 2300
kbytes.  Decompression speed is also halved, so you should use this
option only where necessary.  The relevant flag is -s.

In general, try and use the largest block size memory constraints allow,
since that maximises the compression achieved.  Compression and
decompression speed are virtually unaffected by block size.

Another significant point applies to files which fit in a single block
-- that means most files you'd encounter using a large block size.  The
amount of real memory touched is proportional to the size of the file,
since the file is smaller than a block.  For example, compressing a file
20,000 bytes long with the flag -9 will cause the compressor to
allocate around 7600k of memory, but only touch 400k + 20000 * 8 = 560
kbytes of it.  Similarly, the decompressor will allocate 3700k but only
touch 100k + 20000 * 4 = 180 kbytes.

Here is a table which summarises the maximum memory usage for different
block sizes.  Also recorded is the total compressed size for 14 files of
the Calgary Text Compression Corpus totalling 3,141,622 bytes.  This
column gives some feel for how compression varies with block size.
These figures tend to understate the advantage of larger block sizes for
larger files, since the Corpus is dominated by smaller files.

           Compress   Decompress   Decompress   Corpus
    Flag     usage      usage       -s usage     Size

     -1      1200k       500k         350k      914704
     -2      2000k       900k         600k      877703
     -3      2800k      1300k         850k      860338
     -4      3600k      1700k        1100k      846899
     -5      4400k      2100k        1350k      845160
     -6      5200k      2500k        1600k      838626
     -7      6100k      2900k        1850k      834096
     -8      6800k      3300k        2100k      828642
     -9      7600k      3700k        2350k      828642

compresses files in blocks, usually 900kbytes long.  Each
block is handled independently.  If a media or transmission error causes
a multi-block .bz2
file to become damaged, it may be possible to
recover data from the undamaged blocks in the file.

The compressed representation of each block is delimited by a 48-bit
pattern, which makes it possible to find the block boundaries with
reasonable certainty.  Each block also carries its own 32-bit CRC, so
damaged blocks can be distinguished from undamaged ones.

is a simple program whose purpose is to search for
blocks in .bz2 files, and write each block out into its own .bz2 
file.  You can then use
to test the
integrity of the resulting files, and decompress those which are
undamaged.

takes a single argument, the name of the damaged file, 
and writes a number of files "rec00001file.bz2",
"rec00002file.bz2", etc, containing the  extracted  blocks.
The  output  filenames  are  designed  so  that the use of
wildcards in subsequent processing -- for example,  
"bzip2 -dc  rec*file.bz2 > recovered_data" -- processes the files in
the correct order.

should be of most use dealing with large .bz2
files,  as  these will contain many blocks.  It is clearly
futile to use it on damaged single-block  files,  since  a
damaged  block  cannot  be recovered.  If you wish to minimise 
any potential data loss through media  or  transmission errors, 
you might consider compressing with a smaller
block size.

The sorting phase of compression gathers together similar strings in the
file.  Because of this, files containing very long runs of repeated
symbols, like "aabaabaabaab ..."  (repeated several hundred times) may
compress more slowly than normal.  Versions 0.9.5 and above fare much
better than previous versions in this respect.  The ratio between
worst-case and average-case compression time is in the region of 10:1.
For previous versions, this figure was more like 100:1.  You can use the

Decompression speed is unaffected by these phenomena.

usually allocates several megabytes of memory to operate
in, and then charges all over it in a fairly random fashion.  This means
that performance, both for compressing and decompressing, is largely
determined by the speed at which your machine can service cache misses.
Because of this, small changes to the code to reduce the miss rate have
been observed to give disproportionately large performance improvements.
I imagine 
will perform best on machines with very large caches.

what the problem is sometimes seem rather misleading.

This manual page pertains to version 1.0.6 of
Compressed data created by this version is entirely forwards and
backwards compatible with the previous public releases, versions
0.1pl2, 0.9.0, 0.9.5, 1.0.0, 1.0.1, 1.0.2 and above, but with the following
exception: 0.9.0 and above can correctly decompress multiple
concatenated compressed files.  0.1pl2 cannot do this; it will stop
after decompressing just the first file in the stream.

versions prior to 1.0.2 used 32-bit integers to represent
bit positions in compressed files, so they could not handle compressed
files more than 512 megabytes long.  Versions 1.0.2 and above use
64-bit ints on some platforms which support them (GNU supported
targets, and Windows).  To establish whether or not bzip2recover was
built with such a limitation, run it without arguments.  In any event
you can build yourself an unlimited version if you can recompile it
with MaybeUInt64 set to be an unsigned 64-bit integer.



Julian Seward, jsewardbzip.org.


The ideas embodied in
are due to (at least) the following
people: Michael Burrows and David Wheeler (for the block sorting
transformation), David Wheeler (again, for the Huffman coder), Peter
Fenwick (for the structured coding model in the original
and many refinements), and Alistair Moffat, Radford Neal and Ian Witten
(for the arithmetic coder in the original
I am much
indebted for their help, support and advice.  See the manual in the
source distribution for pointers to sources of documentation.  Christian
von Roques encouraged me to look for faster sorting algorithms, so as to
speed up compression.  Bela Lubkin encouraged me to improve the
worst-case compression performance.  
Donna Robinson XMLised the documentation.
The bz* scripts are derived from those of GNU gzip.
Many people sent patches, helped
with portability problems, lent machines, gave advice and were generally
helpful.
[ cmp_options ] file1
[ file2 ]
[ diff_options ] file1
[ file2 ]
and 
are used to invoke the
or the
program on bzip2 compressed files.  All options specified are passed
directly to
or
If only 1 file is specified, then the files compared are
and an uncompressed
If two files are specified, then they are uncompressed if necessary and fed to
or
The exit status from 
or
is preserved.
cmp(1), diff(1), bzmore(1), bzless(1), bzgrep(1), bzip2(1)
Messages from the
or
programs refer to temporary filenames instead of those specified.
[ cmp_options ] file1
[ file2 ]
[ diff_options ] file1
[ file2 ]
and 
are used to invoke the
or the
program on bzip2 compressed files.  All options specified are passed
directly to
or
If only 1 file is specified, then the files compared are
and an uncompressed
If two files are specified, then they are uncompressed if necessary and fed to
or
The exit status from 
or
is preserved.
cmp(1), diff(1), bzmore(1), bzless(1), bzgrep(1), bzip2(1)
Messages from the
or
programs refer to temporary filenames instead of those specified.
The
utility searches any given input files,
selecting lines that match one or more patterns.
By default, a pattern matches an input line if the regular expression
(RE) in the pattern matches the input line
without its trailing newline.
An empty expression matches every line.
Each input line that matches at least one of the patterns is written
to the standard output.
is used for simple patterns and
basic regular expressions
can handle extended regular expressions
See
for more information on regular expressions.
is quicker than both
and
but can only handle fixed patterns
(i.e. it does not interpret regular expressions).
Patterns may consist of one or more lines,
allowing any of the pattern lines to match a portion of the input.
and
act like
and
respectively, but accept input files compressed with the
or
compression utilities.
The following options are available:
Print
lines of trailing context after each match.
See also the
and
options.
Treat all files as ASCII text.
Normally
will simply print
if files contain binary characters.
Use of this option forces
to output lines matching the specified pattern.
Print
lines of leading context before each match.
See also the
and
options.
The offset in bytes of a matched pattern is
displayed in front of the respective matched line.
Print
lines of leading and trailing context surrounding each match.
The default is 2 and is equivalent to
Note:
no whitespace may be given between the option and its argument.
Only a count of selected lines is written to standard output.
Mark up the matching text with the expression stored in
environment variable.
The possible values of when can be `never', `always' or `auto'.
Specify the demanded action for devices, FIFOs and sockets.
The default action is `read', which means, that they are read
as if they were normal files.
If the action is set to `skip', devices will be silently skipped.
Specify the demanded action for directories.
It is `read' by default, which means that the directories
are read in the same manner as normal files.
Other possible values are `skip' to silently ignore the
directories, and `recurse' to read them recursively, which
has the same effect as the
and
option.
Interpret
as an extended regular expression
(i.e. force
to behave as
Specify a pattern used during the search of the input:
an input line is selected if it matches any of the specified patterns.
This option is most useful when multiple
options are used to specify multiple patterns,
or when a pattern begins with a dash
If specified, it excludes files matching the given
filename pattern from the search.
Note that
patterns take priority over
patterns, and if no
pattern is specified, all files are searched that are
not excluded.
Patterns are matched to the full path specified,
not only to the filename component.
If
is specified, it excludes directories matching the
given filename pattern from the search.
Note that
patterns take priority over
patterns, and if no
pattern is specified, all directories are searched that are
not excluded.
Interpret
as a set of fixed strings
(i.e. force
to behave as
Read one or more newline separated patterns from
Empty pattern lines match every input line.
Newlines are not considered part of a pattern.
If
is empty, nothing is matched.
Interpret
as a basic regular expression
(i.e. force
to behave as traditional
Always print filename headers with output lines.
Never print filename headers
with output lines.
Print a brief help message.
Ignore binary files.
This option is equivalent to
option.
Perform case insensitive matching.
By default,
is case sensitive.
If specified, only files matching the
given filename pattern are searched.
Note that
patterns take priority over
patterns.
Patterns are matched to the full path specified,
not only to the filename component.
If
is specified, only directories matching the
given filename pattern are searched.
Note that
patterns take priority over
patterns.
Decompress the
compressed file before looking for the text.
Only the names of files not containing selected lines are written to
standard output.
Pathnames are listed once per file searched.
If the standard input is searched, the string
is written.
Only the names of files containing selected lines are written to
standard output.
will only search a file until a match has been found,
making searches potentially less expensive.
Pathnames are listed once per file searched.
If the standard input is searched, the string
is written.
Use
instead of
to read input, which can result in better performance under some
circumstances but can cause undefined behaviour.
Stop reading the file after
matches.
Each output line is preceded by its relative line number in the file,
starting at line 1.
The line number counter is reset for each file processed.
This option is ignored if
or
is
specified.
Prints a zero-byte after the file name.
If
is specified, follow symbolic links only if they were explicitly listed
on the command line.
The default is not to follow symbolic links.
Prints only the matching part of the lines.
If
is specified, no symbolic links are followed.
This is the default.
Quiet mode:
suppress normal output.
will only search a file until a match has been found,
making searches potentially less expensive.
Recursively search subdirectories listed.
If
is specified, all symbolic links are followed.
The default is not to follow symbolic links.
Silent mode.
Nonexistent and unreadable files are ignored
(i.e. their error messages are suppressed).
Search binary files, but do not attempt to print them.
Display version information and exit.
Selected lines are those
matching any of the specified patterns.
The expression is searched for as a word (as if surrounded by
and
see
Only input lines selected against an entire fixed string or regular
expression are considered to be matching lines.
Equivalent to
Obsoleted.
Force
to behave as
Controls searching and printing of binary files.
Options are
the default: search binary files but do not print them;
do not search binary files;
and
treat all files as text.
Print
lines of leading and trailing context.
The default is 2.
Force output to be line buffered.
By default, output is line buffered when standard output is a terminal
and block buffered otherwise.
If no file arguments are specified, the standard input is used.
May be used to specify default options that will be placed at the beginning
of the argument list.
Backslash-escaping is not supported, unlike the behavior in GNU grep.
The
utility exits with one of the following values:
One or more lines were selected.
No lines were selected.
An error occurred.
To find all occurrences of the word
in a file:
To find all occurrences of the pattern
at the beginning of a line:
The apostrophes ensure the entire expression is evaluated by
instead of by the user's shell.
The caret
matches the null string at the beginning of a line,
and the
escapes the
which would otherwise match any character.
To find all lines in a file which do not contain the words
or
A simple example of an extended regular expression:
Peruses the file
looking for either 19, 20, or 25.
The
utility is compliant with the
specification.
The flags
are extensions to that specification, and the behaviour of the
flag when used with an empty pattern file is left undefined.
All long options are provided for compatibility with
GNU versions of this utility.
Historic versions of the
utility also supported the flags
This implementation supports those options;
however, their use is strongly discouraged.
The
command first appeared in
The
utility does not normalize Unicode input, so a pattern containing composed
characters will not match decomposed input, and vice versa.
The
utility searches any given input files,
selecting lines that match one or more patterns.
By default, a pattern matches an input line if the regular expression
(RE) in the pattern matches the input line
without its trailing newline.
An empty expression matches every line.
Each input line that matches at least one of the patterns is written
to the standard output.
is used for simple patterns and
basic regular expressions
can handle extended regular expressions
See
for more information on regular expressions.
is quicker than both
and
but can only handle fixed patterns
(i.e. it does not interpret regular expressions).
Patterns may consist of one or more lines,
allowing any of the pattern lines to match a portion of the input.
and
act like
and
respectively, but accept input files compressed with the
or
compression utilities.
The following options are available:
Print
lines of trailing context after each match.
See also the
and
options.
Treat all files as ASCII text.
Normally
will simply print
if files contain binary characters.
Use of this option forces
to output lines matching the specified pattern.
Print
lines of leading context before each match.
See also the
and
options.
The offset in bytes of a matched pattern is
displayed in front of the respective matched line.
Print
lines of leading and trailing context surrounding each match.
The default is 2 and is equivalent to
Note:
no whitespace may be given between the option and its argument.
Only a count of selected lines is written to standard output.
Mark up the matching text with the expression stored in
environment variable.
The possible values of when can be `never', `always' or `auto'.
Specify the demanded action for devices, FIFOs and sockets.
The default action is `read', which means, that they are read
as if they were normal files.
If the action is set to `skip', devices will be silently skipped.
Specify the demanded action for directories.
It is `read' by default, which means that the directories
are read in the same manner as normal files.
Other possible values are `skip' to silently ignore the
directories, and `recurse' to read them recursively, which
has the same effect as the
and
option.
Interpret
as an extended regular expression
(i.e. force
to behave as
Specify a pattern used during the search of the input:
an input line is selected if it matches any of the specified patterns.
This option is most useful when multiple
options are used to specify multiple patterns,
or when a pattern begins with a dash
If specified, it excludes files matching the given
filename pattern from the search.
Note that
patterns take priority over
patterns, and if no
pattern is specified, all files are searched that are
not excluded.
Patterns are matched to the full path specified,
not only to the filename component.
If
is specified, it excludes directories matching the
given filename pattern from the search.
Note that
patterns take priority over
patterns, and if no
pattern is specified, all directories are searched that are
not excluded.
Interpret
as a set of fixed strings
(i.e. force
to behave as
Read one or more newline separated patterns from
Empty pattern lines match every input line.
Newlines are not considered part of a pattern.
If
is empty, nothing is matched.
Interpret
as a basic regular expression
(i.e. force
to behave as traditional
Always print filename headers with output lines.
Never print filename headers
with output lines.
Print a brief help message.
Ignore binary files.
This option is equivalent to
option.
Perform case insensitive matching.
By default,
is case sensitive.
If specified, only files matching the
given filename pattern are searched.
Note that
patterns take priority over
patterns.
Patterns are matched to the full path specified,
not only to the filename component.
If
is specified, only directories matching the
given filename pattern are searched.
Note that
patterns take priority over
patterns.
Decompress the
compressed file before looking for the text.
Only the names of files not containing selected lines are written to
standard output.
Pathnames are listed once per file searched.
If the standard input is searched, the string
is written.
Only the names of files containing selected lines are written to
standard output.
will only search a file until a match has been found,
making searches potentially less expensive.
Pathnames are listed once per file searched.
If the standard input is searched, the string
is written.
Use
instead of
to read input, which can result in better performance under some
circumstances but can cause undefined behaviour.
Stop reading the file after
matches.
Each output line is preceded by its relative line number in the file,
starting at line 1.
The line number counter is reset for each file processed.
This option is ignored if
or
is
specified.
Prints a zero-byte after the file name.
If
is specified, follow symbolic links only if they were explicitly listed
on the command line.
The default is not to follow symbolic links.
Prints only the matching part of the lines.
If
is specified, no symbolic links are followed.
This is the default.
Quiet mode:
suppress normal output.
will only search a file until a match has been found,
making searches potentially less expensive.
Recursively search subdirectories listed.
If
is specified, all symbolic links are followed.
The default is not to follow symbolic links.
Silent mode.
Nonexistent and unreadable files are ignored
(i.e. their error messages are suppressed).
Search binary files, but do not attempt to print them.
Display version information and exit.
Selected lines are those
matching any of the specified patterns.
The expression is searched for as a word (as if surrounded by
and
see
Only input lines selected against an entire fixed string or regular
expression are considered to be matching lines.
Equivalent to
Obsoleted.
Force
to behave as
Controls searching and printing of binary files.
Options are
the default: search binary files but do not print them;
do not search binary files;
and
treat all files as text.
Print
lines of leading and trailing context.
The default is 2.
Force output to be line buffered.
By default, output is line buffered when standard output is a terminal
and block buffered otherwise.
If no file arguments are specified, the standard input is used.
May be used to specify default options that will be placed at the beginning
of the argument list.
Backslash-escaping is not supported, unlike the behavior in GNU grep.
The
utility exits with one of the following values:
One or more lines were selected.
No lines were selected.
An error occurred.
To find all occurrences of the word
in a file:
To find all occurrences of the pattern
at the beginning of a line:
The apostrophes ensure the entire expression is evaluated by
instead of by the user's shell.
The caret
matches the null string at the beginning of a line,
and the
escapes the
which would otherwise match any character.
To find all lines in a file which do not contain the words
or
A simple example of an extended regular expression:
Peruses the file
looking for either 19, 20, or 25.
The
utility is compliant with the
specification.
The flags
are extensions to that specification, and the behaviour of the
flag when used with an empty pattern file is left undefined.
All long options are provided for compatibility with
GNU versions of this utility.
Historic versions of the
utility also supported the flags
This implementation supports those options;
however, their use is strongly discouraged.
The
command first appeared in
The
utility does not normalize Unicode input, so a pattern containing composed
characters will not match decomposed input, and vice versa.
The
utility searches any given input files,
selecting lines that match one or more patterns.
By default, a pattern matches an input line if the regular expression
(RE) in the pattern matches the input line
without its trailing newline.
An empty expression matches every line.
Each input line that matches at least one of the patterns is written
to the standard output.
is used for simple patterns and
basic regular expressions
can handle extended regular expressions
See
for more information on regular expressions.
is quicker than both
and
but can only handle fixed patterns
(i.e. it does not interpret regular expressions).
Patterns may consist of one or more lines,
allowing any of the pattern lines to match a portion of the input.
and
act like
and
respectively, but accept input files compressed with the
or
compression utilities.
The following options are available:
Print
lines of trailing context after each match.
See also the
and
options.
Treat all files as ASCII text.
Normally
will simply print
if files contain binary characters.
Use of this option forces
to output lines matching the specified pattern.
Print
lines of leading context before each match.
See also the
and
options.
The offset in bytes of a matched pattern is
displayed in front of the respective matched line.
Print
lines of leading and trailing context surrounding each match.
The default is 2 and is equivalent to
Note:
no whitespace may be given between the option and its argument.
Only a count of selected lines is written to standard output.
Mark up the matching text with the expression stored in
environment variable.
The possible values of when can be `never', `always' or `auto'.
Specify the demanded action for devices, FIFOs and sockets.
The default action is `read', which means, that they are read
as if they were normal files.
If the action is set to `skip', devices will be silently skipped.
Specify the demanded action for directories.
It is `read' by default, which means that the directories
are read in the same manner as normal files.
Other possible values are `skip' to silently ignore the
directories, and `recurse' to read them recursively, which
has the same effect as the
and
option.
Interpret
as an extended regular expression
(i.e. force
to behave as
Specify a pattern used during the search of the input:
an input line is selected if it matches any of the specified patterns.
This option is most useful when multiple
options are used to specify multiple patterns,
or when a pattern begins with a dash
If specified, it excludes files matching the given
filename pattern from the search.
Note that
patterns take priority over
patterns, and if no
pattern is specified, all files are searched that are
not excluded.
Patterns are matched to the full path specified,
not only to the filename component.
If
is specified, it excludes directories matching the
given filename pattern from the search.
Note that
patterns take priority over
patterns, and if no
pattern is specified, all directories are searched that are
not excluded.
Interpret
as a set of fixed strings
(i.e. force
to behave as
Read one or more newline separated patterns from
Empty pattern lines match every input line.
Newlines are not considered part of a pattern.
If
is empty, nothing is matched.
Interpret
as a basic regular expression
(i.e. force
to behave as traditional
Always print filename headers with output lines.
Never print filename headers
with output lines.
Print a brief help message.
Ignore binary files.
This option is equivalent to
option.
Perform case insensitive matching.
By default,
is case sensitive.
If specified, only files matching the
given filename pattern are searched.
Note that
patterns take priority over
patterns.
Patterns are matched to the full path specified,
not only to the filename component.
If
is specified, only directories matching the
given filename pattern are searched.
Note that
patterns take priority over
patterns.
Decompress the
compressed file before looking for the text.
Only the names of files not containing selected lines are written to
standard output.
Pathnames are listed once per file searched.
If the standard input is searched, the string
is written.
Only the names of files containing selected lines are written to
standard output.
will only search a file until a match has been found,
making searches potentially less expensive.
Pathnames are listed once per file searched.
If the standard input is searched, the string
is written.
Use
instead of
to read input, which can result in better performance under some
circumstances but can cause undefined behaviour.
Stop reading the file after
matches.
Each output line is preceded by its relative line number in the file,
starting at line 1.
The line number counter is reset for each file processed.
This option is ignored if
or
is
specified.
Prints a zero-byte after the file name.
If
is specified, follow symbolic links only if they were explicitly listed
on the command line.
The default is not to follow symbolic links.
Prints only the matching part of the lines.
If
is specified, no symbolic links are followed.
This is the default.
Quiet mode:
suppress normal output.
will only search a file until a match has been found,
making searches potentially less expensive.
Recursively search subdirectories listed.
If
is specified, all symbolic links are followed.
The default is not to follow symbolic links.
Silent mode.
Nonexistent and unreadable files are ignored
(i.e. their error messages are suppressed).
Search binary files, but do not attempt to print them.
Display version information and exit.
Selected lines are those
matching any of the specified patterns.
The expression is searched for as a word (as if surrounded by
and
see
Only input lines selected against an entire fixed string or regular
expression are considered to be matching lines.
Equivalent to
Obsoleted.
Force
to behave as
Controls searching and printing of binary files.
Options are
the default: search binary files but do not print them;
do not search binary files;
and
treat all files as text.
Print
lines of leading and trailing context.
The default is 2.
Force output to be line buffered.
By default, output is line buffered when standard output is a terminal
and block buffered otherwise.
If no file arguments are specified, the standard input is used.
May be used to specify default options that will be placed at the beginning
of the argument list.
Backslash-escaping is not supported, unlike the behavior in GNU grep.
The
utility exits with one of the following values:
One or more lines were selected.
No lines were selected.
An error occurred.
To find all occurrences of the word
in a file:
To find all occurrences of the pattern
at the beginning of a line:
The apostrophes ensure the entire expression is evaluated by
instead of by the user's shell.
The caret
matches the null string at the beginning of a line,
and the
escapes the
which would otherwise match any character.
To find all lines in a file which do not contain the words
or
A simple example of an extended regular expression:
Peruses the file
looking for either 19, 20, or 25.
The
utility is compliant with the
specification.
The flags
are extensions to that specification, and the behaviour of the
flag when used with an empty pattern file is left undefined.
All long options are provided for compatibility with
GNU versions of this utility.
Historic versions of the
utility also supported the flags
This implementation supports those options;
however, their use is strongly discouraged.
The
command first appeared in
The
utility does not normalize Unicode input, so a pattern containing composed
characters will not match decomposed input, and vice versa.

[
]
[ 
]
[ 
]

compresses files using the Burrows-Wheeler block sorting
text compression algorithm, and Huffman coding.  Compression is
generally considerably better than that achieved by more conventional
family of statistical compressors.

The command-line options are deliberately very similar to 
those of 
but they are not identical.

expects a list of file names to accompany the
command-line flags.  Each file is replaced by a compressed version of
itself, with the name "original_name.bz2".  
Each compressed file
has the same modification date, permissions, and, when possible,
ownership as the corresponding original, so that these properties can
be correctly restored at decompression time.  File name handling is
naive in the sense that there is no mechanism for preserving original
file names, permissions, ownerships or dates in filesystems which lack
these concepts, or have serious file name length restrictions, such as
MS-DOS.

and
will by default not overwrite existing

If no file names are specified,
compresses from standard
input to standard output.  In this case,
will decline to
write compressed output to a terminal, as this would be entirely
incomprehensible and therefore pointless.

(or
decompresses all
specified files.  Files which were not created by 
will be detected and ignored, and a warning issued.  
attempts to guess the filename for the decompressed file 
from that of the compressed file as follows:

       filename.bz2    becomes   filename
       filename.bz     becomes   filename
       filename.tbz2   becomes   filename.tar
       filename.tbz    becomes   filename.tar
       anyothername    becomes   anyothername.out

If the file does not end in one of the recognised endings, 
or
complains that it cannot
guess the name of the original file, and uses the original name
with
appended.

As with compression, supplying no
filenames causes decompression from 
standard input to standard output.

will correctly decompress a file which is the
concatenation of two or more compressed files.  The result is the
concatenation of the corresponding uncompressed files.  Integrity
of concatenated 
compressed files is also supported.

You can also compress or decompress files to the standard output by
decompressed like this.  The resulting outputs are fed sequentially to
stdout.  Compression of multiple files 
in this manner generates a stream
containing multiple compressed file representations.  Such a stream
can be decompressed correctly only by
version 0.9.0 or
later.  Earlier versions of
will stop after decompressing
the first file in the stream.

(or
decompresses all specified files to
the standard output.

will read arguments from the environment variables
and
in that order, and will process them
before any arguments read from the command line.  This gives a 
convenient way to supply default arguments.

Compression is always performed, even if the compressed 
file is slightly
larger than the original.  Files of less than about one hundred bytes
tend to get larger, since the compression mechanism has a constant
overhead in the region of 50 bytes.  Random data (including the output
of most file compressors) is coded at about 8.05 bits per byte, giving
an expansion of around 0.5%.

As a self-check for your protection, 
bzip2
uses 32-bit CRCs to
make sure that the decompressed version of a file is identical to the
original.  This guards against corruption of the compressed data, and
against undetected bugs in
(hopefully very unlikely).  The
chances of data corruption going undetected is microscopic, about one
chance in four billion for each file processed.  Be aware, though, that
the check occurs upon decompression, so it can only tell you that
something is wrong.  It can't help you 
recover the original uncompressed
data.  You can use 
to try to recover data from
damaged files.

Return values: 0 for a normal exit, 1 for environmental problems (file
compressed file, 3 for an internal consistency error (eg, bug) which
caused
to panic.

Compress or decompress to standard output.
Force decompression.  
and
are
really the same program, and the decision about what actions to take is
done on the basis of which name is used.  This flag overrides that
mechanism, and forces 
to decompress.
invocation name.
Check integrity of the specified file(s), but don't decompress them.
This really performs a trial decompression and throws away the result.
Force overwrite of output files.  Normally,
will not overwrite
existing output files.  Also forces 
to break hard links
to files, which it otherwise wouldn't do.

bzip2 normally declines to decompress files which don't have the
correct magic header bytes.  If forced (-f), however, it will pass
such files through unmodified.  This is how GNU gzip behaves.
Keep (don't delete) input files during compression
or decompression.
Reduce memory usage, for compression, decompression and testing.  Files
are decompressed and tested using a modified algorithm which only
requires 2.5 bytes per block byte.  This means any file can be
decompressed in 2300k of memory, albeit at about half the normal speed.

memory use to around the same figure, at the expense of your compression
ratio.  In short, if your machine is low on memory (8 megabytes or
Suppress non-essential warning messages.  Messages pertaining to
Verbose mode -- show the compression ratio for each file processed.
information which is primarily of interest for diagnostic purposes.
Display the software version, license terms and conditions.
Set the block size to 100 k, 200 k ..  900 k when compressing.  Has no
effect when decompressing.  See MEMORY MANAGEMENT below.
significantly faster.  
Treats all subsequent arguments as file names, even if they start
with a dash.  This is so you can handle files with names beginning
These flags are redundant in versions 0.9.5 and above.  They provided
some coarse control over the behaviour of the sorting algorithm in
earlier versions, which was sometimes useful.  0.9.5 and above have an
improved algorithm which renders these flags irrelevant.

compresses large files in blocks.  The block size affects
both the compression ratio achieved, and the amount of memory needed for
specify the block size to be 100,000 bytes through 900,000 bytes (the
default) respectively.  At decompression time, the block size used for
compression is read from the header of the compressed file, and
then allocates itself just enough memory to decompress
the file.  Since block sizes are stored in compressed files, it follows
during decompression.

Compression and decompression requirements, 
in bytes, can be estimated as:

       Compression:   400k + ( 8 x block size )

       Decompression: 100k + ( 4 x block size ), or
                      100k + ( 2.5 x block size )

Larger block sizes give rapidly diminishing marginal returns.  Most of
the compression comes from the first two or three hundred k of block
size, a fact worth bearing in mind when using
on small machines.
It is also important to appreciate that the decompression memory
requirement is set at compression time by the choice of block size.

For files compressed with the default 900k block size,
will require about 3700 kbytes to decompress.  To support decompression
of any file on a 4 megabyte machine, 
has an option to
decompress using approximately half this amount of memory, about 2300
kbytes.  Decompression speed is also halved, so you should use this
option only where necessary.  The relevant flag is -s.

In general, try and use the largest block size memory constraints allow,
since that maximises the compression achieved.  Compression and
decompression speed are virtually unaffected by block size.

Another significant point applies to files which fit in a single block
-- that means most files you'd encounter using a large block size.  The
amount of real memory touched is proportional to the size of the file,
since the file is smaller than a block.  For example, compressing a file
20,000 bytes long with the flag -9 will cause the compressor to
allocate around 7600k of memory, but only touch 400k + 20000 * 8 = 560
kbytes of it.  Similarly, the decompressor will allocate 3700k but only
touch 100k + 20000 * 4 = 180 kbytes.

Here is a table which summarises the maximum memory usage for different
block sizes.  Also recorded is the total compressed size for 14 files of
the Calgary Text Compression Corpus totalling 3,141,622 bytes.  This
column gives some feel for how compression varies with block size.
These figures tend to understate the advantage of larger block sizes for
larger files, since the Corpus is dominated by smaller files.

           Compress   Decompress   Decompress   Corpus
    Flag     usage      usage       -s usage     Size

     -1      1200k       500k         350k      914704
     -2      2000k       900k         600k      877703
     -3      2800k      1300k         850k      860338
     -4      3600k      1700k        1100k      846899
     -5      4400k      2100k        1350k      845160
     -6      5200k      2500k        1600k      838626
     -7      6100k      2900k        1850k      834096
     -8      6800k      3300k        2100k      828642
     -9      7600k      3700k        2350k      828642

compresses files in blocks, usually 900kbytes long.  Each
block is handled independently.  If a media or transmission error causes
a multi-block .bz2
file to become damaged, it may be possible to
recover data from the undamaged blocks in the file.

The compressed representation of each block is delimited by a 48-bit
pattern, which makes it possible to find the block boundaries with
reasonable certainty.  Each block also carries its own 32-bit CRC, so
damaged blocks can be distinguished from undamaged ones.

is a simple program whose purpose is to search for
blocks in .bz2 files, and write each block out into its own .bz2 
file.  You can then use
to test the
integrity of the resulting files, and decompress those which are
undamaged.

takes a single argument, the name of the damaged file, 
and writes a number of files "rec00001file.bz2",
"rec00002file.bz2", etc, containing the  extracted  blocks.
The  output  filenames  are  designed  so  that the use of
wildcards in subsequent processing -- for example,  
"bzip2 -dc  rec*file.bz2 > recovered_data" -- processes the files in
the correct order.

should be of most use dealing with large .bz2
files,  as  these will contain many blocks.  It is clearly
futile to use it on damaged single-block  files,  since  a
damaged  block  cannot  be recovered.  If you wish to minimise 
any potential data loss through media  or  transmission errors, 
you might consider compressing with a smaller
block size.

The sorting phase of compression gathers together similar strings in the
file.  Because of this, files containing very long runs of repeated
symbols, like "aabaabaabaab ..."  (repeated several hundred times) may
compress more slowly than normal.  Versions 0.9.5 and above fare much
better than previous versions in this respect.  The ratio between
worst-case and average-case compression time is in the region of 10:1.
For previous versions, this figure was more like 100:1.  You can use the

Decompression speed is unaffected by these phenomena.

usually allocates several megabytes of memory to operate
in, and then charges all over it in a fairly random fashion.  This means
that performance, both for compressing and decompressing, is largely
determined by the speed at which your machine can service cache misses.
Because of this, small changes to the code to reduce the miss rate have
been observed to give disproportionately large performance improvements.
I imagine 
will perform best on machines with very large caches.

what the problem is sometimes seem rather misleading.

This manual page pertains to version 1.0.6 of
Compressed data created by this version is entirely forwards and
backwards compatible with the previous public releases, versions
0.1pl2, 0.9.0, 0.9.5, 1.0.0, 1.0.1, 1.0.2 and above, but with the following
exception: 0.9.0 and above can correctly decompress multiple
concatenated compressed files.  0.1pl2 cannot do this; it will stop
after decompressing just the first file in the stream.

versions prior to 1.0.2 used 32-bit integers to represent
bit positions in compressed files, so they could not handle compressed
files more than 512 megabytes long.  Versions 1.0.2 and above use
64-bit ints on some platforms which support them (GNU supported
targets, and Windows).  To establish whether or not bzip2recover was
built with such a limitation, run it without arguments.  In any event
you can build yourself an unlimited version if you can recompile it
with MaybeUInt64 set to be an unsigned 64-bit integer.



Julian Seward, jsewardbzip.org.


The ideas embodied in
are due to (at least) the following
people: Michael Burrows and David Wheeler (for the block sorting
transformation), David Wheeler (again, for the Huffman coder), Peter
Fenwick (for the structured coding model in the original
and many refinements), and Alistair Moffat, Radford Neal and Ian Witten
(for the arithmetic coder in the original
I am much
indebted for their help, support and advice.  See the manual in the
source distribution for pointers to sources of documentation.  Christian
von Roques encouraged me to look for faster sorting algorithms, so as to
speed up compression.  Bela Lubkin encouraged me to improve the
worst-case compression performance.  
Donna Robinson XMLised the documentation.
The bz* scripts are derived from those of GNU gzip.
Many people sent patches, helped
with portability problems, lent machines, gave advice and were generally
helpful.

[
]
[ 
]
[ 
]

compresses files using the Burrows-Wheeler block sorting
text compression algorithm, and Huffman coding.  Compression is
generally considerably better than that achieved by more conventional
family of statistical compressors.

The command-line options are deliberately very similar to 
those of 
but they are not identical.

expects a list of file names to accompany the
command-line flags.  Each file is replaced by a compressed version of
itself, with the name "original_name.bz2".  
Each compressed file
has the same modification date, permissions, and, when possible,
ownership as the corresponding original, so that these properties can
be correctly restored at decompression time.  File name handling is
naive in the sense that there is no mechanism for preserving original
file names, permissions, ownerships or dates in filesystems which lack
these concepts, or have serious file name length restrictions, such as
MS-DOS.

and
will by default not overwrite existing

If no file names are specified,
compresses from standard
input to standard output.  In this case,
will decline to
write compressed output to a terminal, as this would be entirely
incomprehensible and therefore pointless.

(or
decompresses all
specified files.  Files which were not created by 
will be detected and ignored, and a warning issued.  
attempts to guess the filename for the decompressed file 
from that of the compressed file as follows:

       filename.bz2    becomes   filename
       filename.bz     becomes   filename
       filename.tbz2   becomes   filename.tar
       filename.tbz    becomes   filename.tar
       anyothername    becomes   anyothername.out

If the file does not end in one of the recognised endings, 
or
complains that it cannot
guess the name of the original file, and uses the original name
with
appended.

As with compression, supplying no
filenames causes decompression from 
standard input to standard output.

will correctly decompress a file which is the
concatenation of two or more compressed files.  The result is the
concatenation of the corresponding uncompressed files.  Integrity
of concatenated 
compressed files is also supported.

You can also compress or decompress files to the standard output by
decompressed like this.  The resulting outputs are fed sequentially to
stdout.  Compression of multiple files 
in this manner generates a stream
containing multiple compressed file representations.  Such a stream
can be decompressed correctly only by
version 0.9.0 or
later.  Earlier versions of
will stop after decompressing
the first file in the stream.

(or
decompresses all specified files to
the standard output.

will read arguments from the environment variables
and
in that order, and will process them
before any arguments read from the command line.  This gives a 
convenient way to supply default arguments.

Compression is always performed, even if the compressed 
file is slightly
larger than the original.  Files of less than about one hundred bytes
tend to get larger, since the compression mechanism has a constant
overhead in the region of 50 bytes.  Random data (including the output
of most file compressors) is coded at about 8.05 bits per byte, giving
an expansion of around 0.5%.

As a self-check for your protection, 
bzip2
uses 32-bit CRCs to
make sure that the decompressed version of a file is identical to the
original.  This guards against corruption of the compressed data, and
against undetected bugs in
(hopefully very unlikely).  The
chances of data corruption going undetected is microscopic, about one
chance in four billion for each file processed.  Be aware, though, that
the check occurs upon decompression, so it can only tell you that
something is wrong.  It can't help you 
recover the original uncompressed
data.  You can use 
to try to recover data from
damaged files.

Return values: 0 for a normal exit, 1 for environmental problems (file
compressed file, 3 for an internal consistency error (eg, bug) which
caused
to panic.

Compress or decompress to standard output.
Force decompression.  
and
are
really the same program, and the decision about what actions to take is
done on the basis of which name is used.  This flag overrides that
mechanism, and forces 
to decompress.
invocation name.
Check integrity of the specified file(s), but don't decompress them.
This really performs a trial decompression and throws away the result.
Force overwrite of output files.  Normally,
will not overwrite
existing output files.  Also forces 
to break hard links
to files, which it otherwise wouldn't do.

bzip2 normally declines to decompress files which don't have the
correct magic header bytes.  If forced (-f), however, it will pass
such files through unmodified.  This is how GNU gzip behaves.
Keep (don't delete) input files during compression
or decompression.
Reduce memory usage, for compression, decompression and testing.  Files
are decompressed and tested using a modified algorithm which only
requires 2.5 bytes per block byte.  This means any file can be
decompressed in 2300k of memory, albeit at about half the normal speed.

memory use to around the same figure, at the expense of your compression
ratio.  In short, if your machine is low on memory (8 megabytes or
Suppress non-essential warning messages.  Messages pertaining to
Verbose mode -- show the compression ratio for each file processed.
information which is primarily of interest for diagnostic purposes.
Display the software version, license terms and conditions.
Set the block size to 100 k, 200 k ..  900 k when compressing.  Has no
effect when decompressing.  See MEMORY MANAGEMENT below.
significantly faster.  
Treats all subsequent arguments as file names, even if they start
with a dash.  This is so you can handle files with names beginning
These flags are redundant in versions 0.9.5 and above.  They provided
some coarse control over the behaviour of the sorting algorithm in
earlier versions, which was sometimes useful.  0.9.5 and above have an
improved algorithm which renders these flags irrelevant.

compresses large files in blocks.  The block size affects
both the compression ratio achieved, and the amount of memory needed for
specify the block size to be 100,000 bytes through 900,000 bytes (the
default) respectively.  At decompression time, the block size used for
compression is read from the header of the compressed file, and
then allocates itself just enough memory to decompress
the file.  Since block sizes are stored in compressed files, it follows
during decompression.

Compression and decompression requirements, 
in bytes, can be estimated as:

       Compression:   400k + ( 8 x block size )

       Decompression: 100k + ( 4 x block size ), or
                      100k + ( 2.5 x block size )

Larger block sizes give rapidly diminishing marginal returns.  Most of
the compression comes from the first two or three hundred k of block
size, a fact worth bearing in mind when using
on small machines.
It is also important to appreciate that the decompression memory
requirement is set at compression time by the choice of block size.

For files compressed with the default 900k block size,
will require about 3700 kbytes to decompress.  To support decompression
of any file on a 4 megabyte machine, 
has an option to
decompress using approximately half this amount of memory, about 2300
kbytes.  Decompression speed is also halved, so you should use this
option only where necessary.  The relevant flag is -s.

In general, try and use the largest block size memory constraints allow,
since that maximises the compression achieved.  Compression and
decompression speed are virtually unaffected by block size.

Another significant point applies to files which fit in a single block
-- that means most files you'd encounter using a large block size.  The
amount of real memory touched is proportional to the size of the file,
since the file is smaller than a block.  For example, compressing a file
20,000 bytes long with the flag -9 will cause the compressor to
allocate around 7600k of memory, but only touch 400k + 20000 * 8 = 560
kbytes of it.  Similarly, the decompressor will allocate 3700k but only
touch 100k + 20000 * 4 = 180 kbytes.

Here is a table which summarises the maximum memory usage for different
block sizes.  Also recorded is the total compressed size for 14 files of
the Calgary Text Compression Corpus totalling 3,141,622 bytes.  This
column gives some feel for how compression varies with block size.
These figures tend to understate the advantage of larger block sizes for
larger files, since the Corpus is dominated by smaller files.

           Compress   Decompress   Decompress   Corpus
    Flag     usage      usage       -s usage     Size

     -1      1200k       500k         350k      914704
     -2      2000k       900k         600k      877703
     -3      2800k      1300k         850k      860338
     -4      3600k      1700k        1100k      846899
     -5      4400k      2100k        1350k      845160
     -6      5200k      2500k        1600k      838626
     -7      6100k      2900k        1850k      834096
     -8      6800k      3300k        2100k      828642
     -9      7600k      3700k        2350k      828642

compresses files in blocks, usually 900kbytes long.  Each
block is handled independently.  If a media or transmission error causes
a multi-block .bz2
file to become damaged, it may be possible to
recover data from the undamaged blocks in the file.

The compressed representation of each block is delimited by a 48-bit
pattern, which makes it possible to find the block boundaries with
reasonable certainty.  Each block also carries its own 32-bit CRC, so
damaged blocks can be distinguished from undamaged ones.

is a simple program whose purpose is to search for
blocks in .bz2 files, and write each block out into its own .bz2 
file.  You can then use
to test the
integrity of the resulting files, and decompress those which are
undamaged.

takes a single argument, the name of the damaged file, 
and writes a number of files "rec00001file.bz2",
"rec00002file.bz2", etc, containing the  extracted  blocks.
The  output  filenames  are  designed  so  that the use of
wildcards in subsequent processing -- for example,  
"bzip2 -dc  rec*file.bz2 > recovered_data" -- processes the files in
the correct order.

should be of most use dealing with large .bz2
files,  as  these will contain many blocks.  It is clearly
futile to use it on damaged single-block  files,  since  a
damaged  block  cannot  be recovered.  If you wish to minimise 
any potential data loss through media  or  transmission errors, 
you might consider compressing with a smaller
block size.

The sorting phase of compression gathers together similar strings in the
file.  Because of this, files containing very long runs of repeated
symbols, like "aabaabaabaab ..."  (repeated several hundred times) may
compress more slowly than normal.  Versions 0.9.5 and above fare much
better than previous versions in this respect.  The ratio between
worst-case and average-case compression time is in the region of 10:1.
For previous versions, this figure was more like 100:1.  You can use the

Decompression speed is unaffected by these phenomena.

usually allocates several megabytes of memory to operate
in, and then charges all over it in a fairly random fashion.  This means
that performance, both for compressing and decompressing, is largely
determined by the speed at which your machine can service cache misses.
Because of this, small changes to the code to reduce the miss rate have
been observed to give disproportionately large performance improvements.
I imagine 
will perform best on machines with very large caches.

what the problem is sometimes seem rather misleading.

This manual page pertains to version 1.0.6 of
Compressed data created by this version is entirely forwards and
backwards compatible with the previous public releases, versions
0.1pl2, 0.9.0, 0.9.5, 1.0.0, 1.0.1, 1.0.2 and above, but with the following
exception: 0.9.0 and above can correctly decompress multiple
concatenated compressed files.  0.1pl2 cannot do this; it will stop
after decompressing just the first file in the stream.

versions prior to 1.0.2 used 32-bit integers to represent
bit positions in compressed files, so they could not handle compressed
files more than 512 megabytes long.  Versions 1.0.2 and above use
64-bit ints on some platforms which support them (GNU supported
targets, and Windows).  To establish whether or not bzip2recover was
built with such a limitation, run it without arguments.  In any event
you can build yourself an unlimited version if you can recompile it
with MaybeUInt64 set to be an unsigned 64-bit integer.



Julian Seward, jsewardbzip.org.


The ideas embodied in
are due to (at least) the following
people: Michael Burrows and David Wheeler (for the block sorting
transformation), David Wheeler (again, for the Huffman coder), Peter
Fenwick (for the structured coding model in the original
and many refinements), and Alistair Moffat, Radford Neal and Ian Witten
(for the arithmetic coder in the original
I am much
indebted for their help, support and advice.  See the manual in the
source distribution for pointers to sources of documentation.  Christian
von Roques encouraged me to look for faster sorting algorithms, so as to
speed up compression.  Bela Lubkin encouraged me to improve the
worst-case compression performance.  
Donna Robinson XMLised the documentation.
The bz* scripts are derived from those of GNU gzip.
Many people sent patches, helped
with portability problems, lent machines, gave advice and were generally
helpful.
[ name ...  ]
[ name ...  ]
In the following description,
and
can be used interchangeably with
and
is a filter which allows examination of compressed or plain text files
one screenful at a time on a soft-copy terminal.
works on files compressed with
and also on uncompressed files.
If a file does not exist,
looks for a file of the same name with the addition of a .bz2 suffix.
normally pauses after each screenful, printing --More--
at the bottom of the screen.
If the user then types a carriage return, one more line is displayed.
If the user hits a space,
another screenful is displayed.  Other possibilities are enumerated later.
looks in the file
to determine terminal characteristics,
and to determine the default window size.
On a terminal capable of displaying 24 lines,
the default window size is 22 lines.
Other sequences which may be typed when
argument, defaulting to 1) :
display
more lines, (or another screenful if no argument is given)
display 11 more lines (a ``scroll'').
If
same as ^D (control-D)
window size.  Note that the window size reverts back to the default at the
end of the current file.
quit reading the current file; go on to the next (if any)
When the prompt --More--(Next file: 
is printed, this command causes bzmore to exit.
When the prompt --More--(Next file: 
is printed, this command causes bzmore to skip the next file and continue.
Display the current line number.
If the pattern is not found,
goes on to the next file (if any).
Otherwise, a screenful is displayed, starting two lines before the place
where the expression was found.
The user's erase and kill characters may be used to edit the regular
expression.
Erasing back past the first column cancels the search command.
The character `!' in "command" are replaced with the
quit reading the current file; go on to the next (if any)
(same as q or Q).
(dot) repeat the previous command.
The commands take effect immediately, i.e., it is not necessary to
type a carriage return.
Up to the time when the command character itself is given,
the user may hit the line kill character to cancel the numerical
argument being formed.
In addition, the user may hit the erase character to redisplay the
--More-- message.
At any time when output is being sent to the terminal, the user can
will stop sending output, and will display the usual --More--
prompt.
The user may then enter one of the above commands in the normal manner.
Unfortunately, some output is lost when this is done, due to the
fact that any characters waiting in the terminal's output queue
are flushed when the quit signal occurs.
The terminal is set to
mode by this program so that the output can be continuous.
commands.
If the standard output is not a teletype, then
acts just like
except that a header is printed before each file.
more(1), less(1), bzip2(1), bzdiff(1), bzgrep(1)
[ name ...  ]
[ name ...  ]
In the following description,
and
can be used interchangeably with
and
is a filter which allows examination of compressed or plain text files
one screenful at a time on a soft-copy terminal.
works on files compressed with
and also on uncompressed files.
If a file does not exist,
looks for a file of the same name with the addition of a .bz2 suffix.
normally pauses after each screenful, printing --More--
at the bottom of the screen.
If the user then types a carriage return, one more line is displayed.
If the user hits a space,
another screenful is displayed.  Other possibilities are enumerated later.
looks in the file
to determine terminal characteristics,
and to determine the default window size.
On a terminal capable of displaying 24 lines,
the default window size is 22 lines.
Other sequences which may be typed when
argument, defaulting to 1) :
display
more lines, (or another screenful if no argument is given)
display 11 more lines (a ``scroll'').
If
same as ^D (control-D)
window size.  Note that the window size reverts back to the default at the
end of the current file.
quit reading the current file; go on to the next (if any)
When the prompt --More--(Next file: 
is printed, this command causes bzmore to exit.
When the prompt --More--(Next file: 
is printed, this command causes bzmore to skip the next file and continue.
Display the current line number.
If the pattern is not found,
goes on to the next file (if any).
Otherwise, a screenful is displayed, starting two lines before the place
where the expression was found.
The user's erase and kill characters may be used to edit the regular
expression.
Erasing back past the first column cancels the search command.
The character `!' in "command" are replaced with the
quit reading the current file; go on to the next (if any)
(same as q or Q).
(dot) repeat the previous command.
The commands take effect immediately, i.e., it is not necessary to
type a carriage return.
Up to the time when the command character itself is given,
the user may hit the line kill character to cancel the numerical
argument being formed.
In addition, the user may hit the erase character to redisplay the
--More-- message.
At any time when output is being sent to the terminal, the user can
will stop sending output, and will display the usual --More--
prompt.
The user may then enter one of the above commands in the normal manner.
Unfortunately, some output is lost when this is done, due to the
fact that any characters waiting in the terminal's output queue
are flushed when the quit signal occurs.
The terminal is set to
mode by this program so that the output can be continuous.
commands.
If the standard output is not a teletype, then
acts just like
except that a header is printed before each file.
more(1), less(1), bzip2(1), bzdiff(1), bzgrep(1)
that you can write many functions with the same name, providing that
each function takes parameters of different types.  In order to be
encode them into a low-level assembler name which uniquely identifies
[1]
names into user-level names so that they can be read.
Every alphanumeric word (consisting of letters, digits, underscores,
dollars, or periods) seen in the input is a potential mangled name.
low-level name in the output, otherwise the original word is output.
In this way you can pass an entire assembler source file, containing
containing demangled names.
passing them on the command line:
names from the standard input instead.  All the results are printed on
the standard output.  The difference between reading names from the
command line versus reading names from the standard input is that
command line arguments are expected to be just mangled names and no
checking is performed to separate them from surrounding text.  Thus
for example:
will not work.  (Note the extra comma at the end of the mangled
name which makes it invalid).  This command however will work:
trailing comma.  This behaviour is because when the names are read
from the standard input it is expected that they might be part of an
assembler source file where there might be extra, extraneous
characters trailing after a mangled name.  eg:
syntax.
Do not remove the initial underscore.
When demangling the name of a function, do not display the types of
the function's parameters.
Attempt to demangle types as well as function names.  This is disabled
by default since mangled types are normally only used internally in
the compiler, and they can be confused with non-mangled names.  eg
Do not include implementation details (if any) in the demangled
output.
different compilers.  The argument to this option selects which
method it uses:
Automatic selection based on executable (the default method)
the one used by the Lucid compiler (lcc)
does not exist, or cannot be read, then the option will be treated
literally, and not removed.  
character may be included in an option by surrounding the entire
option in either single or double quotes.  Any character (including a
backslash) may be included by prefixing the character to be included
Copyright (c) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
2000, 2001, 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
The following is the old c2ph.doc documentation by Tom Christiansen
<tchrist@perl.com>
Once upon a time, I wrote a program called pstruct.  It was a perl
program that tried to parse out C structures and display their member
offsets for you.  This was especially useful for people looking at
binary dumps or poking around the kernel.
Pstruct was not a pretty program.  Neither was it particularly robust.
The problem, you see, was that the C compiler was much better at parsing
C than I could ever hope to be.
So I got smart:  I decided to be lazy and let the C compiler parse the C,
which would spit out debugger stabs for me to read.  These were much
easier to parse.  It's still not a pretty program, but at least it's more
robust.
Pstruct takes any .c or .h files, or preferably .s ones, since that's
the format it is going to massage them into anyway, and spits out
listings like this:
etc.
Actually, this was generated by a particular set of options.  You can control
the formatting of each column, whether you prefer wide or fat, hex or decimal,
leading zeroes or whatever.
All you need to be able to use this is a C compiler than generates
should get this for you.
will be provided.  There are a fair number of possibilities.
If you're only a C programmer, than this is the end of the message for you.
You can quit right now, and if you care to, save off the source and run it
when you feel like it.  Or not.
But if you're a perl programmer, then for you I have something much more
wondrous than just a structure offset printer.
You see, if you call pstruct by its other incybernation, c2ph, you have a code
generator that translates C code into perl code!  Well, structure and union
declarations at least, but that's quite a bit.
Prior to this point, anyone programming in perl who wanted to interact
with C programs, like the kernel, was forced to guess the layouts of
the C structures, and then hardwire these into his program.  Of course,
when you took your wonderfully crafted program to a system where the
sgtty structure was laid out differently, your program broke.  Which is
a shame.
We've had Larry's h2ph translator, which helped, but that only works on
cpp symbols, not real C, which was also very much needed.  What I offer
you is a symbolic way of getting at all the C structures.  I've couched
them in terms of packages and functions.  Consider the following program:
As you see, the name of the package is the name of the structure.  Regular
fields are just their own names.  Plus the following accessor functions are
provided for your convenience:
The way I see this being used is like basically this:
It's a little tricker with c2ph because you have to get the includes right.
I can't know this for your system, but it's not usually too terribly difficult.
been less cavalier in how the parts of the program communicated with each
other, etc.  It might also have helped if I didn't have to divine the makeup
of the stabs on the fly, and then account for micro differences between my
compiler and gcc.
Anyway, here it is.  Should run on perl v4 or greater.  Maybe less.
The following is the old c2ph.doc documentation by Tom Christiansen
<tchrist@perl.com>
Once upon a time, I wrote a program called pstruct.  It was a perl
program that tried to parse out C structures and display their member
offsets for you.  This was especially useful for people looking at
binary dumps or poking around the kernel.
Pstruct was not a pretty program.  Neither was it particularly robust.
The problem, you see, was that the C compiler was much better at parsing
C than I could ever hope to be.
So I got smart:  I decided to be lazy and let the C compiler parse the C,
which would spit out debugger stabs for me to read.  These were much
easier to parse.  It's still not a pretty program, but at least it's more
robust.
Pstruct takes any .c or .h files, or preferably .s ones, since that's
the format it is going to massage them into anyway, and spits out
listings like this:
etc.
Actually, this was generated by a particular set of options.  You can control
the formatting of each column, whether you prefer wide or fat, hex or decimal,
leading zeroes or whatever.
All you need to be able to use this is a C compiler than generates
should get this for you.
will be provided.  There are a fair number of possibilities.
If you're only a C programmer, than this is the end of the message for you.
You can quit right now, and if you care to, save off the source and run it
when you feel like it.  Or not.
But if you're a perl programmer, then for you I have something much more
wondrous than just a structure offset printer.
You see, if you call pstruct by its other incybernation, c2ph, you have a code
generator that translates C code into perl code!  Well, structure and union
declarations at least, but that's quite a bit.
Prior to this point, anyone programming in perl who wanted to interact
with C programs, like the kernel, was forced to guess the layouts of
the C structures, and then hardwire these into his program.  Of course,
when you took your wonderfully crafted program to a system where the
sgtty structure was laid out differently, your program broke.  Which is
a shame.
We've had Larry's h2ph translator, which helped, but that only works on
cpp symbols, not real C, which was also very much needed.  What I offer
you is a symbolic way of getting at all the C structures.  I've couched
them in terms of packages and functions.  Consider the following program:
As you see, the name of the package is the name of the structure.  Regular
fields are just their own names.  Plus the following accessor functions are
provided for your convenience:
The way I see this being used is like basically this:
It's a little tricker with c2ph because you have to get the includes right.
I can't know this for your system, but it's not usually too terribly difficult.
been less cavalier in how the parts of the program communicated with each
other, etc.  It might also have helped if I didn't have to divine the makeup
of the stabs on the fly, and then account for micro differences between my
compiler and gcc.
Anyway, here it is.  Should run on perl v4 or greater.  Maybe less.
The following is the old c2ph.doc documentation by Tom Christiansen
<tchrist@perl.com>
Once upon a time, I wrote a program called pstruct.  It was a perl
program that tried to parse out C structures and display their member
offsets for you.  This was especially useful for people looking at
binary dumps or poking around the kernel.
Pstruct was not a pretty program.  Neither was it particularly robust.
The problem, you see, was that the C compiler was much better at parsing
C than I could ever hope to be.
So I got smart:  I decided to be lazy and let the C compiler parse the C,
which would spit out debugger stabs for me to read.  These were much
easier to parse.  It's still not a pretty program, but at least it's more
robust.
Pstruct takes any .c or .h files, or preferably .s ones, since that's
the format it is going to massage them into anyway, and spits out
listings like this:
etc.
Actually, this was generated by a particular set of options.  You can control
the formatting of each column, whether you prefer wide or fat, hex or decimal,
leading zeroes or whatever.
All you need to be able to use this is a C compiler than generates
should get this for you.
will be provided.  There are a fair number of possibilities.
If you're only a C programmer, than this is the end of the message for you.
You can quit right now, and if you care to, save off the source and run it
when you feel like it.  Or not.
But if you're a perl programmer, then for you I have something much more
wondrous than just a structure offset printer.
You see, if you call pstruct by its other incybernation, c2ph, you have a code
generator that translates C code into perl code!  Well, structure and union
declarations at least, but that's quite a bit.
Prior to this point, anyone programming in perl who wanted to interact
with C programs, like the kernel, was forced to guess the layouts of
the C structures, and then hardwire these into his program.  Of course,
when you took your wonderfully crafted program to a system where the
sgtty structure was laid out differently, your program broke.  Which is
a shame.
We've had Larry's h2ph translator, which helped, but that only works on
cpp symbols, not real C, which was also very much needed.  What I offer
you is a symbolic way of getting at all the C structures.  I've couched
them in terms of packages and functions.  Consider the following program:
As you see, the name of the package is the name of the structure.  Regular
fields are just their own names.  Plus the following accessor functions are
provided for your convenience:
The way I see this being used is like basically this:
It's a little tricker with c2ph because you have to get the includes right.
I can't know this for your system, but it's not usually too terribly difficult.
been less cavalier in how the parts of the program communicated with each
other, etc.  It might also have helped if I didn't have to divine the makeup
of the stabs on the fly, and then account for micro differences between my
compiler and gcc.
Anyway, here it is.  Should run on perl v4 or greater.  Maybe less.
The
utility displays a simple calendar in traditional format and
offers an alternative layout, more options and the date of easter.
The new format is a little cramped but it makes a year fit
on a 25x80 terminal.
If arguments are not specified,
the current month is displayed.
The options are as follows:
Display Julian Calendar, if combined with the
option, display date of easter according to the Julian Calendar.
Display date of easter (for western churches).
Display Julian days (days one-based, numbered from January 1).
Display the specified
Display date of orthodox easter (Greek and Russian
Orthodox Churches).
Print the country codes and switching days from Julian to Gregorian
Calendar as they are assumed by
The country code as determined from the local environment is marked
with an asterisk.
Assume the switch from Julian to Gregorian Calendar at the date
associated with the
If not specified,
tries to guess the switch date from the local environment or
falls back to September 2, 1752.
This was when Great
Britain and her colonies switched to the Gregorian Calendar.
Print the number of the week below each week column.
Display a calendar for the specified year.
A single parameter specifies the year (1 - 9999) to be displayed;
note the year must be fully specified:
will
display a calendar for 1989.
Two parameters denote the month and year; the month is either a number between
1 and 12, or a full or abbreviated name as specified by the current locale.
Month and year default to those of the current system clock and time zone (so
will display a calendar for the month of August in the current year).
A year starts on Jan 1.
A
command appeared in
The
command appeared in
The
command and manual were written by
country codes is historically naive for many countries.
The
utility checks the current directory for a file named
and displays lines that begin with either today's date
or tomorrow's.
On the day before a weekend (normally Friday), events for the next
three days are displayed.
The following options are available:
Print lines from today and the next
days (forward, future).
Process the ``calendar'' files of all users and mail the results
to them.
This requires super-user privileges.
Print lines from today and the previous
days (backward, past).
Specify which day of the week is ``Friday'' (the day before the
weekend begins).
Default is 5.
Use
as the default calendar file.
For test purposes only: set date directly to argument values.
Print lines from today and the next
days (forward, future).
Ignore weekends when calculating the number of days.
To handle calendars in your national code table you can specify
in the calendar file as early as possible.
To handle national Easter
names in the calendars
(for Catholic Easter) or
(for Orthodox Easter) can be used.
Other lines should begin with a month and day.
They may be entered in almost any format, either numeric or as character
strings.
If the proper locale is set, national month and weekday
names can be used.
A single asterisk (``*'') matches every month.
A day without a month matches that day of every week.
A month without a day matches the first of that month.
Two numbers default to the month followed by the day.
Lines with leading tabs default to the last entered date, allowing
multiple line specifications for a single date.
``Easter'', is Easter for this year, and may be followed by a positive
or negative integer.
``Paskha'', is Orthodox Easter for this year, and may be followed by a
positive or negative integer.
last, first, second, third, fourth) for moving events like
``the last Monday in April''.
By convention, dates followed by an asterisk are not fixed, i.e., change
from year to year.
Day descriptions start after the first <tab> character in the line;
if the line does not contain a <tab> character, it is not displayed.
If the first character in the line is a <tab> character, it is treated as
a continuation of the previous line.
The ``calendar'' file is preprocessed by
allowing the inclusion of shared files such as lists of company holidays or
meetings.
If the shared file is not referenced by a full pathname,
searches in the current (or home) directory first, and then in the
directory
Empty lines and lines protected by the C commenting syntax
are ignored.
Some possible calendar entries (<tab> characters highlighted by
LANG=C
Easter=Ostern

#include <calendar.usholiday>
#include <calendar.birthday>



file in current directory
HOME directory.
A chdir is done into this directory if it exists.
calendar file to use if no calendar file exists in the current directory.
do not send mail if this file exists.
The following default calendar files are provided:
File which includes all the default files.
Calendar of events in Australia.
Births and deaths of famous (and not-so-famous) people.
Christian holidays.
This calendar should be updated yearly by the local system administrator
so that roving holidays are set correctly for the current year.
Days of special significance to computer people.
Calendar of events in Croatia.
Birthdays of
committers.
Calendar of events in France.
Calendar of events in Germany.
Other holidays, including the not-well-known, obscure, and
obscure.
Jewish holidays.
This calendar should be updated yearly by the local system administrator
so that roving holidays are set correctly for the current year.
Musical events, births, and deaths.
Strongly oriented toward rock 'n' roll.
Calendar of events in New Zealand.
Russian calendar.
Calendar of events in South Africa.
This calendar should be updated yearly by the local system administrator
so that roving holidays are set correctly for the current year.
Includes all calendar files except for national files.
The
program previously selected lines which had the correct date anywhere
in the line.
This is no longer true, the date is only recognized when it occurs
at the beginning of a line.
A
command appeared in
The
utility does not handle Jewish holidays and moon phases.
builds a hashed database out of the
logical database constructed by the concatenation of the specified
files .
The database is named by the basename of the first file argument and
the string
The
routines can access the database in this form much more quickly
than they can the original text file(s).
The ``tc'' capabilities of the records are expanded before the
record is stored into the database.
The options as as follows:
Specify a different database basename.
Print out the number of capability records in the database.
Each record is stored in the database using two different types of keys.
The first type is a key which consists of the first capability of
the record (not including the trailing colon (``:'')) with a data
field consisting of a special byte followed by the rest of the record.
The special byte is either a 0 or 1, where a 0 means that the record
is okay, and a 1 means that there was a ``tc'' capability in the record
that couldn't be expanded.
The second type is a key which consists of one of the names from the
first capability of the record with a data field consisting a special
byte followed by the the first capability of the record.
The special byte is a 2.
In normal operation names are looked up in the database, resulting
pair of the first type which has the real data associated with the
name.
The
utility exits 0 on success and >0 if an error occurs.
The
utility reads files sequentially, writing them to the standard output.
The
operands are processed in command-line order.
If
is a single dash
or absent,
reads from the standard input.
If
is a
domain socket,
connects to it and then reads it until
This complements the
domain binding capability available in
The options are as follows:
Number the non-blank output lines, starting at 1.
Display non-printing characters (see the
option), and display a dollar sign
at the end of each line.
Number the output lines, starting at 1.
Squeeze multiple adjacent empty lines, causing the output to be
single spaced.
Display non-printing characters (see the
option), and display tab characters as
Disable output buffering.
Display non-printing characters so they are visible.
Control characters print as
for control-X; the delete
character (octal 0177) prints as
characters (with the high bit set) are printed as
(for meta) followed by the character for the low 7 bits.
The command:
will print the contents of
to the standard output.
The command:
will sequentially print the contents of
and
to the file
truncating
if it already exists.
See the manual page for your shell (i.e.,
for more information on redirection.
The command:
will print the contents of
print data it receives from the standard input until it receives an
character, print the contents of
read and output contents of the standard input again, then finally output
the contents of
Note that if the standard input referred to a file, the second dash
on the command-line would have no effect, since the entire contents of the file
would have already been read and printed by
when it encountered the first
operand.
The
utility is compliant with the
specification.
The flags
are extensions to the specification.
A
utility appeared in
designed and wrote the first man page.
It appears to have been
Because of the shell language mechanism used to perform output
redirection, the command
will cause the original data in file1 to be destroyed!
The
utility does not recognize multibyte characters when the
or
option is in effect.
Use the .Nm macro to refer to your program throughout the man page like such:
Underlining is accomplished with the .Ar macro like this:
A list of items with descriptions:
Description of item a
Description of item b
A list of flags and their descriptions:
Description of -a flag
Description of -b flag
FILE_1 description
FILE_2 description
Use the .Nm macro to refer to your program throughout the man page like such:
Underlining is accomplished with the .Ar macro like this:
A list of items with descriptions:
Description of item a
Description of item b
A list of flags and their descriptions:
Description of -a flag
Description of -b flag
FILE_1 description
FILE_2 description
Use the .Nm macro to refer to your program throughout the man page like such:
Underlining is accomplished with the .Ar macro like this:
A list of items with descriptions:
Description of item a
Description of item b
A list of flags and their descriptions:
Description of -a flag
Description of -b flag
FILE_1 description
FILE_2 description
Use the .Nm macro to refer to your program throughout the man page like such:
Underlining is accomplished with the .Ar macro like this:
A list of items with descriptions:
Description of item a
Description of item b
A list of flags and their descriptions:
Description of -a flag
Description of -b flag
FILE_1 description
FILE_2 description

use with Keychains
command [command-args] [options]
c [options]
r outFileName [options]
v infileName [options]
C domainName [options]
i inFileName [options]
d inFileName [options]
I inFileName [options]
D inFileName [options]
y [options]
Create keypair and Certificate
Create CSR
Verify CSR
Create a System Identity
Import Certificate
Display Certificate
Import CRL
Display CRL
Import a CRL
Display all certs and CRLs in keychain
Create the keychain, if one is needed.
Create a CSR in DER format; default is PEM
Specify the keychain passphrase when creating
Optional private key, for Import Certificate only
Extended Key Usage: a=Any; s=SSL Client; S=SSL Server; m=SMIME
Generate private key with default ACL
Generate private key with ACL limiting access to current user
Don't create System Identity if one already exists for specified domain
Print usage message
Execute in verbose mode.
is a UNIX command-line program which is used to create key pairs, certificates,
and certificate signing requests; to import externally generated certificates
and Certificate Revocation Lists (CRLs) into a Keychain, and to display the 
contents of certificates and CRLs. 
This command generates a key pair and a self-signed (root) certificate
and places them in a keychain. The root cert is signed by the private
key generated during this command. The cert generated by this command 
is totally untrustworthy and cannot be used in the "real world"; the 
primary use of this command is to facilitate early development of SSL 
server applications based on SecureTransport. In particular, 
"real world" SSL clients (e.g., web browsers) will complain to
varying degrees when they attempt to connect to an SSL server which
presents a cert which is generated by this command. Some broswers,
after a fair amount of handholding, will allow you to conditionally
"trust" this cert. 
# CertTool c [options]
The available options are:
k=keyChainName 
Where "keyChainName" is the name of the keychain into which keys and the cert
will be added. The specified keychain must exist. If it doesn't exist and
you want the keychain created for you, specify the 'c' option. If no keychain
is specified, keys and certs are added to the default keychain. 
c 
Specifies that the designated keychain is to be created.
x=[aSsm]
a
Results the the private key being created with a default ACL. If not specified, the private key is created with no ACL. 
u
Create the private key with an ACL limiting access to the current user. 
This is an interactive command; you will be prompted for a number of different
items which are used to generate the keypair and the cert. A sample session
follows. 
# CertTool k=certkc 
Enter key and certificate label: testCert 

Please specify parameters for the key pair you will generate. 

	r RSA 
	d DSA 
	f FEE 

Select key algorithm by letter: r 

Valid key sizes for RSA are 512..2048; default is 512 
Enter key size in bits or CR for default: 512 

You have selected algorithm RSA, key size 512 bits. 
 ...Generating key pair... 

Note: you will be prompted for the Keychain's passphrase by the Keychain
system at this point if the specified keychain is not open and you have not specified the passphrase via the 'p' option. 
Please specify the algorithm with which your certificate will be signed. 

	5 RSA with MD5 
	s RSA with SHA1 

Select signature algorithm by letter: s 

You have selected algorithm RSA with SHA1. 
You will now specify the various components of the certificate's 
Relative Distinguished Name (RDN). An RDN has a number of 
components, all of which are optional, but at least one of 
which must be present. 
Note that if you are creating a certificate for use in an 
exactly the host name of the server. This must not be an IP 
address, but the actual domain name, e.g. www.apple.com. 
Entering a CR for a given RDN component results in no value for 
that component. 
Common Name       (e.g. www.apple.com) : 10.0.61.5
Country           (e.g. US) : 
Organization      (e.g. Apple Computer, Inc.) : Apple 
Organization Unit (e.g. Apple Data Security) : 
Email Address     (e.g. johngalt@rand.com) : 
You have specified: 
 Common Name	: 10.0.61.5 
 Organization	: Apple 
#
The "Common Name" portion of the RDN - in the above case, "10.0.61.5" - MUST
the test machine doesn't have an actual hostname; it's DHCP'd behind a firewall
which is why "10.0.61.5" was specified for Common Name.) This is part of SSL's
certificate verification; it prevents an attack using DNS spoofing. 
is that the server cert specified in SSLSetCertificate() is capable of both
signing and encryption. If this cert is only capable of signing, you must
create a second keychain containing a cert which is capable of encryption, and
pass that to SSLSetEncryptionCertificate(). 
A CSR is the standard means by which an administrator of a web server provides
information to a Certificate Authority (CA) in order to obtain a valid
certificate which is signed by the CA. This type of cert is used in the real
world; certs signed by CAs such as Verisign and Thawte are recognized by most web
browsers when performing SSL transactions. 
The general procedure for obtaining a "real" cert is: 
Generate a key pair
Generate a CSR
CA sends you a certificate which is signed by the CA.
You import that certificate, obtained from the CA, into your keychain.
The
items in that keychain can now be used in SecureTransport's SSLSetCertificate()
call.
This command performs the first two steps in the above procedure. See the 
section below entitled "Importing a Certificate" for information on 
importing the resulting certificate into your keychain. The format of 
this command is 
# CertTool r outFileName [options] 
The resulting CSR will be written to "outFileName". 
The available options are: 
k=keyChainName 
Where "KeyChainName" is the name of the keychain into which keys and the cert
will be added. If no keychain is specified, keys and certs are added to the
default keychain. The specified keychain must exist unless you specify the 'c'
option.
 d 
The 'd' option tells CertTool to create the CSR in DER-encoded format. The
default is PEM-encoded, which is what most CAs expect. PEM encoded data consists
of printable ASCII text which can, for example, be pasted into an email message.
DER-encoded data is nonprintable binary data.
 c 
Specifies that the designated keychain is to be created.
a
Results the the private key being created with a default ACL. If not specified, the private key is created with no ACL. 
u
Create the private key with an ACL limiting access to the current user. 
This is an interactive command; you will be prompted for a number of different
items which are used to generate the keypair and the CSR. The prompts given, and
the format of the data you must supply, are identical to the data shown in the
sample session in Section 2. 
A CSR contains, among other things, the public key which was generated in
as described above. The CSR is signed with the associated private key. Thus the
integrity of a CSR can be verified by extracting its public key and verifying the signature of the CSR. This command performs this integrity check. The format of this command is 
# CertTool v inFileName [options] 
The only available option is the 'd' flag, which as described above in the
section entitled "Generating a Certificate Signing Request", indiciates 
that the CSR is in DER format rather than the default PEM format. 
A typical (successful) run of this command is like so: 
# CertTool v myCsr.pem 
 ...CSR verified successfully. 
A large number of things can go wrong if the verification fails; suffice it to
say that if you see anything other than the above success message, you have a
bad or corrupted CSR. 
This creates a key pair and a self-signed (root) certificate in the System keychain, and registers the result in the System Identity database as being the IDentity associated with the specified domain name. The domain name is typically a string of the form "com.apple.somedomain...". You must be running as root to execute this command. 
The format of this command is 
# CertTool C domainName [options] 
The available options are:
u
Create the private key with an ACL limiting access to the current user. If not specified, the private key wil be created with a default ACL. 
P
Don't create system identity if one already exists for specified domain.
Once you have negotiated with your CA, and provided them with the CSR generated
as described above as well as any other information, documentation, and payment they
require, the CA will provide you with a certificate. Use this command to add
that certificate to the keychain containing the keypair you generated previously.
The format of this command is 
# CertTool i inFileName [options] 
The cert to import is obtained from "inFileName". The available options are: 
k=keyChainName 
Where "keyChainName" is the name of the keychain to which the cert will be
added. If no keychain is specified, the cert is added to the default keychain.
The specified keychain typically contains the keypair you generated previously.
(Note you can import a certificate into a keychain which does not contain keys
you generated but there will be no linkage between the imported certificate and
a private key if you do this.) If the keychain is not open when this command is
executed, you will be prompted by the Keychain system for its passphrase.
r=privateKeyFileName
f=privateKeyFormat
Where "privateKeyFormat" is the format of the private key specified with the 'r' option. The formats are: '1' for PKCS1 (OpenSSL format), '8' (PKCS8), and 'f' (FIPS186, BSAFE format). The default is OpenSSL format for both RSA and DSA keys.   
 d 
Specifies DER format as described above. The default is PEM format.
 c 
Specifies that the designated keychain is to be created.
This displays the contents of an existing certificate, obtained from a file. 
The format of this command is 
# CertTool d inFileName [options] 
The cert to display is obtained from "inFileName". 
The only available option is the 'd' flag, specifying DER format as described above. The default is PEM format. Actually, in the absence of this option, certtool will correctly determine the format of the certificate (PEM or DER). 
This command is used to add a Certificate Revocation List (CRL) to a keychain. 
The format of this command is 
# CertTool I inFileName [options] 
The CRL to import is obtained from "inFileName".  The available options are: 
k=keyChainName 
Where "KeyChainName" is the name of the keychain to which the CRL will be added.
If no keychain is specified, the cert is added to the default keychain.  If the
keychain is not open when this command is executed, you will be prompted by the
Keychain system for its passphrase.
 d 
Specifies DER format as described above. The default is PEM format.
 c 
Specifies that the designated keychain is to be created.
This displays the contents of an existing Certificate Revocation List (CRL),
obtained from a file. The format of this command is 
# CertTool D inFileName [options] 
The cert to display is obtained from "inFileName". 
The only available option is the 'd' flag, specifying DER format as described
above. The default is PEM format.
This displays the contents of all certificates and CRLs in a keychain. The format of this command is 
# CertTool y [options] 
The available options are: 
k=keyChainName 
Where "KeyChainName" is the name of the keychain to display.
v
Specifies verbose mode.
As mentioned above, the general procedure for obtaining a "real" cert is: 
Generate a key pair
Generate a CSR
CA sends you a certificate which is signed by the CA.
You import that certificate, obtained from the CA, into your keychain.
The items in that keychain can now be used in SecureTranspoert's SSLSetCertificate()
call.
One CA with an excellent web-based interface for obtaining a cert is Verisign
trial certificate using nothing but CertTool, Verisign's web site, and email.
You need to provide some personal information. Paste the CSR
generated as described in the section entitled "Generating a Certificate 
Signing Request" into a form on the web site. A few minutes later Verisign
emails you a certificate, which you import into your keychain.
The whole process takes less than 10 minutes. The free certificate obtained in
this manner is signed by a temporary root cert which is not recognized by any
browsers, but Verisign also provides a means of installing this temporary root
cert into your browser, directly from their web site. Typically one would use
the free, temporary cert to perform initial configuration of a server and to
ring out the general SSL infrastructure. Once you feel comfortable with the
operation of the server, then it's time to buy a "real" certificate which will
allow your web server to be trusted by any browser. 
System root certificate database
System Keychain
Use
to exercise the content filter subsystem.
The flags have the following meaning:
Auto start filtering with given offset.
Default values for offset passin, peekin, passout, peekout, pass or peek.
Display this help.
Interactive mode.
Peek mode with increment.
Pass loopback traffic.
Maximum dump length.
Pass mode (all or after given offset if it is > 0).
Decrease verbosity.
Random drop rate.
display content filter statistics (all, sock, filt, cfil).
Pass delay in microseconds.
NECP filter control unit.
Increase verbosity.
checks the integrity of a LocalKDC and its principals.
The script is non-destructive and can be run multiple times.
does not own, but references the following files:
first appeared in version 10.7 of Mac OS X.
The
utility checks a list of
or
input files for certain kinds of errors
involving mismatched opening and closing delimiters
and unknown commands.
If no files are specified,
checks the standard input.
The following options are available:
Add additional pairs of macros to the list of known macros.
This must be followed by groups of six characters, each group defining
a pair of macros.
The six characters are
a period,
the first macro name,
another period,
and the second macro name.
For example, to define a pair .BS and .ES, use
Define commands which would otherwise be complained about
as undefined.
Request
to ignore
font changes.
Ignore
size changes.
Delimiters checked are:
the .TS and .TE macros which must always come in pairs.
The
utility is intended for use on documents that are prepared with
in mind, much the same as
It expects a certain document writing style for
and
commands,
in that each
must be terminated with
and
each
must be terminated with
While it will work to directly go into the next font or explicitly
specify the original font or point size,
and many existing documents actually do this,
such a practice will produce complaints from
Since it is probably better to use the
and
forms anyway,
you should think of this as a contribution to your document
preparation style.
The
utility knows about the
and
macro packages.
Complaints about unmatched delimiters.
Complaints about unrecognized commands.
Various complaints about the syntax of commands.
There is no way to define a 1 character macro name using
Does not correctly recognize certain reasonable constructs,
such as conditionals.
The
command appeared in
The
utility modifies the file flags of the listed files
as specified by the
operand.
The options are as follows:
Do not display a diagnostic message if
could not modify the flags for
nor modify the exit status to reflect such failures.
If the
option is specified, symbolic links on the command line are followed.
(Symbolic links encountered in the tree traversal are not followed.)
If the
is a symbolic link,
change the file flags of the link itself rather than the file to which it points.
If the
option is specified, all symbolic links are followed.
If the
option is specified, no symbolic links are followed.
This is the default.
Change the file flags for the file hierarchies rooted
in the files instead of just the files themselves.
Cause
to be verbose, showing filenames as the flags are modified.
If the
option is specified more than once, the old and new flags of the file
will also be printed, in octal notation.
The flags are specified as an octal number or a comma separated list
of keywords.
The following keywords are currently defined:
set the archived flag (super-user only)
set the opaque flag (owner or super-user only).
[Directory is opaque when viewed through a union mount]
set the nodump flag (owner or super-user only)
set the system append-only flag (super-user only)
set the system immutable flag (super-user only)
set the user append-only flag (owner or super-user only)
set the user immutable flag (owner or super-user only)
set the hidden flag
[Hide item from GUI]
As discussed in
the
and
flags may only be unset when the system is in single-user mode.
Putting the letters
before or removing the letters
from a keyword causes the flag to be cleared.
For example:
clear the user immutable flag (owner or super-user only)
clear the nodump flag (owner or super-user only)
Unless the
or
options are given,
on a symbolic link always succeeds and has no effect.
The
and
options are ignored unless the
option is specified.
In addition, these options override each other and the
command's actions are determined by the last one specified.
You can use "ls -lO" to see the flags of existing files.
The
command first appeared in
Only a limited number of utilities are
aware.
Some of these tools include
and
In particular a tool which is not currently
aware is the
utility.
The
utility sets the group ID of the file named by each
operand to the
ID specified by the group operand.
The following options are available:
The force option ignores errors, except for usage errors and doesn't
query about strange modes (unless the user does not have proper permissions).
If the
option is specified, symbolic links on the command line are followed.
(Symbolic links encountered in the tree traversal are not followed).
If the file is a symbolic link, the group ID of the link itself is changed
rather than the file that is pointed to.
If the
option is specified, all symbolic links are followed.
If the
option is specified, no symbolic links are followed.
This is the default. Use
to change the group ID of a symbolic link.
Change the group ID for the file hierarchies rooted
in the files instead of just the files themselves.
Cause
to be verbose, showing files as the group is modified.
The
and
options are ignored unless the
option is specified.
In addition, these options override each other and the
command's actions are determined by the last one specified.
The
operand can be either a group name from the group database,
or a numeric group ID.
If a group name is also a numeric group ID, the operand is used as a
group name.
The user invoking
must belong to the specified group and be the owner of the file,
or be the super-user.
In previous versions of this system, symbolic links did not have groups.
The
option is non-standard and its use in scripts is not recommended.
group ID file
The
utility is expected to be
compatible.
The
utility modifies the file mode bits of the listed files
as specified by the
operand. It may also be used to modify the Access Control
Lists (ACLs) associated with the listed files.
The generic options are as follows:
Do not display a diagnostic message if
could not modify the mode for
If the
option is specified, symbolic links on the command line are followed.
(Symbolic links encountered in the tree traversal are not followed by
default.)
If the file is a symbolic link, change the mode of the link itself
rather than the file that the link points to.
If the
option is specified, all symbolic links are followed.
If the
option is specified, no symbolic links are followed.
This is the default.
Change the modes of the file hierarchies rooted in the files
instead of just the files themselves.
Cause
to be verbose, showing filenames as the mode is modified.
If the
flag is specified more than once, the old and new modes of the file
will also be printed, in both octal and symbolic notation.
The
and
options are ignored unless the
option is specified.
In addition, these options override each other and the
command's actions are determined by the last one specified.
Only the owner of a file or the super-user is permitted to change
the mode of a file.
Modes may be absolute or symbolic.
An absolute mode is an octal number constructed from the sum of
one or more of the following values:
(the set-user-ID-on-execution bit) Executable files with this bit set
will run with effective uid set to the uid of the file owner.
Directories with the set-user-id bit set will force all files and
sub-directories created in them to be owned by the directory owner
and not by the uid of the creating process, if the underlying file
system supports this feature: see
and the
option to
(the set-group-ID-on-execution bit) Executable files with this bit set
will run with effective gid set to the gid of the file owner.
(the sticky bit)
See
and
Allow read by owner.
Allow write by owner.
For files, allow execution by owner.
For directories, allow the owner to
search in the directory.
Allow read by group members.
Allow write by group members.
For files, allow execution by group members.
For directories, allow
group members to search in the directory.
Allow read by others.
Allow write by others.
For files, allow execution by others.
For directories allow others to
search in the directory.
For example, the absolute mode that permits read, write and execute by
the owner, read and execute by group members, read and execute by
others, and no set-uid or set-gid behaviour is 755
(400+200+100+040+010+004+001).
The symbolic mode is described by the following grammar:
mode         ::= clause [, clause ...]
clause       ::= [who ...] [action ...] action
action       ::= op [perm ...]
who          ::= a | u | g | o
perm         ::= r | s | t | w | x | X | u | g | o
The
symbols ``u'', ``g'', and ``o'' specify the user, group, and other parts
of the mode bits, respectively.
The
symbol ``a'' is equivalent to ``ugo''.
The
symbols represent the portions of the mode bits as follows:
The read bits.
The set-user-ID-on-execution and set-group-ID-on-execution bits.
The sticky bit.
The write bits.
Operations with the
symbol ``X'' are only meaningful in conjunction with the
symbol ``+'', and are ignored in all other cases.
The user permission bits in the original mode of the file.
The group permission bits in the original mode of the file.
The other permission bits in the original mode of the file.
The
symbols represent the operation performed, as follows:
If no value is supplied for
the ``+'' operation has no effect.
If no value is supplied for
each permission bit specified in
for which the corresponding bit in the file mode creation mask
is clear, is set.
Otherwise, the mode bits represented by the specified
and
values are set.
If no value is supplied for
If no value is supplied for
each permission bit specified in
for which the corresponding bit in the file mode creation mask
is clear, is cleared.
Otherwise, the mode bits represented by the specified
and
values are cleared.
The mode bits specified by the
value are cleared, or, if no who value is specified, the owner, group
and other mode bits are cleared.
Then, if no value is supplied for
each permission bit specified in
for which the corresponding bit in the file mode creation mask
is clear, is set.
Otherwise, the mode bits represented by the specified
and
values are set.
Each
specifies one or more operations to be performed on the mode
bits, and each operation is applied to the mode bits in the
order specified.
Operations upon the other permissions only (specified by the symbol
``o'' by itself), in combination with the
symbols ``s'' or ``t'', are ignored.
make a file readable by anyone and writable by the owner only.
deny write permission to group and others.
set the read and write permissions to the usual defaults, but
retain any execute permissions that are currently set.
clear all mode bits for group and others.
set the group bits equal to the user bits, but clear the group write bit.
ACLs are manipulated using extensions to the symbolic mode
grammar.  Each file has one ACL, containing an ordered list of entries.
Each entry refers to a user or group, and grants or denies a set of
permissions.
In cases where a user and a group exist with the same name, the
specify the type of name.
If the user or group name contains spaces you can use ':' as the delimiter
between name and permission.
The following permissions are applicable to all filesystem objects:
Delete the item.  Deletion may be granted by either this permission
on an object or the delete_child right on the containing directory.
Read an objects basic attributes.  This is implicitly granted if 
the object can be looked up and not explicitly denied.
Write an object's basic attributes.
Read extended attributes.
Write extended attributes.
Read an object's extended security information (ACL).
Write an object's security information (ownership, mode, ACL).
Change an object's ownership.
The following permissions are applicable to directories:
List entries.
Look up files by name.
Add a file.
Add a subdirectory.
Delete a contained object.  See the file delete permission above.
The following permissions are applicable to non-directory filesystem objects:
Open for reading.
Open for writing.
Open for writing, but in a fashion that only allows writes into areas of 
the file not previously written.
Execute the file as a script or program.
ACL inheritance is controlled with the following permissions words, which
may only be applied to directories:
Inherit to files.
Inherit to directories.
This flag is only relevant to entries inherited by subdirectories; it
causes the directory_inherit flag to be cleared in the entry that is
inherited, preventing further nested subdirectories from also
inheriting the entry.
The entry is inherited by created items but not considered when processing
the ACL.
The ACL manipulation options are as follows:
The +a mode parses a new ACL entry from the next argument on
the commandline and inserts it into the canonical location in the
ACL. If the supplied entry refers to an identity already listed, the
two entries are combined.
 # ls -le
 -rw-r--r--+ 1 juser  wheel  0 Apr 28 14:06 file1
 # chmod +a "admin allow write" file1
 # ls -le
 -rw-r--r--+ 1 juser  wheel  0 Apr 28 14:06 file1
   owner: juser
   1: admin allow write
 # chmod +a "guest deny read" file1
 # ls -le
 -rw-r--r--+ 1 juser  wheel  0 Apr 28 14:06 file1
   owner: juser
   1: guest deny read
   2: admin allow write
 # chmod +a "admin allow delete" file1
 # ls -le
 -rw-r--r--+ 1 juser  wheel  0 Apr 28 14:06 file1
   owner: juser
   1: guest deny read
   2: admin allow write,delete
 # chmod +a "User 1:allow:read" file
 # ls -le
 -rw-r--r--+ 1 juser  wheel  0 Apr 28 14:06 file1
   owner: juser
   1: guest deny read
   2: User 1 allow read
   3: admin allow write,delete
The +a mode strives to maintain correct canonical form for the ACL.
                 local deny
                 local allow
                 inherited deny
                 inherited allow
By default, chmod adds entries to the top of the local deny and local
allow lists. Inherited entries are added by using the +ai mode.
 # ls -le
 -rw-r--r--+ 1 juser  wheel  0 Apr 28 14:06 file1
   owner: juser
   1: guest deny read
   2: admin allow write,delete
   3: juser inherited deny delete
   4: admin inherited allow delete
   5: backup inherited deny read
   6: admin inherited allow write-security
 # chmod +ai "others allow read" file1
 # ls -le
 -rw-r--r--+ 1 juser  wheel  0 Apr 28 14:06 file1
   owner: juser
   1: guest deny read
   2: admin allow write,delete
   3: juser inherited deny delete
   4: others inherited allow read
   5: admin inherited allow delete
   6: backup inherited deny read
   7: admin inherited allow write-security
When a specific ordering is required, the exact location at which an
entry will be inserted is specified with the +a# mode.
 # ls -le
 -rw-r--r--+ 1 juser  wheel  0 Apr 28 14:06 file1
   owner: juser
   1: guest deny read
   2: admin allow write
 # chmod +a# 2 "others deny read" file1
 # ls -le
 -rw-r--r--+ 1 juser  wheel  0 Apr 28 14:06 file1
   owner: juser
   1: guest deny read
   2: others deny read
   3: admin allow write
The +ai# mode may be used to insert inherited entries at a specific
location. Note that these modes allow non-canonical ACL ordering to
be constructed.
The -a mode is used to delete ACL entries. All entries exactly
matching the supplied entry will be deleted. If the entry lists a
subset of rights granted by an entry, only the rights listed are
removed. Entries may also be deleted by index using the -a# mode.
 # ls -le
 -rw-r--r--+ 1 juser  wheel  0 Apr 28 14:06 file1
   owner: juser
   1: guest deny read
   2: admin allow write,delete
 # chmod -a# 1 file1
 # ls -le
 -rw-r--r--+ 1 juser  wheel  0 Apr 28 14:06 file1
   owner: juser
   1: admin allow write,delete
 # chmod -a "admin allow write" file1
 # ls -le
 -rw-r--r--+ 1 juser  wheel  0 Apr 28 14:06 file1
   owner: juser
   1: admin allow delete
Inheritance is not considered when processing the -a mode; rights and
entries will be removed regardless of their inherited state.
If the user or group name contains spaces you can use ':' as the delimiter
 # chmod +a "User 1:allow:read" file
Individual entries are rewritten using the =a# mode.
 # ls -le
 -rw-r--r--+ 1 juser  wheel  0 Apr 28 14:06 file1
   owner: juser
   1: admin allow delete
 # chmod =a# 1 "admin allow write,chown"
 # ls -le
 -rw-r--r--+ 1 juser  wheel  0 Apr 28 14:06 file1
   owner: juser
   1: admin allow write,chown
This mode may not be used to add new entries.
Reads the ACL information from stdin, as a sequential list
of ACEs, separated by newlines.  If the information parses correctly,
the existing information is replaced.
Returns false if any of the named files have ACLs in non-canonical order.
Removes the 'inherited' bit from all entries in the named file(s) ACLs.
Removes all inherited entries from the named file(s) ACL(s).
Removes the ACL from the named file(s).
The
option is non-standard and its use in scripts is not recommended.
The
utility is expected to be
compatible with the exception of the
symbol
which is not included in that standard.
A
command appeared in
The
utility
allows editing of the user database information associated
with
or, by default, the current user.
The
utility 
change the user's password on Open Directory
systems.  Use the
utility instead.
The
and
utilities behave identically to
(There is only one program.)
The information is formatted and supplied to an editor for changes.
Only the information that the user is allowed to change is displayed.
The options are as follows:
If not specified,
will perform a search for the user record on all available
Open Directory nodes.
When specified,
will edit the user record on the directory node at the given
The user name to use when authenticating to the directory node containing the
user.
Attempt to change the user's shell to
Possible display items are as follows:
user's login name
user's login
user's login group
user's UUID
user's real name
user's office location
user's office phone
user's home phone
user's home directory
user's login shell
The
field is the user name used to access the computer account.
The
field is the number associated with the
field.
Both of these fields should be unique across the system (and often
across a group of systems) as they control file access.
While it is possible to have multiple entries with identical login names
Routines
that manipulate these files will often return only one of the multiple
entries, and that one by random selection.
The
field is the group that the user will be placed in at login.
Since
supports multiple groups (see
this field currently has little special meaning.
This field may be filled in with either a number or a group name (see
The
field is the globally unique identifier (UUID) for the user.
The
field contains the full name of the user.
The user's
is the full
path name where the user
will be placed at login.
The
field is the command interpreter the user prefers.
If the
field is empty, the Bourne shell,
is assumed.
When altering a login shell, and not the super-user, the user
may not change from a non-standard shell or to a non-standard
shell.
Non-standard is defined as a shell not found in
The
field is the path to a picture to be displayed for the user.
User database entries are under the control of
and may be physically located in many different places,
including the local Directory Service node, 
and remote LDAP servers.
This version of
uses Open Directory to change user database information.
It does not interact with the historic flat file
database
The
editor will be used unless the environment variable
is set to
an alternate editor.
When the editor terminates, the information is re-read and used to
update the user database itself.
Only the user, or the super-user, may edit the information associated
with the user.
temporary copy of the data to edit
the list of approved shells
The
utility appeared in
The
utility writes to the standard output three whitespace separated
fields for each input file.
These fields are a checksum
the total number of octets in the file and the file name.
If no file name is specified, the standard input is used and no file name
is written.
The
utility is identical to the
utility, except that it defaults to using historic algorithm 1, as
described below.
It is provided for compatibility only.
The options are as follows:
Use historic algorithms instead of the (superior) default one.
Algorithm 1 is the algorithm used by historic
systems as the
algorithm and by historic
systems as the
algorithm when using the
option.
This is a 16-bit checksum, with a right rotation before each addition;
overflow is discarded.
Algorithm 2 is the algorithm used by historic
systems as the
default
algorithm.
This is a 32-bit checksum, and is defined as follows:
s = sum of all bytes;
Algorithm 3 is what is commonly called the
algorithm.
This is a 32-bit checksum.
Both algorithm 1 and 2 write to the standard output the same fields as
the default algorithm except that the size of the file in bytes is
replaced with the size of the file in blocks.
For historic reasons, the block size is 1024 for algorithm 1 and 512
for algorithm 2.
Partial blocks are rounded up.
The default
used is based on the polynomial used for
error checking
in the networking standard
The
checksum encoding is defined by the generating polynomial:
G(x) = x^32 + x^26 + x^23 + x^22 + x^16 + x^12 +
     x^11 + x^10 + x^8 + x^7 + x^5 + x^4 + x^2 + x + 1
Mathematically, the
value corresponding to a given file is defined by
the following procedure:
The
bits to be evaluated are considered to be the coefficients of a mod 2
polynomial M(x) of degree
These
bits are the bits from the file, with the most significant bit being the most
significant bit of the first octet of the file and the last bit being the least
significant bit of the last octet, padded with zero bits (if necessary) to
achieve an integral number of octets, followed by one or more octets
representing the length of the file as a binary value, least significant octet
first.
The smallest number of octets capable of representing this integer are used.
M(x) is multiplied by x^32 (i.e., shifted left 32 bits) and divided by
G(x) using mod 2 division, producing a remainder R(x) of degree <= 31.
The coefficients of R(x) are considered to be a 32-bit sequence.
The bit sequence is complemented and the result is the CRC.
The default calculation is identical to that given in pseudo-code
in the following
article.
The
utility is expected to conform to
The
utility appeared in
figure out how to clear the screen.
version 5.7 (patch 20081102).
Compare two files byte by byte.
Print differing bytes.
Skip the first SKIP bytes of input.
Skip the first SKIP1 bytes of FILE1 and the first SKIP2 bytes of FILE2.
Output byte numbers and values of all differing bytes.
Compare at most LIMIT bytes.
Output nothing; yield exit status only.
Output version info.
Output this help.
SKIP1 and SKIP2 are the number of bytes to skip in each file.
SKIP values may be followed by the following multiplicative suffixes:
kB 1000, K 1024, MB 1,000,000, M 1,048,576,
GB 1,000,000,000, G 1,073,741,824, and so on for T, P, E, Z, Y.
If a FILE is `-' or missing, read standard input.
Written by Torbjorn Granlund and David MacKenzie.
Report bugs to <bug-gnu-utils@gnu.org>.
This program comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of this program
under the terms of the GNU General Public License.
For more information about these matters, see the file named COPYING.
The full documentation for
is maintained as a Texinfo manual.  If the
and
programs are properly installed at your site, the command
should give you access to the complete manual.
The
command is used to create, check, and display code signatures, as well as
inquire into the dynamic status of signed code in the system.
requires exactly one
option to determine what action is to be performed, as well as any number of
other options to modify its behavior. It can act on any number of objects per invocation,
but performs the same operation on all of them.
accepts single-character (classic) options, as well as GNU-style long
options of the form --name and --name=value. Common options have both
forms; less frequent and specialized options have only long form.
Note that the form --name value (without equal sign) will not work as expected
on options with optional values.
The options are as follows:
When verifying a code signature on code that has a universal ("fat") Mach-O binary,
separately verify each architecture contained. This is the default unless overridden
with the -a (--architecture) option.
When verifying or displaying signatures, explicitly select the Mach-O architecture
given. The
can be specified either by name (e.g. i386) or by number; if by number, a sub-architecture
may be appended separated by a comma.
This option applies only to Mach-O binary code and is ignored for other types.
If the
uses the Mach-O format and contains no code of the given architecture, the command will fail.
The default for verification is --all-architectures, to verify all architectures present.
The default for display is to report on the native architecture of the host system.
When signing,
will always sign all architectures contained in a universal Mach-O file.
When handling versioned bundles such as frameworks, explicitly specify the version
to operate on. This must be one of the names in the "Versions" directory of the bundle.
If not specified,
uses the bundle's default version.
Note that most frameworks delivered with the system have only one version, and thus
this option is irrelevant for them.
There is currently no facility for operating on all versions of a bundle at once.
Display information about the code at the path(s) given. Increasing levels
of verbosity produce more output.
The format is designed to be moderately easy to parse by simple scripts while still
making sense to human eyes.
In addition, the -r, --file-list, --extract-certificates, and --entitlements options can be used to retrieve additional information.
When signing, designates that a detached signature should be written to
the specified file. The code being signed is not modified and need not be
writable.
When verifying, designates a file containing a detached signature to be used
for verification. Any embedded signature in the code is ignored.
When signing a bundle, specifies that nested code content such as helpers, frameworks,
and plug-ins, should be recursively signed in turn. Beware that all signing options you
specify will apply, in turn, to such nested content.
When verifying a bundle, specifies that any nested code content will be recursively
verified as to its full content. By default, verification of nested content is limited
to a shallow investigation that may not detect changes to the nested code.
When displaying a signature, specifies that a list of directly nested code should be
written to the display output. This lists only code directly nested within the subject;
anything nested indirectly will require recursive application of the
command.
When signing, specifies that a detached signature should be generated as with
the --detached option, but that the resulting signature should be written into a system
database, from where it is made automatically available whenever apparently unsigned
code is validated on the system.
Writing to this system database requires elevated process privileges that are
not available to ordinary users.
When signing, causes
to replace any existing signature on the path(s) given. Without this option,
existing signatures will not be replaced, and the signing operation fails.
Constructs and prints the hosting chain of a running program. The
arguments must denote running code (pids etc.) With verbose options, this also
displays the individual dynamic validity status of each element of the hosting chain.
During signing, explicitly specify the unique identifier string that is embedded
in code signatures. If this option is omitted, the identifier is derived from
either the Info.plist (if present), or the filename of the executable being signed,
possibly modified by the --prefix option.
During signing, specifies a set of option flags to be embedded in the code
signature. The value takes the form of a comma-separated list of names (with
no spaces). Alternatively, a numeric value can be used to directly
specify the option mask (CodeDirectory flag word). See OPTION FLAGS below.
Indicates the granularity of code signing. Pagesize must be a power of two.
Chunks of pagesize bytes are separately signed and can thus be independently verified as needed.
As a special case, a pagesize of zero
indicates that the entire code should be signed and verified as a single,
possibly gigantic page. This option only applies to the main executable and has
no effect on the sealing of associated data, including resources.
During signing, indicates that internal requirements should be embedded in the
code path(s) as specified. See "specifying requirements" below.
Defaults will be applied to requirement types that are not explicitly specified;
if you want to defeat such a default, specify "never" for that type.
During display, indicates where to write the code's internal requirements. Use -r-
to write them to standard output.
During verification, indicates that the path(s) given should be verified against
the code requirement specified. If this option is omitted, the code is verified
only for internal integrity and against its own designated requirement.
Sign the code at the path(s) given using this identity. See SIGNING IDENTITIES below.
Sets (with a numeric value) or increments the verbosity level of output. Without
the verbose option, no output is produced upon success, in the classic UNIX style.
If no other options request a different action, the first -v encountered will be
interpreted as --verify instead (and does not increase verbosity).
Requests verification of code signatures.
If other actions (sign, display, etc.) are also requested, -v is interpreted
to mean --verbose.
Instructs
to continue processing path arguments even if processing one fails.
If this option is given, exit due to operational errors is deferred until
all path arguments have been considered. The exit code will then indicate
the most severe failure (or, with equal severity, the first such failure encountered).
During signing, performs almost all signing operations, but does not actually
write the result anywhere. Cryptographic signatures are still generated,
actually using the given signing identity and triggering any access control
checks normally, though the resulting signature is then discarded.
When signing, take the file at the given
and embed its contents in the signature as entitlement data. If the data at
does not already begin with a suitable binary ("blob") header, one is attached automatically.
When displaying a signature, extract any entitlement data from the signature
and write it to the
given. Use "-" to write to standard output.
By default, the binary "blob" header is returned intact; prefix the path with a colon ":"
to automatically strip it off.
If the signature has no entitlement data,
nothing is written (this is not an error).
When displaying a signature, extract the certificates in the embedded certificate chain
and write them to individual files. The
argument is appended with numbers 0, 1, ... to form the filenames, which can be relative
or absolute. Certificate 0 is the leaf (signing) certificate, and as many files are written
as there are certificates in the signature. The files are in ASN.1 (DER) form.
If
is omitted, the default prefix is "codesign" in the current directory.
When signing or displaying a signature,
writes to the given path a list of
files that may have been modified as part of the signing process. This is useful
for installer or patcher programs that need to know what was changed or what files
are needed to make up the "signature" of a program. The file given is appended-to,
with one line per absolute path written. An argument of "-" (single dash) denotes standard
output.
Note that the list may be
somewhat pessimistic - all files not listed are guaranteed to be unchanged by the
signing process, but some of the listed files may not actually have changed.
Also note that changes may have been made to extended attributes of these
files.
During static validation, do not validate the contents of the code's resources.
In effect, this will pass validation on code whose resources have been corrupted
(or inappropriately signed). On large programs, it will also substantially speed
up static validation, since all the resources will not be read into memory.
Obviously, the outcome of such a validation should be considered on its merits.
During signing, only search for the signing identity in the keychain file
specified. This can be used to break any matching ties if you have multiple
similarly-named identities in several keychains on the user's search list.
Note that the standard keychain search path is still consulted while constructing
the certificate chain being embedded in the signature.
Note that
will not be searched to resolve the signing identity's certificate chain unless it
is also on the user's keychain search list.
If no explicit unique identifier is specified (using the -i option), and if
the implicitly generated identifier does not contain any dot (.) characters,
then the given string is prefixed to the identifier before use. If the implicit
identifier contains a dot, it is used as-is. Typically,
this is used to deal with command tools without Info.plists, whose default
identifier is simply the command's filename; the conventional prefix used
is com.domain. (note that the final dot needs to be explicit).
When re-signing code that is already signed, reuse some information from the old signature.
If new data is specified explicitly, it is preferred.
You still need to specify the -f (--force) option to enable overwriting signatures at all.
If this option is absent, any old signature has no effect on the signing process.
This option takes a comma-separated list of names, which you may reasonably abbreviate:
Preserve the signing identifier (--identifier) instead of generating a default identifier.
Preserve the entitlement data (--entitlements).
Preserve the internal requirements (--requirements option), including any explicit Designated
Requirement. Note that all internal requirements are preserved or regenerated as a whole; you
cannot pick and choose individual elements with this option.
For historical reasons, this option can be given without a value, which preserves all
of these values as presently known. This use is deprecated and will eventually be removed;
always specify an explicit list of preserved items.
If this option is given without a value, a default server provided by Apple is used.
Note that this server may not support signatures made with identities not furnished by Apple.
If the timestamp authority service cannot be contacted over the Internet, or it malfunctions
If this option is not given at all, a system-specific default behavior is invoked.
This may result in some but not all code signatures being timestamped.
In the first synopsis form,
attempts to sign the code objects at the
given, using the
provided. Internal
and
are embedded if requested. Internal requirements not specified may be assigned suitable
default values. Defaulting applies separately to each type of internal requirement.
If an
is explicitly given, it is sealed into all
Otherwise, each path derives its
independently from its Info.plist or pathname.
Code nested within bundle directories
option is given, in which case any unsigned nested code will be recursively signed
before proceeding, using the same signing options and parameters. If the
option is given, any existing top-level signature is replaced, subject to any
options also present. Combining the
and
options results in forcible replacement of all signatures within the target bundle.
In the second synopsis form,
verifies the code signatures on all the
given. The verification confirms that the code at those
is signed, that the signature is valid, and that all sealed components are
unaltered. If a
is given, each
is also checked against this requirement (but see DIAGNOSTICS below).
If verbose verification is requested, the program is also checked against its own
designated requirement, which should never fail for a properly signed program.
If a
begins with a decimal digit, it is interpreted as the process id of a running
process in the system, and dynamic validation is performed on that process instead.
This checks the code's dynamic status and just enough static data to close the
nominal security envelope. Add at least one level of verbosity to also perform
a full static check.
In the third synopsis form,
displays the contents of the signatures on the
given. More information is displayed as the verbosity level increases.
This form may not completely verify the signatures
on the
though it may perform some verification steps in the process of obtaining information
about the
If the
option is given, internal requirements will be extracted from the
and written to
specify a dash "-" to write to standard output. If the code does not contain
an explicit designated requirement, the implied one will be retrieved and written
out as a source comment.
If the
option is given, embedded entitlement data will be extracted likewise and written to
the file specified.
In the fourth synopsis form,
constructs the hosting path for each
given and writes it, one host per line, to standard output. The hosting path is the
chain of code signing hosts starting with the most specific code known to be running,
and ending with the root of trust (the kernel). If the
option is given, the dynamic validity status of each host is also displayed, separated
from the path by a tab character.
Note that hosting chains can at times be constructed for invalid or even unsigned code,
and the output of this form of the
command should not be taken as a statement of formal code validity. Only
can do that; and in fact, formal verification constructs the hosting chain as part of
its operation (but does not display it).
To be used for code signing, a digital identity must be stored in a keychain that
is on the calling user's keychain search list.
All keychain sources are supported if properly configured. In particular, it is
possible to sign code with an identity stored on a supported smart card.
If your signing identity is stored in a different form, you need to make it available
in keychain form to sign code with it.
If the
argument is used,
is only looked-for in the
specific keychain given. This is meant to help disambiguate references to identities.
Even in that case, the full keychain search list is still
consulted for additional certificates needed to complete the signature.
The
If such a preference exists, it directly names the identity used.
Otherwise, the identity is located by searching
string given. If there are multiple matches, the operation fails and no signing
is performed; however, an exact match is preferred over a partial match.
These comparisons are case sensitive.
Multiple instances of the exactly same certificate in multiple keychains are tolerated
as harmless.
If
consists of exactly forty hexadecimal digits, it is instead
interpreted as the SHA-1 hash of the certificate part of the desired identity.
In this case, the identity's subject name is not considered.
a particular signing identity regardless of name. Identity preferences are global
are very explicit and local. These choices, combined with what is placed into Xcode
designation of signing identities.
If
Ad-hoc signing does not use an identity at all, and identifies exactly one instance
of code. Significant restrictions apply to the use of ad-hoc signed code; consult
documentation before using this.
will attempt to embed the entire certificate chain documenting the signing identity
in the code signature it generates, including any intermediate certificates and
the anchor certificate. It looks for those in the keychain search list of the user
performing the signing operation. If it cannot generate the entire certificate chain,
signing may still succeed, but verification may fail if the verifying code does not
The
arguments (-r and -R) can be given in various forms. A plain text argument is taken
to be a path to a file containing the requirement(s).
will accept both binary files containing properly compiled requirements code, and source files
that are automatically compiled before use.
An argument of "-" requests that the requirement(s) are read from standard input.
Finally, an argument that begins with an equal sign "=" is taken as a literal
requirements source text, and is compiled accordingly for use.
When signing, a set of option flags can be specified to change the behavior
of the system when using the signed code. The following flags are recognized
by
other flags may exist at the API level. Note that you can specify any valid
flags by giving a (single) numeric value instead of a list of option names.
Forces the signed code's kill flag to be set when the code begins execution.
Code with the kill flag set will die when it becomes dynamically invalid. It is
therefore safe to assume that code marked this way, once validated, will have continue
to have a valid identity while alive.
Forces the signed code's hard flag to be set when the code begins execution.
The hard flag is a hint to the system that the code prefers to be denied
access to resources if gaining such access would invalidate its identity.
Marks the code as capable of hosting guest code. You must set this option
if you want the code to act as a code signing host, controlling subsidiary
("guest") code. This flag is set automatically if you specify an internal
guest requirement.
Forces any validation of the code to consider expiration of the certificates
involved. Code signatures generated with this flag will fail to verify once any of
the certificates in the chain has expired, regardless of the intentions of the
verifier. Note that this flag does not affect any other checks that may cause
signature validation to fail, including checks for certificate revocation.
Forces the signed code's library validation flag to be set when the code begins execution.
The code will only be able to link against system libraries and frameworks, or libraries, frameworks, 
and plug-in bundles with the same team identifier embedded in the code directory. 
Team identifiers are automatically recorded in signatures when signing with suitable Apple-issued signing certificates. 
Note that the flag is not supported for i386 binaries, and only applies to the main executable. 
The flag has no effect when set on frameworks and libraries.
Note that code can set the hard and kill flags on itself at any time. The signing
options only affect their initial state. Once set by any means, these flags
cannot be cleared for the lifetime of the code. Therefore, specifying such flags
as signing options guarantees that they will be set whenever the signed code runs.
If the code being signed has an Info.plist that contains a key named CSFlags,
the value of that key is taken as the default value for the options. The value
of CSFlags can be a string in the same form as the --options option, or an
integer number specifying the absolute numeric value. Note however that while you
can abbreviate flag names on the command lines, you must spell them out in the Info.plist.
To sign application Terminal.app with a signing identity named "authority":
To sign the command-line tool "helper" with the same identity, overwriting
any existing signature, using the signing identifier "com.mycorp.helper",
and embedding a custom designated requirement
To verify the signature on Terminal.app and produce some verbose output:
To verify the dynamic validity of process 666:
To display all information about Terminal.app's code signature:
To extract the internal requirements from Terminal.app to standard output:
exits 0 if all operations succeed. This indicates that all codes were
signed, or all codes verified properly as requested. If a signing or verification
operation fails, the exit code is 1. Exit code 2 indicates invalid arguments
or parameters. Exit code 3 indicates that during verification, all path(s) were
properly signed but at least one of them failed to satisfy the requirement specified
with the
option.
For verification, all path arguments are always investigated before the program exits.
For all other operations, the program exits upon the first error encountered,
and any further path arguments are ignored, unless the --continue option was
specified, in which case
will defer the failure exit until after it has attempted to process all path
arguments in turn.
When a signing operation fails for a particular code, the code may already have been modified
in certain ways by adding requisite signature data. Such information will not
change the operation of the code, and the code will not be considered signed even with
these pieces in place. You may repeat the signing operation without difficulty.
Note however that a previous valid signature may have been effectively destroyed
if you specified the -f option.
If you require atomicity of signing stricter than provided by
you need to make an explicit copy of your code and sign that.
If the CODESIGN_ALLOCATE environment variable is set, it identifies a substitute codesign_allocate
tool used to allocate space for code signatures in Mach-O binaries. This is used by Xcode SDK
distributions to provide architectural support for non-native platforms such as iPhones.
The system will not accept such substitutes unless they are specially signed (by Apple).
System-wide database of detached code signatures for unsigned code.
The
command first appeared in Mac OS 10.5.0 (Leopard).
Some options only apply to particular operations, and
ignores them (without complaining)
if you specify them for an operation for which they have no meaning.
The --preserve-metadata option used to take no value, and varied across releases in what exactly
it preserved. The ensuing confusion is still with you if you need to make backward-compatible
scripts.
The dual meaning of the
option, indicating either verbosity or verification, confuses some people. If you find it confusing,
use the unambiguous long forms
and
instead.
The Xcode build system invokes
automatically if the CODE_SIGN_IDENTITY build variable is set.
You can express any combination of
options with additional build variables there.
is fundamentally a shell around the code signing APIs, and performs nothing of the underlying work.
Replacing it with older or newer versions is unlikely to have a useful effect.
has several operations and options that are purposely left undocumented in this manual page because they
are either experimental (and subject to change at any time), or unadvised to the unwary.
The interminably curious are referred to the published source code.
The
utility filters out reverse (and half reverse) line feeds so that the output is
in the correct order with only forward and half forward line
feeds, and replaces white-space characters with tabs where possible.
This can be useful in processing the output of
and
The
utility reads from the standard input and writes to the standard output.
The options are as follows:
Do not output any backspaces, printing only the last character
written to each column position.
Forward half line feeds are permitted (``fine'' mode).
Normally characters printed on a half line boundary are printed
on the following line.
Do not output multiple spaces instead of tabs (default).
Buffer at least
lines in memory.
By default, 128 lines are buffered.
Force unknown control sequences to be passed through unchanged.
Normally,
will filter out any control sequences from the input other than those
recognized and interpreted by itself, which are listed below.
Output multiple spaces instead of tabs.
The control sequences for carriage motion that
understands and their decimal values are listed in the following
table:
reverse line feed (escape then 7)
half reverse line feed (escape then 8)
half forward line feed (escape then 9)
moves back one column (8); ignored in the first column
(13)
forward line feed (10); also does carriage return
shift to normal character set (15)
shift to alternate character set (14)
moves forward one column (32)
moves forward to next tab stop (9)
reverse line feed (11)
All unrecognized control characters and escape sequences are
discarded.
The
utility keeps track of the character set as characters are read and makes
sure the character set is correct when they are output.
If the input attempts to back up to the last flushed line,
will display a warning message.
The
and
environment variables affect the execution of
as described in
The
utility conforms to
A
command
appeared in
The
utility provides virtual half-line and reverse line feed sequences
for terminals without such capability, and on which overstriking
is destructive.
are placed on new lines in between the normal output lines.
The following options are available:
Suppress all underlining.
This option is especially useful for previewing
tables from
Cause all half-lines to be printed, effectively double spacing the output.
Normally, a minimal space output format is used which will suppress empty
lines.
The program never suppresses two consecutive empty lines, however.
The
option is useful for sending output to the line printer when the output
contains superscripts and subscripts which would otherwise be invisible.
The
and
environment variables affect the execution of
as described in
A typical use of
would be
Should fold underlines onto blanks even with the
option so that
a true underline character would show.
Can't back up more than 102 lines.
General overstriking is lost;
as a special case
overstruck with
or underline becomes
Lines are trimmed to 132 characters.
Some provision should be made for processing superscripts and subscripts
in documents which are already double-spaced.
Characters that take up more than one column position may not be
underlined correctly.
The
command appeared in
The
utility converts a collation sequence source definition
into a format usable by the
and
functions.
It is used to define the many ways in which
strings can be ordered and collated.
The
function transforms
its first argument and places the result in its second
argument.
The transformed string is such that it can be
correctly ordered with other transformed strings by using
or
The
function transforms its arguments and does a
comparison.
The
utility reads the collation sequence source definition
from the standard input and stores the converted definition in filename.
The output file produced contains the
database with collating sequence information in a form
usable by system commands and routines.
The following options are available:
Set directory name where
files can be found, current directory by default.
Set output file name,
by default.
The collation sequence definition specifies a set of collating elements and
the rules defining how strings containing these should be ordered.
This is most useful for different language definitions.
The specification file can consist of three statements:
and
Of these, only the
statement is required.
When
or
is
supplied, these statements must be ordered as above.
Any
statements after the order statement are ignored.
Lines in the specification file beginning with a
are
treated as comments and are ignored.
Blank lines are also
ignored.
defines where a mapping of the character
and collating element symbols to the actual
character encoding can be found.
The format of
is shown below.
Symbol
names are separated from their values by TAB or
SPACE characters.
Symbol-value can be specified in
representation, and can be only one character in length.
symbol-name1 symbol-value1
symbol-name2 symbol-value2
Symbol names cannot be specified in
fields.
The
statement is optional.
substitute "symbol" with "repl_string"
The
statement substitutes the character
with the string
Symbol names cannot be specified in
field.
The
statement is optional.
is a list of symbols, separated by semi colons, that defines the
collating sequence.
The
special symbol
specifies, in a short-hand
form, symbols that are sequential in machine code
order.
An order list element
can be represented in any one of the following
ways:
The symbol itself (for example,
for the lower-case letter
The symbol in octal representation (for example,
for the letter
The symbol in hexadecimal representation (for example,
for the letter
The symbol name as defined in the
file (for example,
for
record in
If character map name have
character, it must be escaped as
single
must be escaped as
Symbols
are permitted in its usual C-language meaning.
The symbol chain (for example:
The symbol range (for example,
Comma-separated symbols, ranges and chains enclosed in parenthesis (for example
are assigned the
same primary ordering but different secondary
ordering.
Comma-separated symbols, ranges and chains enclosed in curly brackets (for example
are assigned the same primary ordering only.
The backslash character
is used for continuation.
In this case, no characters are permitted
after the backslash character.
The
utility exits with the following values:
No errors were found and the output was successfully created.
Errors were found.
The standard shared location for collation orders
under the locale
The
utility removes selected columns from the lines of a file.
A column is defined as a single character in a line.
Input is read from the standard input.
Output is written to the standard output.
If only the
column is specified, columns numbered less than the
column will be written.
If both
and
columns are specified, columns numbered less than the
column
or greater than the
column will be written.
Column numbering starts with one, not zero.
Tab characters increment the column count to the next multiple of eight.
Backspace characters decrement the column count by one.
The
and
environment variables affect the execution of
as described in
The
command appeared in
The
utility formats its input into multiple columns.
Rows are filled before columns.
Input is taken from
operands, or, by default, from the standard input.
Empty lines are ignored.
The options are as follows:
Output is formatted for a display
wide.
Specify a set of characters to be used to delimit columns for the
option.
Determine the number of columns the input contains and create a table.
Columns are delimited with whitespace, by default, or with the characters
supplied using the
option.
Useful for pretty-printing displays.
Fill columns before filling rows.
The
and
environment variables affect the execution of
as described in
The
command appeared in
Input lines are limited to
(2048) bytes in length.
The
utility reads
and
which should be
sorted lexically, and produces three text
columns as output: lines only in
lines only in
and lines in both files.
The filename ``-'' means the standard input.
The following options are available:
Suppress printing of column 1.
Suppress printing of column 2.
Suppress printing of column 3.
Case insensitive comparison of lines.
Each column will have a number of tab characters prepended to it
equal to the number of lower numbered columns that are being printed.
For example, if column number two is being suppressed, lines printed
in column number one will not have any tabs preceding them, and lines
printed in column number three will have one.
The
utility assumes that the files are lexically sorted; all characters
participate in line comparisons.
The
and
environment variables affect the execution of
as described in
The
utility conforms to
The
option is an extension to the
standard.
A
command appeared in
Input lines are limited to
(2048) characters in length.
The
utility reduces the size of files using adaptive Lempel-Ziv coding.
Each
is renamed to the same name plus the extension
A
argument with a
extension will be ignored except it will cause an
error exit after other arguments are processed.
If compression would not reduce the size of a
the file is ignored.
The
utility restores compressed files to their original form, renaming the
files by deleting the
extensions.
A file specification need not include the file's
extension.
If a file's name in its file system does not have a
extension, it will not be uncompressed and it will cause
an error exit after other arguments are processed.
If renaming the files would cause files to be overwritten and the standard
input device is a terminal, the user is prompted (on the standard error
output) for confirmation.
If prompting is not possible or confirmation is not received, the files
are not overwritten.
As many of the modification time, access time, file flags, file mode,
user ID, and group ID as allowed by permissions are retained in the
new file.
If no files are specified or a
argument is a single dash
the standard input is compressed or uncompressed to the standard output.
If either the input and output files are not regular files, the checks for
reduction in size and file overwriting are not performed, the input file is
not removed, and the attributes of the input file are not retained
in the output file.
The options are as follows:
The code size (see below) is limited to
which must be in the range 9..16.
The default is 16.
Compressed or uncompressed output is written to the standard output.
No files are modified.
The
option is ignored.
Compression is attempted even if the results will be larger than the
original.
Files are overwritten without prompting for confirmation.
Also, for
files are compressed even if they are not actually reduced in size.
Print the percentage reduction of each file.
Ignored by
or if the
option is also used.
The
utility uses a modified Lempel-Ziv algorithm.
Common substrings in the file are first replaced by 9-bit codes 257 and up.
When code 512 is reached, the algorithm switches to 10-bit codes and
continues to use more bits until the
limit specified by the
option or its default is reached.
After the limit is reached,
periodically checks the compression ratio.
If it is increasing,
continues to use the existing code dictionary.
However, if the compression ratio decreases,
discards the table of substrings and rebuilds it from scratch.
This allows
the algorithm to adapt to the next "block" of the file.
The
option is unavailable for
since the
parameter specified during compression
is encoded within the output, along with
a magic number to ensure that neither decompression of random data nor
recompression of compressed data is attempted.
The amount of compression obtained depends on the size of the
input, the number of
per code, and the distribution of common substrings.
Compression is generally much better than that achieved by Huffman
coding (as used in the historical command pack), or adaptive Huffman
coding (as used in the historical command compact), and takes less
time to compute.
The
utility exits 2 if attempting to compress a file would not reduce its size
and the
option was not specified and if no other error occurs.
The
and
utilities conform to
The
command appeared in
Some of these might be considered otherwise-undocumented features.
If the utility does not compress a file because doing so would not
reduce its size, and a file of the same name except with an
extension exists, the named file is not really ignored as stated above;
it causes a prompt to confirm the overwriting of the file with the extension.
If the operation is confirmed, that file is deleted.
If an empty file is compressed (using
the resulting
file is also empty.
That seems right, but if
is then used on that file, an error will occur.
Both utilities: If a
argument is used and the utility prompts the user, the standard input
is taken as the user's reply to the prompt.
Both utilities:
If the specified file does not exist, but a similarly-named one with (for
or without (for
a
extension does exist, the utility will waste the user's time by not
immediately emitting an error message about the missing file and
continuing.
Instead, it first asks for confirmation to overwrite
the existing file and then does not overwrite it.
formalization and abstraction of the systems that people like Andreas
have developed independently.
The configuration system employed here was developed in the context of
was taken by all those other systems mentioned in the previous
configuration data, as well as publicly accessible methods for
querying and setting (yes, actually re-writing) the configuration
reading) is merely a front-end for those methods.  If you wish, you
may create alternate front-ends.
including references to complex data structures.  It must, however, be
0) value.
configuration of a single module.  On the command line, specify which
module's configuration you're interested in, and pass options to get
supported:
Specifies the name of the module to configure (required).
be 1 if the feature is enabled, 0 if the feature is not enabled, or
empty if the feature is unknown.  When no feature name is supplied,
the names and values of all known features will be shown.
When no config name is supplied, the names and values of all known
config entries will be shown.
as either 1 or 0.
evaluated as perl code before being stored.  This allows moderately
complicated data structures to be stored.  For really complicated
structures, you probably shouldn't use this command-line interface,
Prints a help message, including a few examples, and exits.
Ken Williams, kwilliams@cpan.org
Copyright (c) 1999, Ken Williams.  All rights reserved.
it under the same terms as Perl itself.
formalization and abstraction of the systems that people like Andreas
have developed independently.
The configuration system emplyed here was developed in the context of
was taken by all those other systems mentioned in the previous
configuration data, as well as publically accessible methods for
querying and setting (yes, actually re-writing) the configuration
reading) is merely a front-end for those methods.  If you wish, you
may create alternate front-ends.
including references to complex data structures.  It must, however, be
0) value.
configuration of a single module.  On the command line, specify which
module's configuration you're interested in, and pass options to get
supported:
Specifies the name of the module to configure (required).
be 1 if the feature is enabled, 0 if the feature is not enabled, or
empty if the feature is unknown.  When no feature name is supplied,
the names and values of all known features will be shown.
When no config name is supplied, the names and values of all known
config entries will be shown.
as either 1 or 0.
evaluated as perl code before being stored.  This allows moderately
complicated data structures to be stored.  For really complicated
structures, you probably shouldn't use this command-line interface,
Prints a help message, including a few examples, and exits.
Ken Williams, kwilliams@cpan.org
Copyright (c) 1999, Ken Williams.  All rights reserved.
it under the same terms as Perl itself.
formalization and abstraction of the systems that people like Andreas
have developed independently.
The configuration system employed here was developed in the context of
was taken by all those other systems mentioned in the previous
configuration data, as well as publicly accessible methods for
querying and setting (yes, actually re-writing) the configuration
reading) is merely a front-end for those methods.  If you wish, you
may create alternate front-ends.
including references to complex data structures.  It must, however, be
0) value.
configuration of a single module.  On the command line, specify which
module's configuration you're interested in, and pass options to get
supported:
Specifies the name of the module to configure (required).
be 1 if the feature is enabled, 0 if the feature is not enabled, or
empty if the feature is unknown.  When no feature name is supplied,
the names and values of all known features will be shown.
When no config name is supplied, the names and values of all known
config entries will be shown.
as either 1 or 0.
evaluated as perl code before being stored.  This allows moderately
complicated data structures to be stored.  For really complicated
structures, you probably shouldn't use this command-line interface,
Prints a help message, including a few examples, and exits.
Ken Williams, kwilliams@cpan.org
Copyright (c) 1999, Ken Williams.  All rights reserved.
it under the same terms as Perl itself.
generates a LocalKDC and provisions LKDC service principals.
The script is non-destructive and can be run multiple times.
does not own, but references the following files:
first appeared in version 10.5 of Mac OS X.
See Module::CoreList for one.
lists all versions of the given module (or the matching modules, in case you
used a module regexp) in the perls Module::CoreList knows about.
finds the first perl version where a module has been released by
date, and not by version number (as is the default).
Given two versions of perl, this prints a human-readable table of all module
changes between the two.  The output format may change in the future, and is
all of the help
lists all of the perl release versions we got the CoreList for.
you get a list of all the modules and their respective versions.
In module filtering context, it can be used as Perl version filter.
lists all of the perl releases and when they were released
If you pass a perl version you get the release date for that version only.
lists the first version bundle of each named feature given
the version number of the Unicode Character Database bundled with the
requested perl versions.
This program is distributed under the same terms as perl itself.
See Module::CoreList for one.
lists all versions of the given module (or the matching modules, in case you
used a module regexp) in the perls Module::CoreList knows about.
finds the first perl version where a module has been released by
date, and not by version number (as is the default).
Given two versions of perl, this prints a human-readable table of all module
changes between the two.  The output format may change in the future, and is
all of the help
lists all of the perl release versions we got the CoreList for.
you get a list of all the modules and their respective versions.
In module filtering context, it can be used as Perl version filter.
lists all of the perl releases and when they were released
If you pass a perl version you get the release date for that version only.
the version number of the Unicode Character Database bundled with the
requested perl versions.
This program is distributed under the same terms as perl itself.
See Module::CoreList for one.
lists all versions of the given module (or the matching modules, in case you
used a module regexp) in the perls Module::CoreList knows about.
finds the first perl version where a module has been released by
date, and not by version number (as is the default).
Given two versions of perl, this prints a human-readable table of all module
changes between the two.  The output format may change in the future, and is
all of the help
lists all of the perl release versions we got the CoreList for.
you get a list of all the modules and their respective versions.
In module filtering context, it can be used as Perl version filter.
lists all of the perl releases and when they were released
If you pass a perl version you get the release date for that version only.
lists the first version bundle of each named feature given
the version number of the Unicode Character Database bundled with the
requested perl versions.
This program is distributed under the same terms as perl itself.
In the first synopsis form, the
utility copies the contents of the
to the
In the second synopsis form,
the contents of each named
is copied to the destination
The names of the files themselves are not changed.
If
detects an attempt to copy a file to itself, the copy will fail.
The following options are available:
Same as 
options. Preserves structure and attributes of files
but not directory structure.
If the destination file cannot be opened, remove it and
create a new file, without prompting for confirmation
regardless of its permissions.
(The
option overrides any previous
option.)
The target file is not unlinked before the copy.
Thus, any existing access rights will be retained.
If the
option is specified, symbolic links on the command line are followed.
(Symbolic links encountered in the tree traversal are not followed.)
Cause
to write a prompt to the standard error output before copying a file
that would overwrite an existing file.
If the response from the standard input begins with the character
or
the file copy is attempted.
(The
option overrides any previous
option.)
If the
option is specified, all symbolic links are followed.
Do not overwrite an existing file.
(The
option overrides any previous
or
options.)
If the
option is specified, no symbolic links are followed.
This is the default.
Cause
to preserve the following attributes of each source
file in the copy: modification time, access time,
file flags, file mode, user ID, and group ID, as allowed by permissions.
Access Control Lists (ACLs) and Extended Attributes (EAs),
including resource forks, will also be preserved.
If the user ID and group ID cannot be preserved, no error message
is displayed and the exit value is not altered.
If the source file has its set-user-ID bit on and the user ID cannot
be preserved, the set-user-ID bit is not preserved
in the copy's permissions.
If the source file has its set-group-ID bit on and the group ID cannot
be preserved, the set-group-ID bit is not preserved
in the copy's permissions.
If the source file has both its set-user-ID and set-group-ID bits on,
and either the user ID or group ID cannot be preserved, neither
the set-user-ID nor set-group-ID bits are preserved in the copy's
permissions.
If
designates a directory,
copies the directory and the entire subtree connected at that point.
If the
ends in a
the contents of the directory are copied rather than the
directory itself.
This option also causes symbolic links to be copied, rather than
indirected through, and for
to create special files rather than copying them as normal files.
Created directories have the same mode as the corresponding source
directory, unmodified by the process' umask.
In
mode,
will continue copying even if errors are detected. 
Note that
copies hard-linked files as separate files.
If you need to preserve hard links, consider using
or
instead.
Cause
to be verbose, showing files as they are copied.
Do not copy Extended Attributes (EAs) or resource forks.
For each destination file that already exists, its contents are
overwritten if permissions allow.
Its mode, user ID, and group
ID are unchanged unless the
option was specified.
In the second synopsis form,
must exist unless there is only one named
which is a directory and the
flag is specified.
If the destination file does not exist, the mode of the source file is
used as modified by the file mode creation mask
see
If the source file has its set-user-ID bit on, that bit is removed
unless both the source file and the destination file are owned by the
same user.
If the source file has its set-group-ID bit on, that bit is removed
unless both the source file and the destination file are in the same
group and the user is a member of that group.
If both the set-user-ID and set-group-ID bits are set, all of the above
conditions must be fulfilled or both bits are removed.
Appropriate permissions are required for file creation or overwriting.
Symbolic links are always followed unless the
flag is set, in which case symbolic links are not followed, by default.
The
or
flags (in conjunction with the
flag) cause symbolic links to be followed as described above.
The
and
options are ignored unless the
option is specified.
In addition, these options override each other and the
command's actions are determined by the last one specified.
If
receives a
(see the
argument for
signal, the current input and output file and the percentage complete
will be written to the standard output.
Historic versions of the
utility had a
option.
This implementation supports that option;
however, its use is strongly discouraged,
as it does not correctly copy special files, symbolic links, or fifo's.
The
and
options are non-standard and their use in scripts is not recommended.
In legacy mode,
will override
Also, under the
option, the target file is always unlinked before the copy.
Thus, new access rights will always be set.
In
mode, copying will terminate if an error is encountered.
For more information about legacy mode, see
The
command is expected to be
compatible.
A
command appeared in
Shows the primary maintainers for the specified modules.
Runs a `make clean` in the specified module's directories.
Show the module details.
Force the specified action, when it normally would have failed. Use this
to install a module even if its tests fail. When you use this option,
this since you might end up with multiple scripts trying to muck in the
same directory. This isn't so much of a concern if you're loading a special
Downloads to the current directory the latest distribution of the module.
Download to the current directory the latest distribution of the
modules, unpack each distribution, and create a git repository for each
distribution.
distribution.
of the other options and arguments.
Install the specified modules.
for checking the configuration as well as using the dump as a starting point
for a new, custom configuration.
List all installed modules wth their versions
List the modules by the specified authors.
Make the specified modules.
Show the out-of-date modules.
Ping the configured mirrors
Find the best mirrors you could be using (but doesn't configure them just yet)
Run a `make test` on the specified modules.
Do not test modules. Simply install them.
Upgrade all installed modules. Blindly doing this can really break things,
so keep a backup.
Print detailed information about the cpan client.
Turn on cpan warnings. This checks various things, like directory permissions,
and tells you about problems you might have.
before it processes the command-line arguments. For instance, if you always
The script exits with zero if it thinks that everything worked, or a 
positive number if it thinks that something failed. Note, however, that
in some cases it has to divine a failure by the output of things it does
not control. For now, the exit codes are vague:
* one shot configuration values from the command line
* none noted
Most behaviour, including environment variables and configuration,
This code is in Github:
Jim Brandt suggest and provided the initial implementation for the
up-to-date and Changes features.
where this script ends up with a .bat extension
You may redistribute this under the same terms as Perl itself.
you specify, including its prerequisites. These packages can then be
installed using the corresponding package manager for the format.
Note, you can also do this interactively from the default shell,
as well as the documentation of your format of choice for any format
specific documentation.
Options:
Examples:
Some modules you'd rather not package. Some because they
are part of core-perl and you dont want a new package.
Some because they won't build on your system. Some because
your package manager of choice already packages them for you.
lists that catch common cases. You can use these built-in lists
if you like, or supply your own if need be.
You can use this list of regexes to ignore modules matching
to be listed as prerequisites of a package. Particularly useful
if they are bundled with core-perl anyway and they have known
issues building.
You can use this list of regexes to disable building of these
modules altogether.
CPANPLUS::Dist, CPANPLUS::Module, CPANPLUS::Shell::Default,
This module by Jos Boumans <kane@cpan.org>.
under the same terms as Perl itself.
you specify, including its prerequisites. These packages can then be
installed using the corresponding package manager for the format.
Note, you can also do this interactively from the default shell,
as well as the documentation of your format of choice for any format
specific documentation.
Options:
Examples:
Some modules you'd rather not package. Some because they
are part of core-perl and you dont want a new package.
Some because they won't build on your system. Some because
your package manager of choice already packages them for you.
lists that catch common cases. You can use these built-in lists
if you like, or supply your own if need be.
You can use this list of regexes to ignore modules matching
to be listed as prerequisites of a package. Particularly useful
if they are bundled with core-perl anyway and they have known
issues building.
You can use this list of regexes to disable building of these
modules altogether.
CPANPLUS::Dist, CPANPLUS::Module, CPANPLUS::Shell::Default,
This module by Jos Boumans <kane@cpan.org>.
under the same terms as Perl itself.
you specify, including its prerequisites. These packages can then be
installed using the corresponding package manager for the format.
Note, you can also do this interactively from the default shell,
as well as the documentation of your format of choice for any format
specific documentation.
Options:
Examples:
Some modules you'd rather not package. Some because they
are part of core-perl and you dont want a new package.
Some because they won't build on your system. Some because
your package manager of choice already packages them for you.
lists that catch common cases. You can use these built-in lists
if you like, or supply your own if need be.
You can use this list of regexes to ignore modules matching
to be listed as prerequisites of a package. Particularly useful
if they are bundled with core-perl anyway and they have known
issues building.
You can use this list of regexes to disable building of these
modules altogether.
CPANPLUS::Dist, CPANPLUS::Module, CPANPLUS::Shell::Default,
This module by Jos Boumans <kane@cpan.org>.
under the same terms as Perl itself.
Shows the primary maintainers for the specified modules.
Runs a `make clean` in the specified module's directories.
Show the module details. This prints one line for each out-of-date module
version.
Force the specified action, when it normally would have failed. Use this
to install a module even if its tests fail. When you use this option,
this since you might end up with multiple scripts trying to muck in the
same directory. This isn't so much of a concern if you're loading a special
Downloads to the current directory the latest distribution of the module.
Download to the current directory the latest distribution of the
modules, unpack each distribution, and create a git repository for each
distribution.
distribution.
of the other options and arguments.
Install the specified modules.
for checking the configuration as well as using the dump as a starting point
for a new, custom configuration.
List the modules by the specified authors.
Make the specified modules.
Show the out-of-date modules.
Run a `make test` on the specified modules.
The script exits with zero if it thinks that everything worked, or a 
positive number if it thinks that something failed. Note, however, that
in some cases it has to divine a failure by the output of things it does
not control. For now, the exit codes are vague:
* one shot configuration values from the command line
* none noted
Most behaviour, including environment variables and configuration,
This code is in Github:
Jim Brandt suggest and provided the initial implementation for the
up-to-date and Changes features.
where this script ends up with a .bat extension
You may redistribute this under the same terms as Perl itself.
Shows the primary maintainers for the specified modules.
Runs a `make clean` in the specified module's directories.
Show the module details.
Force the specified action, when it normally would have failed. Use this
to install a module even if its tests fail. When you use this option,
this since you might end up with multiple scripts trying to muck in the
same directory. This isn't so much of a concern if you're loading a special
Downloads to the current directory the latest distribution of the module.
Download to the current directory the latest distribution of the
modules, unpack each distribution, and create a git repository for each
distribution.
distribution.
of the other options and arguments.
Install the specified modules.
for checking the configuration as well as using the dump as a starting point
for a new, custom configuration.
List all installed modules wth their versions
List the modules by the specified authors.
Make the specified modules.
Show the out-of-date modules.
Ping the configured mirrors
Find the best mirrors you could be using (but doesn't configure them just yet)
Run a `make test` on the specified modules.
Do not test modules. Simply install them.
Upgrade all installed modules. Blindly doing this can really break things,
so keep a backup.
Print detailed information about the cpan client.
Turn on cpan warnings. This checks various things, like directory permissions,
and tells you about problems you might have.
before it processes the command-line arguments. For instance, if you always
The script exits with zero if it thinks that everything worked, or a 
positive number if it thinks that something failed. Note, however, that
in some cases it has to divine a failure by the output of things it does
not control. For now, the exit codes are vague:
* one shot configuration values from the command line
* none noted
Most behaviour, including environment variables and configuration,
This code is in Github:
Jim Brandt suggest and provided the initial implementation for the
up-to-date and Changes features.
where this script ends up with a .bat extension
You may redistribute this under the same terms as Perl itself.
from the command line. If it's invoked without arguments, an interactive
shell is executed by default.
Optionally, it can take a single-letter switch and one or more argument,
to perform the associated action on each arguments.  A summary of the
Example: To skip a module's tests,
for an explanation to their meanings.
Example: To download a module's tarball to the current directory,
from the command line. If it's invoked without arguments, an interactive
shell is executed by default.
Optionally, it can take a single-letter switch and one or more argument,
to perform the associated action on each arguments.  A summary of the
Example: To skip a module's tests,
for an explanation to their meanings.
Example: To download a module's tarball to the current directory,
from the command line. If it's invoked without arguments, an interactive
shell is executed by default.
Optionally, it can take a single-letter switch and one or more argument,
to perform the associated action on each arguments.  A summary of the
Example: To skip a module's tests,
for an explanation to their meanings.
Example: To download a module's tarball to the current directory,
copies files between archives and directories.
This implementation can extract from tar, pax, cpio, zip, jar, ar,
and ISO 9660 cdrom images and can create tar, pax, cpio, ar,
and shar archives.
The first option to
is a mode indicator from the following list:
Input.
Read an archive from standard input (unless overriden) and extract the
contents to disk or (if the
option is specified)
list the contents to standard output.
If one or more file patterns are specified, only files matching
one of the patterns will be extracted.
Output.
Read a list of filenames from standard input and produce a new archive
on standard output (unless overriden) containing the specified items.
Pass-through.
Read a list of filenames from standard input and copy the files to the
specified directory.
Unless specifically stated otherwise, options are applicable in
all operating modes.
Read filenames separated by NUL characters instead of newlines.
This is necessary if any of the filenames being read might contain newlines.
(o mode only)
Append to the specified archive.
(Not yet implemented.)
(o and p modes)
Reset access times on files after they are read.
(o mode only)
Block output to records of 5120 bytes.
(o mode only)
Block output to records of
bytes.
(o mode only)
Use the old POSIX portable character format.
Equivalent to
(i and p modes)
Create directories as necessary.
(i mode only)
Read list of file name patterns from
to list and extract.
Read archive from or write archive to
(i mode only)
Ignore files that match
(o mode only)
Produce the output archive in the specified format.
Supported formats include:
Synonym for
The SVR4 portable cpio format.
The old POSIX.1 portable octet-oriented cpio format.
The POSIX.1 pax format, an extension of the ustar format.
The POSIX.1 tar format.
The default format is
See
for more complete information about the
formats currently supported by the underlying
library.
Synonym for
Print usage information.
Read archive from
Input mode.
See above for description.
(i and p mode only)
Disable security checks during extraction or copying.
This allows extraction via symbolic links and path names containing
in the name.
(o mode only)
Compress the file with xz-compatible compression before writing it.
In input mode, this option is ignored; xz compression is recognized
automatically on input.
Synonym for
(o and p modes)
All symbolic links will be followed.
Normally, symbolic links are archived and copied as symbolic links.
With this option, the target of the link will be archived or copied instead.
(p mode only)
Create links from the target directory to the original files,
instead of copying.
(o mode only)
Compress the file with lzma-compatible compression before writing it.
In input mode, this option is ignored; lzma compression is recognized
automatically on input.
(i and p modes)
Set file modification time on created files to match
those in the source.
(i mode, only with
Display numeric uid and gid.
By default,
displays the user and group names when they are provided in the
archive, or looks up the user and group names in the system
password database.
(i mode only)
Do not attempt to restore file ownership.
This is the default when run by non-root users.
Write archive to
Output mode.
See above for description.
Pass-through mode.
See above for description.
(i mode only)
Restore file ownership.
This is the default when run by the root user.
Suppress unnecessary messages.
If group is specified with no user
(for example,
then the group will be set but not the user.
If the user is specified with a trailing colon and no group
(for example,
then the group will be set to the user's default group.
If the user is specified with no trailing colon, then
the user will be set but not the group.
In
and
modes, this option can only be used by the super-user.
(For compatibility, a period can be used in place of the colon.)
(All modes.)
Rename files interactively.
For each file, a prompt is written to
containing the name of the file and a line is read from
If the line read is blank, the file is skipped.
If the line contains a single period, the file is processed normally.
Otherwise, the line is taken to be the new name of the file.
(i mode only)
List the contents of the archive to stdout;
do not restore the contents to disk.
(i and p modes)
Unconditionally overwrite existing files.
Ordinarily, an older file will not overwrite a newer file on disk.
Print the name of each file to stderr as it is processed.
With
provide a detailed listing of each file.
Print the program version information and exit.
(o mode only)
Compress the archive with bzip2-compatible compression before writing it.
In input mode, this option is ignored;
bzip2 compression is recognized automatically on input.
(o mode only)
Compress the archive with compress-compatible compression before writing it.
In input mode, this option is ignored;
compression is recognized automatically on input.
(o mode only)
Compress the archive with gzip-compatible compression before writing it.
In input mode, this option is ignored;
gzip compression is recognized automatically on input.
The following environment variables affect the execution of
The locale to use.
See
for more information.
The timezone to use when displaying dates.
See
for more information.
The
command is traditionally used to copy file heirarchies in conjunction
with the
command.
The first example here simply copies all files from
to
By carefully selecting options to the
command and combining it with other standard utilities,
it is possible to exercise very fine control over which files are copied.
This next example copies files from
to
that are more than 2 days old and whose names match a particular pattern:
This example copies files from
to
that are more than 2 days old and which contain the word
The mode options i, o, and p and the options
a, B, c, d, f, l, m, r, t, u, and v comply with SUSv2.
The old POSIX.1 standard specified that only
and
were interpreted as command-line options.
Each took a single argument of a list of modifier
characters.
For example, the standard syntax allows
but does not support
or
since
and
are only modifiers to
they are not command-line options in their own right.
The syntax supported by this implementation is backwards-compatible
with the standard.
For best compatibility, scripts should limit themselves to the
standard syntax.
There is no current POSIX standard for the cpio command; it appeared
in
but was dropped from
The cpio, ustar, and pax interchange file formats are defined by
for the pax command.
The original
and
utilities were written by Dick Haight
while working in AT&T's Unix Support Group.
system developed for use within AT&T.
They were first released outside of AT&T as part of System III Unix in 1981.
As a result,
actually predates
even though it was not well-known outside of AT&T until some time later.
This is a complete re-implementation based on the
library.
The cpio archive format has several basic limitations:
It does not store user and group names, only numbers.
As a result, it cannot be reliably used to transfer
files between systems with dissimilar user and group numbering.
Older cpio formats limit the user and group numbers to
16 or 18 bits, which is insufficient for modern systems.
The cpio archive formats cannot support files over 4 gigabytes,
except for the
variant, which can support files up to 8 gigabytes.
provides several options for creating and populating home directories.
creates home directories for server home paths only (default).
creates home directories for local home paths only.
creates home directories for both server and local home paths.
creates home directories for users defined in all directory domains of the server's search path.
creates home directories for users defined in the local directory domain.
creates home directories for users defined in a specific directory domain in the server's search path.
creates a home directory for a specific user defined in the domain(s) identified in the -a, -l, or -n parameter. If you omit the -a, -l, and -n parameters when you use the -u parameter, -a is assumed.
reads username list from standard input and creates specified home directories. Each username should be on its own line.
usage help.
location of tool
When using the -a option, search limits of various directory servers (such as Open Directory or Active Directory) can prevent all possible home directories from being created. In this case, you may need to specify the usernames explicitly.

command [command-args] [options]
r [options]
f URL [options]
F URI [options]
Refresh the entire CRL cache
Fetch a CRL from specified URL
Fetch a Certificate from specified URL
Crlrefresh is also use to fetch specific CRLs and certificates from the network; CRLs fetched via 
will be added to the CRL cache as well as provided to the specified output file (or to stdout if no output file is provided). The URL specified in the 
and 
commands must have schema "http:" or "ldap:".
Typically,
would be run on a regular basis via one of the configuration files used by the 
program.
Specify the time in days which, having elapsed after a CRL is expired, that the CRL is deleted fromt he CRL cache. The default is 10 days.
Specify the time in seconds prior to a CRL's expiration when a refresh action will attempt to replace the CRL with a fresh copy.
Purge all entries from the CRL cache, ensuring refresh with fresh CRLs. Normally, CRLs whose expiration date is more than expire_overlap past the current time are not refreshed.
Perform full cryptographic verification of all CRLs in the CRL cache. Normally this step is only performed when a CRL is actually used to validate a certificate.
Provide verbose output during operation. 
When fetching a CRL or certificate, specifies the destination to which the fetched entity will be written. If this is not specified then the fetched entity is sent to stdout.
When fetching a CRL, this inhibits the addition of the fetched CRL to the system CRL cache.
Execute in verbose mode.
System CRL cache database
{
}
The
utility is the program used to install, deinstall or list the tables
used to drive the
daemon in Vixie Cron.
Each user can have their own crontab, and
they are not intended to be edited directly.
(Darwin note: Although
and
are officially supported under Darwin, their functionality has been
absorbed into
which provides a more flexible way of automatically executing commands.
See
for more information.)
If the
file exists, then you must be listed therein in order to be allowed to use
this command.
If the
file does not exist but the
file does exist, then you must
be listed in the
file in order to use this command.
If neither of these files exists, then
depending on site-dependent configuration parameters, only the super user
will be allowed to use this command, or all users will be able to use this
command.
The format of these files is one username per line,
with no leading or trailing whitespace.
Lines of other formats will be ignored,
and so can be used for comments.
The first form of this command is used to install a new crontab from some
named file or standard input if the pseudo-filename
is given.
The following options are available:
Specify the name of the user whose crontab is to be
tweaked.
If this option is not given,
examines
crontab, i.e., the crontab of the person executing the
command.
Note that
can confuse
and that if you are running inside of
you should always use the
option for safety's sake.
Display the current crontab on standard output.
Remove the current crontab.
Edit the current crontab using the editor specified by
the
or
environment variables.
The specified editor
edit the file in place;
any editor that unlinks the file and recreates it cannot be used.
After you exit
from the editor, the modified crontab will be installed automatically.
A fairly informative usage message appears if you run it with a bad command
line.
The
command conforms to
The new command syntax
differs from previous versions of Vixie Cron, as well as from the classic
SVR3 syntax.
collects information to help Apple investigate issues related to CoreStorage (File Vault 2, Fusion Drive, File Vault Everywhere, etc).  This tool invokes sudo, so you will be asked to authenticate.
This script requires
to be installed in the PATH.
If
is not given, all disks in the system will be inspected.  This is the recommended method of invoking
Advanced users can provide a list of
in the form of
or
Only information of the given
is collected.  To fully collect information of a CoreStorage volume, the CoreStorage Physical Volume (i.e., the Apple_CoreStorage partition), the Apple_Boot partition after the physical volume, and the Logical Volume published by CoreStorage (which can be found out using the
command) should all be provided on the command line.
The following information is collected:
OS version.
system logs, kernel logs, install logs, filesystem logs, and other useful information for CoreStorage debugging from
output of
output of
output of
of every Apple_CoreStorage partition, which includes the CoreStorage metadata.  If a list of
is provided, only information on the partitions included in the list will be collected.
of every Apple_Boot partition.  If a list of
is provided, only information on the partitions included in the list will be collected.
The following user information is contained in the collected file:
Number and types of disks attached to the system.
The volume names, UUIDs, and size of each partition.
Encrypted versions of the volume key(s) that unlock the encrypted disk(s) attached to the system.  Refer to
for what information could leak from the volume key(s).
User names, pictures, and password hints for the users.
No other user information (such as directory structures, file names,
file content, etc) is collected.
The following options are available:
Show this help information.
Specify an output path which will hold the file generated by this script.  By default this will be the user's Desktop folder.  The given path must already exist.
Verbose mode, which prints every command it invokes.
The
utility first appeared along with CoreStorage in OS X 10.10.0.
gathers CoreStorage metadata for diagnosis.  It works in two modes.
In the first mode where -G and a list of devices are provided, CoreStorage
metadata on these list of devices will be collected.  The collected
information includes the size and UUID of the CoreStorage logical and
physical volumes, the name of the logical volumes, the wrapped (encrypted)
volume key (which can
only be decrypted by a brute-force attack), user name and user login image
file.  No other user information (such as directory structure, file names,
file content, etc) is collected.
In the second mode where -r is provided, the encryption
context which includes the wrapped volume key (which can only be decrypted by
a brute-force attack), user name and user login image file will be collected.
If the wrapped volume key is decrypted by a brute-force attack, the volume
key used to encrypt data on CoreStorage Logical Volumes is in the clear.  It
is not mathematically possible to derive the user's passphrase from the
volume key.  The volume key is only useful when the attacker has access to
the encrypted data in the CoreStorage Logical Volume, which are not collected
by
The following options are available:
Gather all CoreStorage metadata and write into the specified directory.  The given directory
must not already exist.
Specify the output file generated by the -r option.  If not given, use standard output.
Find out the CoreStorage logical volume identified by the given mount point, and print its encryption
context to the file given in the -o option.
The
utility first appeared along with CoreStorage in OS X 10.10.0.
It is a command language interpreter usable both as an interactive login
shell and a shell script command processor.
and a C-like syntax.
Throughout this manual, features of
but not usually documented are labeled with `(u)'.
login shell.  A login shell can be also specified by invoking the shell with
The rest of the flag arguments are interpreted as follows:
Forces a ``break'' from option processing, causing any
further shell arguments to be treated as non-option arguments.  The remaining
arguments will not be interpreted as shell options.  This may be used to pass
options to a shell script without confusion or possible subterfuge.  The shell
will not run a set-user ID script without this option.
Commands are read from the following argument (which must be present, and
must be a single argument),
The shell exits if any invoked command terminates abnormally or
yields a non-zero exit status.
The shell does not load any resource or startup files, or perform any 
command hashing, and thus starts faster.
The shell is interactive and prompts for its top-level input, even if
it appears to not be a terminal.  Shells are interactive without this option if
their inputs and outputs are terminals.
flag specified.
The shell parses commands but does not execute them.
This aids in debugging shell scripts.
it is used under a debugger.  Job control is disabled. (u)
Command input is taken from the standard input.
escape the newline at the end of this line and continue onto another line.
command input is echoed after history substitution.
immediately before execution.
Print a help message on the standard output and exit. (+)
After processing of flag arguments, if arguments remain but none of the
argument is taken as the name of a file of commands, or ``script'', to
be executed.  The shell opens this file and saves its name for possible
resubstitution by `$0'.  Because many systems use either the standard
version 6 or version 7 shells whose shell scripts are not compatible
with this shell, the shell uses such a `standard' shell to execute a script
whose first character is not a `#', i.e., that does not start with a
comment.
A login shell begins by executing commands from the system files
For examples of startup files, please consult
In the normal case, the shell begins reading commands from the terminal,
prompting with `> '.  (Processing of arguments and the use of the shell to
process files containing command scripts are described later.)
The shell repeatedly reads a line of command input, breaks it into words,
places it on the command history list, parses it and executes each command
in the line.
One can log out by typing `^D' on an empty line, `logout' or `login' or
`normal' or `automatic' as appropriate, then
executes commands from the files
The names of the system login and logout files vary from system to system for
describe two sets of functionality that are implemented as editor commands
but which deserve their own treatment.
the editor commands specific to the shell and their default bindings.
Command-line input can be edited using key sequences much like those used in
it is by default in interactive shells.
Emacs-style key bindings are used by default
environment variable) to
down
up
left
right
unless doing so would alter another single-character binding.
to prevent these bindings.
commands with a short description of each.
Note that editor commands do not have the same notion of a ``word'' as does the
shell.  The editor delimits words with any non-alphanumeric characters not in
and some of the characters with special meanings to it, listed under
The shell is often able to complete words when given a unique abbreviation.
replacing the incomplete word with the complete word in the input buffer.
end of completed directories and a space to the end of other completed words,
to speed typing and provide a visual indicator of successful completion.
the terminal bell rings.
system, or perhaps you were thinking too far ahead and typed the whole thing)
Completion works anywhere in the line, not at just the end; completed
text pushes the rest of the line to the right.  Completion in the middle of a word
often results in leftover characters to the right of the cursor that need
to be deleted.
Commands and variables can be completed in much the same way.
For example, typing `em[tab]' would complete `em' to
given a full pathname.
Typing `echo $ar[tab]' would complete `$ar' to `$argv'
if no other variable began with `ar'.
The shell parses the input buffer to determine whether the word you want to
complete should be completed as a filename, command or variable.
The first word in the buffer and the first word following
`;', `|', `|&', `&&' or `||' is considered to be a command.
A word beginning with `$' is considered to be a variable.
Anything else is a filename.  An empty line is `completed' as a filename.
You can list the possible completions of a word at any time by typing `^D'
and reprints the prompt and unfinished command line, for example:
choices (if any) whenever completion fails:
> set autolist
libtermcap.a@ libtermlib.a@
completion fails and adds no new characters to the word being completed.
A filename to be completed can contain variables, your own or others' home
directory stack entries abbreviated with `='
> ls ~k[^D]
kahn    kas     kellogg
> ls ~ke[tab]
or
> ls $lo[tab]
Note that variables can also be expanded explicitly with the
in the middle of a line it deletes the character under the cursor and
(not bound to any keys by default) can be used to cycle up and down through
the list of possible completions, replacing the current word with the next or
previous word in the list.
ignored by completion.  Consider the following:
> ls
Makefile        condiments.h~   main.o          side.c
README          main.c          meal            side.o
condiments.h    main.c~
> emacs ma[^D]
main.c   main.c~  main.o
> emacs ma[tab]
> emacs main.c
`main.c~' and `main.o' are ignored by completion (but not listing),
1) ignores case and 2) considers periods, hyphens and underscores
be equivalent.  If you had the following files
comp.lang.c      comp.lang.perl   comp.std.c++
comp.lang.c++    comp.std.c
A_silly_file    a-hyphenated-file    another_silly_file
would list all three files, because case is ignored and hyphens and
underscores are equivalent.  Periods, however, are not equivalent to
hyphens or underscores.
ignores case and differences between a hyphen and an underscore word
separator only when the user types a lowercase character or a hyphen.
Entering an uppercase character or an underscore will not match the 
corresponding lowercase character or hyphen word separator.  
`A_silly_file' and typing `rm a__file[^D]' would match just `A_silly_file' 
and `another_silly_file' because the user explicitly used an uppercase 
or an underscore character.  
Completion and listing are affected by several other shell variables:
match, even if more typing might result in a longer match:
> ls
fodder   foo      food     foonly
> set recexact
> rm fo[tab]
just beeps, because `fo' could expand to `fod' or `foo', but if we type
another `o',
> rm foo[tab]
> rm foo
the completion completes on `foo', even though `food' and `foonly'
also match.
commands automatically after one hits `return'.
those directories.
and rows (respectively) that are listed without asking first.
executables when listing commands, but it is quite slow.
to complete words other than filenames, commands and variables.
equivalent functions for glob-patterns.
The shell can sometimes correct the spelling of filenames, commands and variable names
as well as completing and listing them.
editor command (usually bound to M-s and M-S)
command name or `all' to correct the entire line each time return is typed,
before each completion attempt.
When spelling correction is invoked in any of these ways and
the shell thinks that any part of the command line is misspelled,
it prompts with the corrected line:
> set correct = cmd
One can answer `y' or space to execute the corrected line,
`e' to leave the uncorrected command in the input buffer,
`a' to abort the command as if `^C' had been hit, and
anything else to execute the original line unchanged.
Spelling correction recognizes user-defined completions (see the
which a completion is defined resembles a word in the completion list,
spelling correction registers a misspelling and suggests the latter
word as a correction.  However, if the input word does not match any of
the possible completions for that position, spelling correction does
not register a misspelling.
Like completion, spelling correction works anywhere in the line,
pushing the rest of the line to the right and possibly leaving
extra characters to the right of the cursor.
Beware: spelling correction is not guaranteed to work the way one intends,
and is provided mostly as an experimental feature.
Suggestions and improvements are welcome.
editor commands.
Only new or especially interesting editor commands are described here.
key bindings.
The character or characters to which each command is bound by default is
on terminals without a meta key.  Case counts, but commands that are bound
to letters by default are bound to both lower- and uppercase letters for
convenience.
Replaces the current word with the first word in the list of possible
completions.  May be repeated to step down through the list.
At the end of the list, beeps and reverts to the incomplete word.
Copies the previous word in the current line into the input buffer.
Expands the current word to the most recent preceding one for which
the current is a leading substring, wrapping around the history list
(once) if necessary.
changes to the next previous word etc., skipping identical matches
Deletes the character under the cursor.
See also those three commands, each of which does only a single action, and
each of which does a different two out of the three.
shell variable (q.v.) is set to prevent this.
Expands history substitutions in the current word.
Expands the glob-pattern to the left of the cursor.
expands history substitutions in each word in the input buffer.
Expands the variable to the left of the cursor.
Searches backwards through the history list for a command beginning with
the current contents of the input buffer up to the cursor and copies it
into the input buffer.
containing `*', `?', `[]' or `{}'.
appropriate point in the history list.
Emacs mode only.
into the input buffer with the cursor positioned at the end of the pattern,
and prompts with `bck: ' and the first match.  Additional characters may be
searching with the same pattern, wrapping around the history list if
single character for this to work) or one of the following special characters
may be typed:
^W
Appends the rest of the word under the cursor to the search pattern.
Undoes the effect of the last character typed and deletes a character
from the search pattern if appropriate.
^G
If the previous search was successful, aborts the entire search.
If not, goes back to the last successful search.
escape
Ends the search, leaving the current line in the input buffer.
search, leaving the current line in the input buffer, and
is then interpreted as normal input.  In particular, a carriage return
causes the current line to be executed.
Emacs mode only.
Inserts the last word of the previous input line (`!$') into the input buffer.
Expands history substitutions in the current line,
but is not bound by default.
Searches for the current word in PATH and, if it is found, replaces it with
the full path to the executable.  Special characters are quoted.  Aliases are
expanded and quoted but commands within aliases are not.  This command is
Expands the current word as described under the `expand' setting
Toggles between input and overwrite modes.
Saves the current input line and
looks for a stopped job with a name equal to the last component of the
or, if neither is set, `ed' or `vi'.
typed.  This is used to toggle back and forth between an editor and
the shell easily.  Some people bind this command to `^Z' so they
can do this even more easily.
Searches for documentation on the current command, using the same notion of
`current command' as the completion routines, and prints it.  There is no way
command name as a sole argument.  Else,
If there is more than one help file only the first is printed.
In insert mode (the default), inserts the typed character into the input line after the character under the cursor.
In overwrite mode, replaces the character under the cursor with the typed character.
The input mode is normally preserved between lines, but the
editor in that mode at the beginning of each line.
Indicates that the following characters are part of a
multi-key sequence.  Binding a command to a multi-key sequence really creates
whole sequence to the command.  All sequences beginning with a character
unless bound to another command.
Attempts to correct the spelling of each word in the input buffer, like
with switches, substitutions and the like.
Attempts to correct the spelling of the current word as described
Checks each component of a word which appears to be a pathname.
Expands or `unexpands' history substitutions in the input buffer.
Beeps.
Copies the previous entry in the history list into the input buffer.
May be repeated to step up through the history list, stopping at the top.
Prompts with `?' for a search string (which may be a glob-pattern, as with
input buffer.  The bell rings if no match is found.
Hitting return ends the search and leaves the last match in the input
buffer.
Hitting escape ends the search and executes the match.
first word of the input buffer.
replaces the yanked string with the next previous string from the
killring. This also has the effect of rotating the killring, such that
this string will be considered the most recently killed by a later
killring any number of times.
The shell splits input lines into words at blanks and tabs.  The special
characters `&', `|', `;', `<', `>', `(', and `)' and the doubled characters
`&&', `||', `<<' and `>>' are always separate words, whether or not they are
surrounded by whitespace.
When the shell's input is not a terminal, the character `#' is taken to begin a
comment.  Each `#' and the rest of the input line on which it appears is
discarded before further parsing.
A special character (including a blank or tab) may be prevented from having
its special meaning, and possibly made part of another word, by preceding it
is equivalent to a blank, but inside quotes this sequence results in a
newline.
can be prevented by enclosing the strings (or parts of strings)
in which they appear with single quotes or by quoting the crucial character(s)
substitution of the alias.  The usual way of quoting an alias is to precede it
backslashes but not by single quotes.  Strings quoted with double or backward
substitutions are prevented.
Text inside single or double quotes becomes a single word (or part of one).
Metacharacters in these strings, including blanks and tabs, do not form
below) can a double-quoted string yield parts of more than one word;
single-quoted strings never do.  Backward quotes are special: they signal
Quoting complex strings, particularly strings which themselves contain quoting
characters, can be confusing.  Remember that quotes need not be used as they are
in human writing!  It may be easier to quote not an entire string, but only
those parts of the string which need quoting, using different types of quoting
to do so if appropriate.
We now describe the various transformations the shell performs on the input in
the order in which they occur.  We note in passing the data structures involved
and the commands and variables which affect them.  Remember that substitutions
Each command, or ``event'', input from the terminal is saved in the history
shell variable can be set to not save duplicate events or consecutive duplicate
events.
Saved commands are numbered sequentially from 1 and stamped with the time.
It is not usually necessary to use event numbers, but the current event number
The shell actually saves history in expanded and literal (unexpanded) forms.
history use the literal form.
and clear the history list at any time,
store the history list automatically on logout and restore it on login.
History substitutions introduce words from the history list into the input
stream, making it easy to repeat commands, repeat arguments of a previous
command in the current command, or fix spelling mistakes in the previous
command with little typing and a high degree of confidence.
History substitutions begin with the character `!'.  They may begin anywhere in
prevent its special meaning; for convenience, a `!' is passed unchanged when it
is followed by a blank, tab, newline, `=' or `('.  History substitutions also
occur when an input line begins with `^'.  This special abbreviation will be
described later.  The characters used to signal history substitution (`!' and
line which contains a history substitution is printed before it is executed.
A history substitution may have an ``event specification'', which indicates
the event from which words are to be taken, a ``word designator'',
which manipulates the selected words.
An event specification can be
A number, referring to a particular event
#
The current event.
!
The second `?' can be omitted if it is immediately followed by a newline.
For example, consider this bit of someone's history list:
10  8:31    cp wumpus.man wumpus.man.old
11  8:36    vi wumpus.man
12  8:37    diff wumpus.man.old wumpus.man
The commands are shown with their event numbers and time stamps.
The current event, which we haven't typed in yet, is event 13.
`!!' refers to the previous event, 12.  `!!' can be abbreviated `!' if it is
followed by `:' (`:' is described below).
`!n' refers to event 9, which begins with `n'.
`!?old?' also refers to event 12, which contains `old'.
Without word designators or modifiers history references simply expand to the
entire event, so we might type `!cp' to redo the copy command or `!!|more'
if the `diff' output scrolled off the top of the screen.
History references may be insulated from the surrounding text with braces if
necessary.  For example, `!vdoc' would look for a command beginning with
`vdoc', and, in this example, not find one, but `!{v}doc' would expand
unambiguously to `vi wumpus.mandoc'.
Even in braces, history substitutions do not nest.
with `3d'; only completely numeric arguments are treated as event numbers.
This makes it possible to recall events beginning with numbers.
To select words from an event we can follow the event specification by a `:'
and a designator for the desired words.  The words of an input line are
numbered from 0, the first (usually command) word being 0, the second word
(first argument) being 1, etc.  The basic word designators are:
0
The first (command) word
^
The first argument, equivalent to `1'
$
The last argument
%
A range of words
*
Selected words are inserted into the command line separated by single blanks.
For example, the `diff' command in the previous example might have been
typed as `diff !!:1.old !!:1' (using `:1' to select the first argument
arguments from the `cp' command.  If we didn't care about the order of the
The `cp' command might have been written `cp wumpus.man !#:1.old', using `#'
to refer to the current event.
The `:' separating the event specification from the word designator can be
For example, our `diff' command might have been `diff !!^.old !!^' or,
equivalently, `diff !!$.old !!$'.  However, if `!!' is abbreviated `!',
specification.
A history reference may have a word designator but no event specification.
It then references the previous command.
Continuing our `diff' example, we could have said simply `diff
!^.old !^' or, to get the arguments in the opposite order, just `diff !*'.
The word or words in a history reference can be edited, or ``modified'',
by following it with one or more modifiers, each preceded by a `:':
h
Remove a trailing pathname component, leaving the head.
t
Remove all leading pathname components, leaving the tail.
r
Remove a filename extension `.xxx', leaving the root name.
e
Remove all but the extension.
u
Uppercase the first lowercase letter.
l
Lowercase the first uppercase letter.
The trailing delimiter may be omitted if it is immediately followed by a newline.
&
Repeat the previous substitution.
g
Apply the following modifier once to each word.
a (+)
Apply the following modifier as many times as possible to a single word.
`a' and `g' can be used together to apply a modifier globally.
With the `s' modifier, only the patterns contained in the original word are
substituted, not patterns that contain any substitution result.
p
Print the new command line but do not execute it.
q
Quote the substituted words, preventing further substitutions.
x
Like q, but break into words at blanks, tabs and newlines.
Modifiers are applied to only the first modifiable word (unless `g' is used).
It is an error for no word to be modifiable.
For example, the `diff' command might have been written as `diff wumpus.man.old
!#^:r', using `:r' to remove `.old' from the first argument on the same line
(`!#^').  We could say `echo hello out there', then `echo !*:u' to capitalize
`hello', `echo !*:au' to say it out loud, or `echo !*:agu' to really shout.
different approach).
There is a special abbreviation for substitutions.
`^', when it is the first character on an input line, is equivalent to `!:s^'.
Thus we might have said `^rot^root' to make the spelling correction in the
previous example.
This is the only history substitution which does not explicitly begin with `!'.
% man !$:t:r
man wumpus
colon may need to be insulated from it with braces:
> setenv PATH !$:h:$PATH
Bad ! modifier: $.
rather than `$'.
Finally, history can be accessed through the editor as well as through
the substitutions just described.
events in the history list and copy them into the input buffer.
expanded and literal forms of history lines in the input buffer.
in the current word and in the entire input buffer respectively.
The shell maintains a list of aliases which can be set, unset and printed by
left-to-right, is checked to see if it has an alias.  If so, the first word is
replaced by the alias.  If the alias contains a history reference, it undergoes
previous input line.  If the alias does not contain a history reference, the
argument list is left untouched.
Alias substitution is repeated until the first word of the command has no
alias.  If an alias substitution does not change the first word (as in the
previous example) it is flagged to prevent a loop.  Other loops are detected and
cause an error.
The shell maintains a list of variables, each of which has as value a list of
zero or more words.
The values of shell variables can be displayed and changed with the
The system maintains its own list of ``environment'' variables.
Read-only variables may not be modified or unset;
attempting to do so will cause an error.
Once made read-only, a variable cannot be made writable,
Environment variables cannot be made read-only.
Some variables are set by the shell or referred to by it.
list, and words of this variable's value are referred to in special ways.
Some of the variables referred to by the shell are toggles;
the shell does not care what their value is, only whether they are set or not.
Other operations treat variables numerically.  The `@' command permits numeric
calculations to be performed and the result assigned to a variable.  Variable
values are, however, always represented as (zero or more) strings.  For the
purposes of numeric operations, the null string is considered to be zero, and
the second and subsequent words of multi-word values are ignored.
After the input line is aliased and parsed, and before each command is
executed, variable substitution is performed keyed by `$' characters.  This
below) so `$' substitution does not occur there until later,
if at all.  A `$' is passed unchanged if followed by a blank, tab, or
end-of-line.
variable expanded separately.  Otherwise, the command name and entire argument
list are expanded together.  It is thus possible for the first (command) word
(to this point) to generate more than one word, the first of which becomes the
command name, and the rest of which become arguments.
Unless enclosed in `"' or given the `:q' modifier the results of variable
substitution may eventually be command and filename substituted.  Within `"', a
variable whose value consists of multiple words expands to a (portion of a)
single word, with the words of the variable's value separated by blanks.  When
the `:q' modifier is applied to a substitution the variable will expand to
multiple words with each word separated by a blank and quoted to prevent later
command or filename substitution.
The following metasequences are provided for introducing variable values into
the shell input.  Except as noted, it is an error to reference a variable which
is not set.
otherwise be part of it.  Shell variables have names consisting of
letters and digits starting with a letter.  The underscore character is
environment, then that value is returned (but some of the other forms
given below are not available in this case).
The first word of a variable's value is numbered `1'.
If the first number of a range is omitted it defaults to `1'.
It is not an error for a range to be empty if the
second argument is omitted or in range.
$0
Substitutes the name of the file from which command input
is being read.  An error occurs if the name is not known.
$*
Equivalent to `$argv', which is equivalent to `$argv[*]'.
can be applied to the substitutions above.  More than one may be used.  (+)
Braces may be needed to insulate a variable substitution from a literal colon
within the braces.
The following substitutions can not be modified with `:' modifiers.
$?0
Substitutes `1' if the current input filename is known, `0' if it is not.
Always `0' in interactive shells.
$#
Equivalent to `$#argv'.  (+)
$?
Equivalent to `$status'.  (+)
$$
Substitutes the (decimal) process number of the (parent) shell.
$!
Substitutes the (decimal) process number of the last
background process started by this shell.  (+)
$_
Substitutes the command line of the last command executed.  (+)
$<
Substitutes a line from the standard input, with no further interpretation
thereafter.  It can be used to read from the keyboard in a shell script.
typed the user may type an interrupt to interrupt the sequence into
can be used to interactively expand individual variables.
The remaining substitutions are applied selectively to the arguments of builtin
commands.  This means that portions of expressions which are not evaluated are
not subjected to these expansions.  For commands which are not internal to the
shell, the command name is substituted separately from the argument list.  This
occurs very late, after input-output redirection is performed, and in a child
of the main shell.
Command substitution is indicated by a command enclosed in ``'.  The output
from such a command is broken into separate words at blanks, tabs and newlines,
and null words are discarded.  The output is variable and command substituted
and put in place of the original string.
Command substitutions inside double
quotes (`"') retain blanks and tabs; only newlines force new words.  The single
final newline does not force a new word in any case.  It is thus possible for a
command substitution to yield only part of a word, even if the command outputs
a complete line.
By default, the shell since version 6.12 replaces all newline and carriage 
return characters in the command by spaces.  If this is switched off by
If a word contains any of the characters `*', `?', `[' or `{' or begins with
the character `~' it is a candidate for filename substitution, also known as
``globbing''.  This word is then regarded as a pattern (``glob-pattern''), and
replaced with an alphabetically sorted list of file names which match the
pattern.
In matching filenames, the character `.' at the beginning of a filename or
explicitly (unless either
or
or both are set(+)).  The character `*' matches any string of characters, 
including the null string.  The character `?' matches any single character.  
The sequence `[...]' matches any one of the characters enclosed.  
Within `[...]', a pair of
(+) Some glob-patterns can be negated:
An entire glob-pattern can also be negated with `^':
> echo *
bang crash crunch ouch
> echo ^cr*
bang ouch
Glob-patterns which do not use `?', `*', or `[]' or which use `{}' or `~'
(below) are not negated correctly.
The metanotation `a{b,c,d}e' is a shorthand for `abe ace ade'.
sorted separately at a low level to preserve this order:
(Note that `memo' was not sorted with the results of matching `*box'.)
It is not an error when this construct expands to files which do not exist,
but it is possible to get an error from a command to which the expanded list
is passed.
This construct may be nested.
As a special case the words `{', `}' and `{}' are passed undisturbed.
The character `~' at the beginning of a filename refers to home directories.
Standing alone, i.e., `~', it expands to the invoker's home directory as
user with that name and substitutes their home directory; thus `~ken' might
than at the beginning of a word, it is left undisturbed.
therefore, do home directory substitution as one might hope.
It is an error for a glob-pattern containing `*', `?', `[' or `~', with or
without `^', not to match any files.  However, only one pattern in a list of
glob-patterns must match a file (so that, e.g., `rm *.a *.c *.o' would fail
only if there were no files in the current directory ending in `.a', `.c', or
of patterns) which matches nothing is left unchanged rather than causing
an error.
recursively traversing any existing sub-directories.  For example, 
`ls **.c' will list all the .c files in the current directory tree.
If used by itself, it will match match zero or more sub-directories
in a subdirectory name or in the filename itself).
To prevent problems with recursion, the `**' glob-pattern will not 
descend into a symbolic link containing a directory.  To override this,
use `***' (+)
used to interactively expand individual filename substitutions.
The directory stack is a list of directories, numbered from zero, used by the
store the directory stack automatically on logout and restore it on login.
set to put arbitrary directories into the directory stack.
The character `=' followed by one or more digits expands to an entry in
the stack.  For example,
> echo =1
editor command apply to directory stack as well as filename substitutions.
There are several more transformations involving filenames, not strictly
related to the above but mentioned here for completeness.
Quoting prevents this expansion, and
full paths on demand.
This is not a substitution at all, but an abbreviation recognized by only
those commands.  Nonetheless, it too can be prevented by quoting.
The next three sections describe how the shell executes commands and
deals with their input and output.
A simple command is a sequence of words, the first of which specifies the
command to be executed.  A series of simple commands joined by `|' characters
forms a pipeline.  The output of each command in a pipeline is connected to the
input of the next.
Simple commands and pipelines may be joined into sequences with `;', and will
be executed sequentially.  Commands and pipelines can also be joined into
sequences with `||' or `&&', indicating, as in the C language, that the second
is to be executed only if the first fails or succeeds respectively.
A simple command, pipeline or sequence may be placed in parentheses, `()',
to form a simple command, which may in turn be a component of a pipeline or
sequence.  A command, pipeline or sequence can be executed
without waiting for it to terminate by following it with an `&'.
Builtin commands are executed within the shell.  If any component of a
pipeline except the last is a builtin command, the pipeline is executed
in a subshell.
Parenthesized commands are always executed in a subshell.
(cd; pwd); pwd
(printing this after the home directory), while
cd; pwd
When a command to be executed is found not to be a builtin command the shell
hashes the names in these directories into an internal table so that it will
command resides there.  This greatly speeds command location when a large
number of directories are present in the search path. This hashing mechanism is
not used:
In the above four cases the shell concatenates each component of the path
vector with the given command name to form a path name of a file which it
then attempts to execute it. If execution is successful, the search stops.
If the file has execute permissions but is not an executable to the system
(i.e., it is neither an executable binary nor a script that specifies its
interpreter), then it is assumed to be a file containing shell commands and
to specify an interpreter other than the shell itself.
On systems which do not understand the `#!' script interpreter convention
variable.  If so, the shell checks the first line of the file to
file to it on standard input.
The standard input and standard output of a command may be redirected with the
following syntax:
expanded) as the standard input.
is not subjected to variable, filename or command substitution, and each input
and newlines preserved, except for the final newline which is dropped.  The
resultant text is placed in an anonymous temporary file which is given to the
command as standard input.
then it is created; if the file exists, it is truncated, its previous contents
being lost.
This helps prevent accidental destruction of files.  In this case the `!' forms
can be used to suppress this check.
The forms involving `&' route the diagnostic output into the specified file as
input filenames are.
A command receives the environment in which the shell was invoked as modified
by the input-output parameters and the presence of the command in a pipeline.
Thus, unlike some previous shells, commands run from a file of shell commands
have no access to the text of the commands by default; rather they receive the
original standard input of the shell.  The `<<' mechanism should be used to
present inline data.  This permits shell command scripts to function as
components of pipelines and allows the shell to block read its input.  Note
If this is a terminal and if the process attempts to read from the terminal,
Diagnostic output may be directed through a pipe with the standard output.
Simply use the form `|&' rather than just `|'.
The shell cannot presently redirect diagnostic output without also redirecting
Having described how the shell accepts, parses and executes
command lines, we now turn to a variety of its useful features.
The shell contains a number of commands which can be used to regulate the
flow of control in command files (shell scripts) and (in limited but
useful ways) from terminal input.  These commands all operate by forcing the
shell to reread or skip in its input and, due to the implementation,
restrict the placement of some of the commands.
keywords appear in a single simple command on an input line as shown below.
If the shell's input is not seekable, the shell buffers up input whenever
a loop is being read and performs seeks in this internal buffer to
accomplish the rereading implied by the loop.  (To the extent that this
use expressions with a common syntax.  The expressions can include any
builtin command (q.v.) has its own separate syntax.
These operators are similar to those of C and have the same precedence.
They include
||  &&  |  ^  &  ==  !=  =~  !~  <=  >=
Here the precedence increases to the right, `==' `!=' `=~' and `!~', `<='
groups, at the same level.  The `==' `!=' `=~' and `!~' operators compare
their arguments as strings; all others operate on numbers.  The operators
`=~' and `!~' are like `!=' and `==' except that the right hand side is a
builtin command in shell scripts when all that is really needed is
pattern matching.
Null or
missing arguments are considered `0'.  The results of all expressions are
strings, which represent decimal numbers.  It is important to note that
no two components of an expression can appear in the same word; except
when adjacent to components of expressions which are syntactically
significant to the parser (`&' `|' `<' `>' `(' `)') they should be
surrounded by spaces.
Commands can be executed in expressions and their exit status
returned by enclosing them in braces (`{}').  Remember that the braces should
be separated from the words of the command by spaces.  Command executions
succeed, returning true, i.e., `1', if the command exits with status 0,
otherwise they fail, returning false, i.e., `0'.  If more detailed status
information is required then the command should be executed outside of an
Read access
Write access
Execute access
Existence
Ownership
Zero size
Non-zero size (+)
Plain file
Directory
Symbolic link (+) *
Block special file (+)
Character special file (+)
Named pipe (fifo) (+) *
Socket special file (+) *
Set-user-ID bit is set (+)
Set-group-ID bit is set (+)
Sticky bit is set (+)
for a terminal device (+)
Has been migrated (Convex only) (+)
Applies subsequent operators in a multiple-operator test to a symbolic link
rather than to the file to which the link points (+) *
does not exist or is inaccessible or, for the operators indicated by `*',
if the specified file type does not exist on the current system,
then all enquiries return false, i.e., `0'.
(returns `1') for plain executable files, but not for directories.
to a symbolic link rather than to the file to which the link points.
in a multiple-operator test; see below.
It is possible but not useful, and sometimes misleading, to combine operators
can lead to particularly strange results.
Other operators return other information, i.e., not just `0' or `1'.  (+)
Last file access time, as the number of seconds since the epoch
Last file modification time
Last inode modification time
Device number
Inode number
The name of the file pointed to by a symbolic link
Number of (hard) links
Permissions, in octal, without leading zero
and `0' if by neither
Numeric userid
Username, or the numeric userid if the username is unknown
Numeric groupid
Groupname, or the numeric groupid if the groupname is unknown
Size, in bytes
Only one of these operators may appear in a multiple-operator test, and it
elsewhere in a multiple-operator test.  Because `0' is a valid return value
for many of these operators, they do not return `0' when they fail: most
variable), the result of a file inquiry is based on the permission bits of
ordinarily allow writing but which is on a file system mounted read-only,
the test will succeed in a POSIX shell but fail in a non-POSIX shell.
command (q.v.) (+).
numbers.  When a job is started asynchronously with `&', the shell prints a
line which looks like
[1] 1234
indicating that the job which was started asynchronously was job number 1 and
had one (top-level) process, whose process id was 1234.
If you are running a job and wish to do something else you may hit the suspend
key (usually `^Z'),
which sends a STOP signal to the current job.  The shell will then normally
indicate that the job has been `Suspended' and print another prompt.
You can then manipulate the state of the suspended job.
You can put it in the
A `^Z' takes effect immediately and is like an interrupt
in that pending output and unread input are discarded when it is typed.
jobs to complete.
The `^]' key sends a delayed suspend signal, which does not generate a STOP
This can usefully be typed ahead when you have prepared some commands for a
job which you wish to stop after it has read them.
`^Y' is an editing command.  (+)
A job being run in the background stops if it tries to read from the
terminal.  Background jobs are normally allowed to produce output, but this can
be disabled by giving the command `stty tostop'.  If you set this tty option,
then background jobs will stop when they try to produce output like they do
when they try to read input.
There are several ways to refer to jobs in the shell.  The character `%'
introduces a job name.  If you wish to refer to job number 1, you can name it
as `%1'.  Just naming a job brings it to the foreground; thus `%1' is a synonym
for `fg %1', bringing job 1 back into the foreground.  Similarly, saying `%1 &'
resumes job 1 in the background, just like `bg %1'.  A job can also be named
by an unambiguous prefix of the string typed in to start it: `%ex' would
job whose name began with the string `ex'.  It is also possible to say
is only one such job.
The shell maintains a notion of the current and previous jobs.  In output
pertaining to jobs, the current job is marked with a `+' and the previous job
to the previous job.
on some systems.  It is an artifact from a `new' implementation of the tty
driver which allows generation of interrupt characters from the keyboard to
details on setting options in the new tty driver.
The shell learns immediately whenever a process changes state.  It normally
informs you whenever a job becomes blocked so that no further progress is
possible, but only right before it prints a prompt.  This is done so that it
does not otherwise disturb your work.  If, however, you set the shell variable
single process so that its status changes will be immediately reported.  By
starting a background job to mark it.
When you try to leave the shell while jobs are stopped, you will be
see what they are.  If you do this or immediately try to exit again, the shell
will not warn you a second time, and the suspended jobs will be terminated.
There are various ways to run commands and take other actions automatically
at various times in the ``life cycle'' of the shell.  They are summarized here,
to be executed by the shell at a given time.
minutes, before each prompt, before each command gets executed, after each
command gets executed, and when a job is started or is brought into the
foreground.
after a given number of minutes of inactivity.
of commands which exit with a status other than zero.
typed, if that is really what was meant.
command after the completion of any process that takes more than a given
number of CPU seconds.
on those users at any time.
The shell is eight bit clean
and thus supports character sets needing this capability.
NLS support differs depending on whether or not
In either case, 7-bit ASCII is the default character code
(e.g., the classification of which characters are printable) and sorting,
causes a check for possible changes in these respects.
(e.g., a 'en_CA.UTF-8' would yield "UTF-8" as a character code).
environment variables; refer to the system documentation for further details.
When not using the system's NLS, the shell simulates it by assuming that the
ISO 8859-1 character set is used
their values.  Sorting is not affected for the simulated NLS.
In addition, with both real and simulated NLS, all printable
left alone.
is set.  This may be useful for the simulated NLS or a primitive real NLS
is of course still possible.
Unknown characters (i.e., those that are neither printable nor control
If the tty is not in 8 bit mode, other 8 bit characters are printed by
converting them to ASCII and using standout mode.  The shell
use a meta key) may need to explicitly set
A number of new builtin commands are provided to support features in
particular operating systems.  All are described in detail in the
On systems that support TCF (aix-ibm370, aix-ps2),
prints the site on which each job is executing.
operating system.
universe.
indicate respectively the vendor, operating system and machine type
(microprocessor class or machine model) of the
system on which the shell thinks it is running.
These are particularly useful when sharing one's home directory between several
types of machines; one can, for example,
appropriate directory.
variable indicates what options were chosen when the shell was compiled.
Login shells catch the terminate signal, but non-login shells inherit the
terminate behavior from their parents.
Other signals have the values which the shell inherited from its parent.
In shell scripts, the shell's handling of interrupt and terminate signals
default, the shell's children do too, but the shell does not send them a
The shell uses three different sets of terminal (``tty'') modes:
`edit', used when editing, `quote', used when quoting literal characters,
and `execute', used when executing commands.
The shell holds some settings in each mode constant, so commands which leave
the tty in a confused state do not interfere with the shell.
The shell also matches changes in the speed and padding of the tty.
The list of tty modes that are kept constant
Note that although the editor uses CBREAK mode (or its equivalent),
it takes typed-ahead characters anyway.
manipulate and debug terminal capabilities from the command line.
On systems that support SIGWINCH or SIGWINDOW, the shell
adapts to window resizing automatically and adjusts the environment
them to reflect the new window size.
The next sections of this manual describe all of the available
Does nothing, successfully.
The first form prints the values of all shell variables.
must already exist.
Without arguments, prints all aliases.
Shows the amount of dynamic memory acquired, broken down into used and free
memory.  With an argument shows the number of free and used blocks in each size
category.  The categories start at size 8 and double at each step.  This
command's output may vary across system types, because systems other than the VAX
may use a different memory allocator.
Puts the specified jobs (or, without arguments, the current job)
into the background, continuing each if it is stopped.
Without options, the first form lists all bound keys and the editor command to which each is bound,
Options include:
Lists all editor commands and a short description of each.
Binds all keys to the standard bindings for the default editor.
Binds all keys to the standard GNU Emacs-like bindings.
Lists or changes key-bindings in the alternative key map.
`down', `up', `left' or `right'.
editor command.
reinterpreted, and this continues for ten levels of interpretation.
Prints a usage message.
If a command is bound to a string, the first character of the string is bound to
written caret-character style, e.g., `^A'.  Delete is written `^?'
Bell
Backspace
Escape
Form feed
Newline
Carriage return
Horizontal tab
Vertical tab
execution. Only non-interactive commands can be executed, and it is
not possible to execute any command that would overlay the image
current line are executed.  Multi-level breaks are thus
possible by writing them all on one line.
Prints the names of all builtin commands.
Available only if the shell was so compiled;
Without arguments, lists all completions.
is to be completed, and may be one of the following:
Current-word completion.
Next-word completion.
the command line.
Position-dependent completion.
variables, which must include the current word.
Aliases
Bindings (editor commands)
Commands (builtin or external commands)
External commands which begin with the supplied path prefix
Directories
Directories which begin with the supplied path prefix
Environment variables
Filenames
Filenames which begin with the supplied path prefix
Groupnames
Jobs
Limits
Nothing
Shell variables
Signals
Plain (``text'') files
Plain (``text'') files which begin with the supplied path prefix
Any variables
Usernames
Completions
(...)
Words from the given list
`...`
Words from the output of command
completion.  If null, no character is appended.  If omitted (in which
case the fourth delimiter can also be omitted), a slash is appended to
directories and a space to other words.
contains (as its name indicates) contents of the current (already
typed in) command line. One can examine and use contents of the
sophisticated completions (see completion for svn(1) included in
this package).
Now for some examples.  Some commands take only directories as arguments,
so there's no point completing plain files.
> co[^D]
complete compress
> co[^D]
> compress
which begin with `co' (thus matching `co*') to `compress' (the only
word in the list).
ambiguous commands.
These complete words following `alias' with aliases, `man' with commands,
and `set' with shell variables.
is attempted and prints `Truth has no options.' when completion choices are listed.
Words can be completed from a variable evaluated at completion time,
> set hostnames = (rtfm.mit.edu tesla.ee.cornell.edu)
> ftp [^D]
rtfm.mit.edu tesla.ee.cornell.edu
> ftp [^C]
> set hostnames = (rtfm.mit.edu tesla.ee.cornell.edu uunet.uu.net)
> ftp [^D]
rtfm.mit.edu tesla.ee.cornell.edu uunet.uu.net
or from a command run at completion time:
23113 23377 23380 23406 23429 23529 23530 PID
so the braces, space and `$' in `{print $1}' must be quoted explicitly.
One command can have multiple completions:
completes the second argument to `dbx' with the word `core' and all other
arguments with commands.  Note that the positional completion is specified
before the next-word completion.
Because completions are evaluated from left to right, if
the next-word completion were specified first it would always match
and the positional completion would never be executed.  This is a
common mistake when defining a completion.
particular forms as arguments.  For example,
completes `cc' arguments to files ending in only `.c', `.a', or `.o'.
to exclude precious source code from `rm' completion.  Of course, one
could still type excluded names manually or override the completion
editor commands (q.v.).
restrict completion to files beginning with a particular path prefix.  For
example, the Elm mail program uses `=' as an abbreviation for one's mail
directory.  One might use
`$HOME' instead of `~' because home directory substitution works at only the
beginning of a word.
completes arguments to `finger' from the list of users, appends an `@',
and then completes after the `@' from the `hostnames' variable.  Note
again the order in which the completions are specified.
Finally, here's a complex example for inspiration:
(note the pattern which matches both) to files,
and `group' to users and groups respectively
given lists.  It also completes the switches themselves from the given list
and completes anything not otherwise completed to a directory.  Whew.
Remember that programmed completions are ignored if the word being completed
is a tilde substitution (beginning with `~') or a variable (beginning with `$').
in future versions of the shell.
The rest of the commands on the current line are executed.
The first form prints the directory stack.  The top of the stack is at the
left and the first directory in the stack is the current directory.
mechanism.
The last form clears the directory stack.
output, separated by spaces and terminated with a newline.
For example, 'echotc home' sends the cursor to the home position,
in the status line.
value of that capability ("yes" or "no" indicating that the terminal does
or does not have that capability).  One might use this to make the output
from a shell script less verbose on slow terminals, or limit command
output to the number of lines on the screen:
> set history=`echotc lines`
Termcap strings may contain wildcards which will not echo correctly.
One should use double quotes when setting a shell variable to a terminal
capability string, as in the following example that places the date in
the status line:
> set tosl="`echotc ts 0`"
> set frsl="`echotc fs`"
than causing an error.
Treats the arguments as input to the
shell and executes the resulting command(s) in the context
of the current shell.  This is usually used to execute commands
generated as the result of command or variable substitution,
because parsing occurs before these substitutions.
Executes the specified command in place of the current shell.
Brings the specified jobs (or, without arguments, the current job)
into the foreground, continuing each if it is stopped.
space-separated list.
must appear alone on separate lines.)  The builtin command
When this command is read from the terminal, the loop is read once
the loop are executed.  If you make a mistake typing in a
loop at the terminal you can rub it out.
Prints the system execution path.  (TCF only)
Prints the experimental version prefix.  (TCF only)
delimited by null characters in the output.  Useful for
programs which wish to use the shell to filename expand a list of words.
yield a string of the form `label'.  The shell rewinds its
input as much as possible, searches for a line of the
form `label:', possibly preceded by blanks or tabs, and
continues execution after that line.
Prints a statistics line indicating how effective the
internal hash table has been at locating commands (and avoiding
hash buckets.
The first form prints the history event list.
(This can be used to
first rather than oldest first.
number, at most that many lines are saved.  If the second word of
existing history file instead of replacing it (if there is one) and
sorted by time stamp.  (+) Merging is intended for an environment like
the X Window System
with several shells in simultaneous use.  Currently it succeeds
only when the shells quit nicely one after another.
to the history list.
into the history list and sorted by timestamp.
filename.
(unexpanded) form of the history list.
The last form clears the history list.
signal and arranges for the shell to send it a hangup signal when the shell
exits.
Without an argument, causes the non-interactive shell only to
exit on a hangup for the remainder of the script.
or a parenthesized command list, but it may have arguments.
IDs in addition to the normal information.  On TCF systems, prints
the site on which each job is executing.
is given, the TERM (terminate) signal) to the specified jobs or processes.
Signals are either given by number or by name (as given in
to the current job.  If the signal being sent is TERM (terminate)
or HUP (hangup), then the job or process is sent a
CONT (continue) signal as well.
The third form lists the signal names.
Limits the consumption by the current process and each
hard limits are used instead of the current limits.  The
hard limits impose a ceiling on the values of the current
limits.  Only the super-user may raise the hard limits, but
a user may lower or raise the current limits within the legal range.
Controllable resources currently include (if supported by the OS):
the maximum number of cpu-seconds to be used by each process
the largest single file which can be created
the maximum growth of the data+stack region via sbrk(2) beyond
the end of the program text
the maximum size of the automatically-extended stack region
the size of the largest core dump that will be created
the maximum amount of physical memory a process
may have allocated to it at a given time
the maximum amount of virtual memory a process
may have allocated to it at a given time (address space)
the maximum amount of virtual memory a process
may have allocated to it at a given time
the maximum amount of memory a process
the maximum number of open files for this process
the maximum number of threads for this process
the maximum size which a process may lock into memory using mlock(2)
the maximum number of simultaneous processes for this user id
the maximum size of socket buffer usage for this user
the maximum amount of swap space reserved or used for this user
the maximum number of locks for this user
the maximum number of pending signals for this user
the maximum number of bytes in POSIX mqueues for this user
the maximum nice priority the user is allowed to raise mapped from [19...-20]
to [0...39] for this user
the maximum realtime priority for this user
the timeout for RT tasks in microseconds for this user.
integer) number followed by a scale factor.  For all limits
(1024 bytes); a scale factor of `m' or `megabytes' or `g' or `gigabytes'
while `m' for minutes or `h' for hours, or a time of the
form `mm:ss' giving minutes and seconds may be used.
prefixes of the names suffice.
Terminates a login shell, replacing it with an instance of
special file in the listing with a special character:
Directory
*
Executable
#
Block device
%
Character device
|
Named pipe (systems with named pipes only)
=
Socket (systems with sockets only)
@
Symbolic link (systems with symbolic links only)
+
:
in more detail (on only systems that have them, of course):
@
Symbolic link to a non-directory
>
Symbolic link to a directory
&
Symbolic link to nowhere
files pointed to by symbolic links to be mounted.
The first form migrates the process or job to the site specified or the
default site determined by the system path.
current process to the specified site.  Migrating the shell
itself can cause unexpected behavior, because the shell
does not like to lose its tty.  (TCF only)
Available only if the shell was so compiled;
priority.
the process gets.  The super-user may specify negative
executed in a sub-shell, and the restrictions placed on
Without an argument, causes the non-interactive shell only to
ignore hangups for the remainder of the script.
Causes the shell to notify the user asynchronously when the status of any
instead of waiting until the next prompt as is usual.
Controls the action of the shell on interrupts.  Without arguments,
restores the default action of the shell on interrupts,
which is to terminate shell scripts or to return to the
terminal command input level.
when an interrupt is received or a child process terminates because it was
interrupted.
Without arguments, pops the directory stack and returns to the new top directory.
Prints the names and values of all environment variables or,
Without arguments, exchanges the top two elements of the directory stack.
from the stack before pushing it onto the stack.  (+)
directory stack around to be the top element and changes to it.
directory, pushes it onto the top of the stack and changes to it.  (+)
Causes the internal hash table of the contents of the
automatically, except in the special case where another command of
the same name which is located in a different directory already
exists in the hash table.  Also flushes the cache of home directories
built by tilde expansion.
The first form prints the scheduled-event list.
the scheduled-event list is printed.
For example,
causes the shell to echo `It's eleven o'clock.' at 11 AM.
or may be relative to the current time:
> sched
     2  Wed Apr  4 17:00  set prompt=[%h] It's after 5; go home: >
> sched
A command in the scheduled-event list is executed just before the first
prompt is printed after the time when the command is scheduled.
It is possible to miss the exact time when the command is to be run, but
an overdue command will execute at the next prompt.
A command which comes due while the shell
is waiting for user input is executed immediately.
However, normal operation of an already-running command will not
be interrupted so that a scheduled-event list element may be run.
command on some Unix systems.
Its major disadvantage is that it may not run a command at exactly the
specified time.
the shell, it has access to shell variables and other structures.
This provides a mechanism for changing one's working environment
based on the time of day.
The first form of the command prints the value of all shell variables.
Variables which contain more than a single word print as a
parenthesized word list.
this component must already exist.
The sixth form lists only the names of all shell variables that are read-only.
The eighth form is the same as the third form, but
in a single set command.  Note, however, that variable expansion
happens for all arguments before any setting occurs.  Note also that `=' can
whitespace, but cannot be adjacent to only one or the other.
Without arguments, prints the names and values of all environment variables.
Sets the system execution path.  (TCF only)
No sanity checking is done.
Concept terminal users may have to `settc xn no' to get proper
wrapping at the rightmost column.
the shell does not allow to change.
on the `edit', `quote' or `execute' set of tty modes respectively; without
The available modes, and thus the display, vary from system to system.
whether or not they are fixed.
For example, `setty +echok echoe' fixes `echok' mode on and allows commands
to turn `echoe' mode on or off, both when the shell is executing commands.
The commands are not placed on the history list.
if they are nested too deeply the shell may run out of file descriptors.
Stops the specified jobs or processes which are executing in the background.
the current job.
Causes the shell to stop in its tracks, much as if it had
Each case label is successively matched, against the
The file metacharacters `*', `?' and `[...]'  may be used
in the case labels, which are variable expanded.  If none
of the labels match before a `default' label is found, then
the execution begins after the default label.  Each case
label and the default label must appear at the beginning of
labels and default labels as in C.  If no label matches and
terminfo(5) database. Prints the terminal type to stdout and returns 0
if an entry is present otherwise returns 1.
a pipeline, a command list or a parenthesized command list)
If necessary, an extra shell is created to print the time statistic when
the command completes.
children.
Common values for the mask are
002, giving all access to the group and read and execute access to others, and
022, giving read and execute access to the group and others.
`unalias *' thus removes all aliases.
`uncomplete *' thus removes all completions.
Disables use of the internal hash table to speed location of
executed programs.
Only the super-user may do this.
`unset *' thus removes all variables unless they are read-only;
this is a bad idea.
`unsetenv *' thus removes all environment variables;
this is a bad idea.
The shell waits for all background jobs.  If the shell is interactive, an
interrupt will disrupt the wait and cause the shell to print the names and job
numbers of all outstanding jobs.
Available only if the shell was so compiled;
Displays the command that will be executed by the shell after substitutions,
evaluates non-zero.
loop prematurely.
If the input is a terminal, the user is prompted the first time
If set, each of these aliases executes automatically at the indicated time.
They are all initially undefined.
Runs when the shell wants to ring the terminal bell.
Runs after every change of working directory.  For example, if the user is
to be the name of the host, a colon, and the full current working directory.
A fancier way to do that is
This will put the hostname and working directory on the title bar but
only the hostname in the icon manager menu.
may cause an infinite loop.  It is the author's opinion that anyone doing
so will get what they deserve.
Runs before each command gets executed, or when the command changes state.
is sought is passed as sole argument.
For example, if one does
then the help display of the command itself will be invoked, using the GNU
help calling convention.
Currently there is no easy way to account for various calling conventions (e.g.,
the customary Unix `-h'), except by using a table of many commands.
checking on common but infrequent changes such as new mail.  For example,
if one does
> set tperiod = 30
> alias periodic checknews
Runs just before each prompt is printed.  For example, if one does
> alias precmd date
should be used.
Runs before each command gets executed.
Specifies the interpreter for executable scripts which do not themselves
specify an interpreter.  The first word should be a full path name to the
The variables described in this section have special meaning to the shell.
startup; they do not change thereafter unless changed by the user.  The shell
whenever the environment variable changes the shell changes the corresponding
shell variable to match (unless the shell variable is read-only) and vice
are not synchronized in this manner, and that the shell automatically
to the end of normal files when they are matched exactly.
Set by default.
the local username for kerberos authentication.
i.e., `$1' is replaced by `$argv[1]', etc.
Set by default, but usually empty in interactive shells.
each completion attempt.
only history will be expanded and a second completion will expand filenames.
If set, possibilities are listed after an ambiguous completion.
If set to `ambiguous', possibilities are listed only when no new
characters are added by completion.
The first word is the number of minutes of inactivity before automatic
logout.  The optional second word is the number of minutes of inactivity
before automatic locking.
When the shell automatically logs out, it prints `auto-logout', sets the
When the shell automatically locks, the user is required to enter his password
to continue working.  Five incorrect attempts result in automatic logout.
Set to `60' (automatic logout after 60 minutes, and no locking) by default
in login and superuser shells, but not if the shell thinks it is running
the tty is a pseudo-tty (pty) or the shell was not so compiled (see the
If set, the internal hash table of the contents of the directories in the
table.  In addition, the list of available commands will be rebuilt for each
command completion or spelling correction attempt if set to `complete' or
`correct' respectively; if set to `always', this will be done for both
cases.
scripts.
The file name of the message catalog.
If set, tcsh use `tcsh.${catalog}' as a message catalog instead of
default `tcsh'.
subdirectories if they aren't found in the current directory.
If set, it enables color escape sequence for NLS message files.
And display colorful NLS messages.
If set, the shell will evaluate expressions right to left, like the original
If set to `igncase', the completion becomes case insensitive.
If set to `enhance', completion ignores case and considers
hyphens and underscores to be equivalent; it will also treat
separators.
If set to `Enhance', completion matches uppercase and underscore
characters explicitly and matches lowercase and hyphens in a
case-insensivite manner; it will treat periods, hypens and underscores
as word separators.
If set to a list of commands, the shell will continue the listed
commands, instead of starting a new one.
Same as continue, but the shell will execute:
If set to `cmd', commands are automatically spelling-corrected.
If set to `complete', commands are automatically completed.
If set to `all', the entire command line is corrected.
If set, newlines and carriage returns in command substitution are
replaced by spaces.  Set by default.
The full pathname of the current directory.
stack rather than rotating it to the top.
An array of all the directories on the directory stack.
`$dirstack[1]' is the current working directory, `$dirstack[2]'
the first directory on the stack, etc.
Note that the current working directory is `$dirstack[1]' but `=0' in
directory stack substitutions, etc.
but the first element (the current working directory) is always correct.
If set to `euc', it enables display and editing EUC-kanji(Japanese) code.
If set to `sjis', it enables display and editing Shift-JIS(Japanese) code.
If set to `big5', it enables display and editing Big5(Chinese) code.
If set to `utf8', it enables display and editing Utf8(Unicode) code.
If set to the following format, it enables display and editing of original
multi-byte code format:
> set dspmbyte = 0000....(256 bytes)....0000
corresponds (from left to right) to the ASCII codes 0x00, 0x01, ... 0xff.  Each
character
is set to number 0,1,2 and 3.  Each number has the following meaning:
  0 ... not used for multi-byte characters.
  1 ... used for the first byte of a multi-byte character.
  2 ... used for the second byte of a multi-byte character.
  3 ... used for both the first byte and second byte of a multi-byte character.
  Example:
If set to `001322', the first character (means 0x00 of the ASCII code) and
second character (means 0x01 of ASCII code) are set to `0'.  Then, it is not
used for multi-byte characters.  The 3rd character (0x02) is set to '1',
indicating that it is used for the first byte of a multi-byte character.
The 4th character(0x03) is set '3'.  It is used for both the first byte and
the second byte of a multi-byte character.  The 5th and 6th characters
(0x04,0x05) are set to '2', indicating that they are used for the second
byte of a multi-byte character.
The GNU fileutils version of ls cannot display multi-byte
filenames without the -N ( --literal ) option.   If you are using
this version, set the second word of dspmbyte to "ls".  If not, for
example, "ls-F -l" cannot display multi-byte filenames.
  Note:
This variable can only be used if KANJI and DSPMBYTE has been defined at
compile time.
from the stack before pushing it onto the stack.
If set, each command with its arguments is echoed just before it is
executed.  For non-builtin commands all expansions occur before
echoing.  Builtin commands are echoed before command and filename
substitution, because these substitutions are then done selectively.
bsd
sysv
Recognize backslashed escape sequences in echo strings.
both
none
Recognize neither.
Set by default to the local system default.  The BSD and System V
systems.
If set, the command-line editor is used.  Set by default in interactive
shells.
shell variable) indicate skipped directories with an ellipsis (`...')
The user's effective user ID.
The first matching passwd entry name corresponding to the effective user ID.
Lists file name suffixes to be ignored by completion.
by default. If 
The user's real group ID.
If set, wild-card glob patterns will match files and directories beginning
with `.' except for `.' and `..'
If set, the `**' and `***' file glob patterns will match any string of 
`ls **.c' will list all the .c files in the current directory tree).
If used by itself, it will match match zero or more sub-directories
To prevent problems with recursion, the `**' glob-pattern will not 
descend into a symbolic link containing a directory.  To override this,
use `***'
The user's group name.
highlighted in reverse video.
Highlighting requires more frequent terminal writes, which introduces extra
overhead. If you care about terminal performance, you may want to leave this
unset.
the history substitution character, replacing the default character
`!'.  The second character of its value replaces the character `^' in
quick substitutions.
Controls handling of duplicate entries in the history list.  If set to
`all' only unique history events are entered in the history list.  If
set to `prev' and the last history event is the same as the current
command, then the current command is not entered in the history.  If
set to `erase' and the same event is found in the history list, that
old event gets erased and the current one gets inserted.  Note that the
`prev' and `all' options renumber history events so there are no gaps.
useful when sharing the same home directory between different machines,
or when saving separate histories on different terminals.  Because only
use the literal (unexpanded) form of lines in the history list.  See
The first word indicates the number of history events to save.  The
optional second word (+) indicates the format in which history is
`%R'.  Set to `100' by default.
Initialized to the home directory of the invoker.  The filename
If set to the empty string or `0' and the input device is a terminal,
`^D' on an empty line) causes the shell to print `Use "exit" to leave
tcsh.' instead of exiting.  This prevents the shell from accidentally
being killed.  Historically this setting exited after 26 successive
single `^D'.
If set, the shell treats a directory name typed as a command as though
the change of directory is echoed to the standard output.  This behavior
is inhibited in non-interactive shell scripts, or for command strings
with more than one word.  Changing directory takes precedence over
executing a like-named command, but it is done after alias
substitutions.  Tilde and variable expansions work as expected.
If set to `insert' or `overwrite', puts the editor into that input mode
at the beginning of each line.
Controls handling of duplicate entries in the kill ring.  If set to
`all' only unique strings are entered in the kill ring.  If set to
`prev' and the last killed string is the same as the current killed
string, then the current string is not entered in the ring.  If set
to `erase' and the same string is found in the kill ring, the old
string is erased and the current one is inserted.
Indicates the number of killed strings to keep in memory.  Set to `30'
by default.  If unset or set to less than `2', the shell will only
keep the most recently killed string.
Strings are put in the killring by the editor commands that delete
can be used to yank earlier killed strings.
If set to `x', `a' or `A', or any combination thereof (e.g., `xA'), they
files (even if they start with a `.'), `A' shows all files but `.' and
`..', and `x' sorts across instead of down.  If the second word of
If set, all jobs are listed when a job is suspended.  If set to `long',
the listing is in long format.
each symbolic link points.
will list without asking first.
command will list without asking first.
Set by the shell if it is a login shell.  Setting or unsetting it
Set by the shell to `normal' before a normal logout, `automatic' before
an automatic logout, and `hangup' if the shell was killed by a hangup
shell variable.
A list of files and directories to check for incoming mail, optionally
preceded by a numeric word.  Before each prompt, if 10 minutes have
passed since the last check, the shell checks each file and says `You
and has a modification time greater than its access time.
If you are in a login shell, then no mail file is reported unless it has
been modified after the time the shell has started up, to prevent
redundant notifications.  Most login programs will tell you whether or not
you have mail when you log in.
file within that directory as a separate message, and will report `You have
This functionality is provided primarily for those systems which store mail
in this manner, such as the Andrew Mail System.
checking interval, in seconds.
Under very rare circumstances, the shell may report `You have mail.' instead
of `You have new mail.'
If set to `never', completion never beeps.
If set to `nomatch', it beeps only when there is no match.
If set to `ambiguous', it beeps when there are multiple matches.
If set to `notunique', it beeps when there is one exact and other longer matches.
If unset, `ambiguous' is used.
If set, beeping is completely disabled.
If set, restrictions are placed on output redirection to insure that files
are not accidentally destroyed and that `>>' redirections refer to existing
specifiers at the change of hour.
(q.v.) are inhibited.  This is most useful in shell scripts which do not deal
with filenames, or after a list of filenames has been obtained and further
expansions are not desirable.
it is disabled so that the meta key can be used.
(q.v.) which does not match any
existing files is left untouched rather than causing an error.
It is still an error for the substitution to be
malformed, e.g., `echo [' still gives an error.
A list of directories (or glob-patterns which match directories; see
completion operation.  This is usually used to exclude directories which
If set, the shell announces job completions asynchronously.
The default is to present job completions just before printing a prompt.
If set, enable the printing of padding '0' for hours, in 24 and 12 hour
formats.  E.G.: 07:45:42 vs. 7:45:42.
To retain compatibily with older versions numeric variables starting with
0 are not interpreted as octal. Setting this variable enables proper octal
parsing.
A list of directories in which to look for executable commands.
A null word specifies the current directory.
If set and an interactive program exits with a non-zero status, the shell
The string which is printed before reading each command from the terminal.
are replaced by the given information:
The current working directory.
%~
The current working directory, but with one's home directory
represented by `~' and other users' home directories represented by
in the current session.
are represented by an ellipsis so the whole becomes `...trailing'.
`~' substitution is done as in `%~' above, but the `~' component
is ignored when counting trailing components.
%C
Like %c, but without `~' substitution.
%h, %!, !
The current history event number.
%M
The full hostname.
%m
The hostname up to the first `.'.
%S (%s)
Start (stop) standout mode.
%B (%b)
Start (stop) boldfacing mode.
%U (%u)
Start (stop) underline mode.
%t, %@
%T
%p
%P
%%
A single `%'.
%n
The user name.
%N
The effective user name.
%j
The number of jobs.
%d
The weekday in `Day' format.
%D
The day in `dd' format.
%w
The month in `Mon' format.
%W
The month in `mm' format.
%y
The year in `yy' format.
%Y
The year in `yyyy' format.
%l
The shell's tty.
%L
Clears from the end of the prompt to end of the display or the end of the line.
%$
Expands the shell or environment variable name immediately after the `$'.
%#
for the superuser.
It should be used only to change terminal attributes and
should not move the cursor location.  This
%?
The return code of the command executed just before the prompt.
%R
The bold, standout and underline sequences are often used to distinguish a
superuser shell.  For example,
then print `DING!' on the change of hour (i.e, `:00' minutes) instead of
the actual time.
Set by default to `%# ' in interactive shells.
note the variable meaning of `%R'.
Set by default to `%R? ' in interactive shells.
The string with which to prompt when confirming automatic spelling correction.
note the variable meaning of `%R'.
Set by default to `CORRECT>%R (y|n|e|a)? ' in interactive shells.
If set (to a two-character string), the `%#' formatting sequence in the
normal users and the second character for the superuser.
If set, completion completes on an exact match even if a longer match is
possible.
If set, command listing displays only files in the path that are
executable.  Slow.
If set, the user is prompted before `rm *' is executed.
The string to print on the right-hand side of the screen (after
the command input) when the prompt is being displayed on the left.
It will automatically disappear and reappear as necessary, to ensure that
command input isn't obscured, and will appear only if the prompt,
command input, and itself will fit together on the first line.
the prompt and before the command input.
If the first word is set to a number, at most that many directory stack
entries are saved.
If the first word is set to a number, at most that many lines are saved.
If the second word is set to `merge', the history list is merged with
the existing history file instead of replacing it (if there is one) and
sorted by time stamp and the most recent events are retained.  (+)
note the variable meaning of `%R'.
The file in which the shell resides.  This is used in forking
shells to interpret files which have execute bits set, but
which are not executable by the system.  (See the description
(system-dependent) home of the shell.
The number of nested shells.
Reset to 1 in login shells.
The status returned by the last command, unless the variable
is set, and any error in a pipeline or a backquote expansion will be
propagated (this is the default
behavior, and the current
default). If it terminated
abnormally, then 0200 is added to the status.  Builtin commands
which fail return exit status `1', all other builtin commands
return status `0'.
Can be set to several different values to control symbolic link (`symlink')
resolution:
If set to `chase', whenever the current directory changes to a directory
containing a symbolic link, it is expanded to the real name of the directory
to which the link points.  This does not work for the user's home directory;
this is a bug.
If set to `ignore', the shell tries to construct a current directory
relative to the current directory before the link was crossed.
returns one to the original directory.  This affects only builtin commands
and filename completion.
If set to `expand', the shell tries to fix symbolic links by actually expanding
arguments which look like path names.  This affects any command, not just
builtins.  Unfortunately, this does not work for hard-to-recognize filenames,
such as those embedded in command options.  Expansion may be prevented by
quoting.  While this setting is usually the most convenient, it is sometimes
misleading and sometimes confusing when it fails to recognize an argument
which should be expanded.  A compromise is to use `ignore' and use the
Some examples are in order.  First, let's set up some play directories:
> cd ..; echo $cwd
> cd ..; echo $cwd
> cd ..; echo $cwd
> cd ..; echo $cwd
> cd ".."; echo $cwd
Note that `expand' expansion 1) works just like `ignore' for builtins
filenames are passed to non-builtin commands.
The version number of the shell in the format `R.VV.PP',
where `R' is the major release number, `VV' the current version
and `PP' the patchlevel.
after each command which takes more than that many CPU seconds.
If there is a second word, it is used as a format string for the output
format string:
%U
The time the process spent in user mode in cpu seconds.
%S
The time the process spent in kernel mode in cpu seconds.
%E
The elapsed (wall clock) time in seconds.
%P
%W
Number of times the process was swapped.
%X
The average amount in (shared) text space used in Kbytes.
%D
%K
The total space used (%X + %D) in Kbytes.
%M
The maximum memory the process had in use at any time in Kbytes.
%F
The number of major page faults (page needed to be brought from disk).
%R
The number of minor page faults.
%I
The number of input operations.
%O
The number of output operations.
%r
The number of socket messages received.
%s
The number of socket messages sent.
%k
The number of signals received.
%w
The number of voluntary context switches (waits).
%c
The number of involuntary context switches.
Only the first four sequences are supported on systems without BSD resource
limit functions.
The default time format is `%Uu %Ss %E %P %X+%Dk %I+%Oio %Fpf+%Ww' for
systems that support resource usage reporting and `%Uu %Ss %E %P' for
systems that do not.
available, but the following additional sequences are:
%Y
The number of system calls performed.
%Z
The number of pages which are zero-filled on demand.
%i
The number of times a process's resident set size was increased by the kernel.
%d
The number of times a process's resident set size was decreased by the kernel.
%l
The number of read system calls performed.
%m
The number of write system calls performed.
%p
The number of reads from raw disk devices.
%q
The number of writes to raw disk devices.
and the default time format is `%Uu %Ss %E %P %I+%Oio %Fpf+%Ww'.
Note that the CPU percentage can be higher than 100% on multi-processors.
The name of the tty, or empty if not attached to one.
The user's real user ID.
The user's login name.
If set, causes the words of each
command to be printed, after history substitution (if any).
list of options which were set at compile time.
Options which are set by default in the distribution are noted.
8b
The shell is eight bit clean; default
7b
The shell is not eight bit clean
wide
The shell is multibyte encoding clean (like UTF-8)
nls
The system's NLS is used; default for systems with NLS
lf
dl
nd
vi
dtr
Login shells drop DTR when exiting
bye
al
kan
Kanji is used if appropriate according to locale settings,
sm
hb
The `#!<program> <args>' convention is emulated when executing shell scripts
ng
rh
afs
The shell verifies your password with the kerberos server if local
An administrator may enter additional strings to indicate differences
in the local version.
If set, a screen flash is used rather than the audible bell.
If either the user is `any' all terminals are watched for the given user
and vice versa.
For example,
set watch = (george ttyd1 any console $user any)
reports activity of the user `george' on ttyd1, any user on the console, and
oneself (or a trespasser) on any terminal.
Logins and logouts are checked every 10 minutes by default, but the first
For example,
set watch = (1 any any)
are replaced by the given information:
%n
%a
%l
%M
from the local host.
%m
The hostname of the remote host up to the first `.'.
The full name is printed if it is an IP address or an X Window System display.
%M and %m are available on only systems that store the remote hostname in
If unset, `%n has %a %l from %m.' is used, or `%n has %a %l.' on systems
which don't store the remote hostname.
A list of non-alphanumeric characters to be considered part of a word by the
The pathname to a default editor.
Initialized to the name of the machine on which the shell
Initialized to the type of machine on which the shell
is running, as determined at compile time.  This variable is obsolete and
will be removed in a future version.
command looks for command documentation.
Gives the preferred character environment.
If set, only ctype character handling is changed.
file format; a colon-separated list of expressions of the form
variables with their associated defaults are:
no	0
Normal (non-filename) text
fi	0
Regular file
di	01;34
Directory
ln	01;36
Symbolic link
pi	33
Named pipe (FIFO)
so	01;35
Socket
do	01;35
Door
bd	01;33
Block device
cd	01;32
Character device
ex	01;32
Executable file
mi	(none)
Missing file (defaults to fi)
or	(none)
Orphaned symbolic link (defaults to ln)
lc	^[[
Left code
rc	m
Right code
ec	(none)
End code (replaces lc+no+rc)
You need to include only the variables you want to change from
the default.
File names can also be colorized based on filename extension.
to use, but less general.  The left, right and end codes are
provided so you don't have to type common parts over and over
again and to support weird terminals; you will generally not
need to change them at all unless your terminal does not use
ISO 6429 color sequences but a different system.
If your terminal does use ISO 6429 color codes, you can
most common commands are:
0
to restore default color
1
for brighter colors
4
for underlined text
5
for flashing text
30
for black foreground
31
for red foreground
32
for green foreground
33
for yellow (or brown) foreground
34
for blue foreground
35
for purple foreground
36
for cyan foreground
37
for white (or gray) foreground
40
for black background
41
for red background
42
for green background
43
for yellow (or brown) background
44
for blue background
45
for purple background
46
for cyan background
47
for white (or gray) background
Not all commands will work on all systems or display devices.
A few terminal programs do not recognize the default end code
properly.  If all text gets colorized after you do a directory
numerical codes for your standard fore- and background colors.
The machine type (microprocessor class or machine model), as determined at compile time.
The operating system, as determined at compile time.
A colon-separated list of directories in which to look for executables.
updated only after an actual directory change.
The host from which the user has logged in remotely, if this is the case and
the shell is able to determine it.  Set only if the shell was so compiled;
The vendor, as determined at compile time.
The pathname to a default full-screen editor.
Read first by every shell.
Read by login shells at logout.
Used to interpret shell scripts not starting with a `#'.
Temporary file for `<<'.
Source of home directories for `~name' substitutions.
The order in which startup files are read may differ if the shell was so
Programmable, interactive word completion and listing.
builtin commands.
An enhanced history mechanism.  Events in the history list are time-stamped.
the previously undocumented `#' event specifier and new modifiers
Enhanced directory parsing and directory stack handling.
builtin which uses them.
scheduled events, special aliases, automatic logout and terminal locking,
command timing and watching for logins and logouts.
Support for the Native Language System
OS variant features
New variables that make useful information easily available to the shell.
variables.
A new syntax for including useful information in the prompt string
and special prompts for loops and spelling correction
When a suspended command is restarted, the shell prints the directory
it started in if this is different from the current directory.  This can
be misleading (i.e., wrong) as the job may have changed directories internally.
of the form `a ; b ; c' are also not handled gracefully when stopping is
attempted.  If you suspend `b', the shell will then immediately execute
`c'.  This is especially noticeable if this expansion results from an
to a subshell, i.e., `( a ; b ; c )'.
Control over tty output after processes are started is primitive; perhaps
this will inspire someone to work on a good virtual terminal interface.
In a virtual terminal interface much more interesting things could be
done with output control.
Alias substitution is most often used to clumsily simulate shell procedures;
shell procedures should be provided rather than aliases.
Control structures should be parsed rather than being recognized as
built-in commands.  This would allow control commands to be placed anywhere,
to be combined with `|', and to be used with `&' and `;' metasyntax.
It should be possible to use the `:' modifiers on the output of command
substitutions.
The screen update for lines longer than the screen width is very poor
if the terminal cannot move the cursor up (i.e., terminal type `dumb').
Glob-patterns which do not use `?', `*' or `[]' or which use `{}' or `~'
are not negated correctly.
the expression is false and the command is not executed.
and does not handle control characters in filenames well.  It cannot be
interrupted.
Command substitution supports multiple commands and conditions, but not
help maintain and test tcsh, send mail to tcsh-request@mx.gw.com with the
text `subscribe tcsh' on a line by itself in the body.
In 1964, DEC produced the PDP-6.  The PDP-10 was a later re-implementation.  It
was re-christened the DECsystem-10 in 1970 or so when DEC brought out the
second model, the KI10.
TENEX was created at Bolt, Beranek & Newman (a Cambridge, Massachusetts
think tank) in
1972 as an experiment in demand-paged virtual memory operating systems.  They
built a new pager for the DEC PDP-10 and created the OS to go with it.  It was
extremely successful in academia.
In 1975, DEC brought out a new model of the PDP-10, the KL10; they intended to
have only a version of TENEX, which they had licensed from BBN, for the new
box.  They called their version TOPS-20 (their capitalization is trademarked).
A lot of TOPS-10 users (`The OPerating System for PDP-10') objected; thus DEC
found themselves supporting two incompatible systems on the same hardware--but
then there were 6 on the PDP-11!
TENEX, and TOPS-20 to version 3, had command completion
via a user-code-level subroutine library called ULTCMD.  With version 3, DEC
moved all that capability and more into the monitor (`kernel' for you Unix
types), accessed by the COMND% JSYS (`Jump to SYStem' instruction, the
supervisor call mechanism [are my IBM roots also showing?]).
The creator of tcsh was impressed by this feature and several others of TENEX
and TOPS-20, and created a version of csh which mimicked them.
The system limits argument lists to ARG_MAX characters.
The number of arguments to a command which involves filename expansion is
Command substitutions may substitute no more characters than are allowed in
an argument list.
substitutions on a single line to 20.
csh(1), emacs(1), ls(1), newgrp(1), sh(1), setpath(1), stty(1), su(1),
tset(1), vi(1), x(1), access(2), execve(2), fork(2), killpg(2),
pipe(2), setrlimit(2), sigvec(2), stat(2), umask(2), vfork(2), wait(2),
malloc(3), setlocale(3), tty(4), a.out(5), termcap(5), environ(7),
termio(7), Introduction to the C Shell
This manual documents tcsh 6.18.01 (Astron) 2012-02-14.
William Joy
J.E. Kulp, IIASA, Laxenburg, Austria
Job control and directory stack features
Ken Greer, HP Labs, 1981
File name completion
Mike Ellis, Fairchild, 1983
Paul Placeway, Ohio State CIS Dept., 1983-1993
Command line editor, prompt routines, new glob syntax and numerous fixes
and speedups
Karl Kleinpaste, CCI 1983-4
scheduled events, and the idea of the new prompt format
Rayan Zachariassen, University of Toronto, 1984
and speedups
Chris Kingsley, Caltech
Fast storage allocator routines
Chris Grevstad, TRW, 1987
Christos S. Zoulas, Cornell U. EE Dept., 1987-94
Ports to HPUX, SVR2 and SVR3, a SysV version of getwd.c, SHORT_STRINGS support
and a new version of sh.glob.c
James J Dempsey, BBN, and Paul Placeway, OSU, 1988
Daniel Long, NNSC, 1988
Patrick Wolfe, Kuck and Associates, Inc., 1988
David C Lawrence, Rensselaer Polytechnic Institute, 1989
Alec Wolman, DEC, 1989
Newlines in the prompt
Matt Landau, BBN, 1989
Ray Moody, Purdue Physics, 1989
Magic space bar history expansion
Mordechai ????, Intel, 1989
printprompt() fixes and additions
Kazuhiro Honda, Dept. of Computer Science, Keio University, 1989
Per Hedeland, Ellemtel, Sweden, 1990-
Various bugfixes, improvements and manual updates
Hans J. Albertsson (Sun Sweden)
Michael Bloom
Interrupt handling fixes
Michael Fine, Digital Equipment Corp
Extended key support
Eric Schnoebelen, Convex, 1990
save and restore of directory stack
Ron Flax, Apple, 1990
Dan Oscarsson, LTH Sweden, 1990
NLS support and simulated NLS support for non NLS sites, fixes
Johan Widen, SICS Sweden, 1990
Matt Day, Sanyo Icon, 1990
POSIX termio support, SysV limit fixes
Jaap Vermeulen, Sequent, 1990-91
Vi mode fixes, expand-line, window change fixes, Symmetry port
Martin Boyer, Institut de recherche d'Hydro-Quebec, 1991
the whole string from the beginning of the line to the cursor.
Scott Krotz, Motorola, 1991
Minix port
David Dawes, Sydney U. Australia, Physics Dept., 1991
SVR4 job control fixes
Jose Sousa, Interactive Systems Corp., 1991
Marc Horowitz, MIT, 1991
Bruce Sterling Woodcock, sterling@netcom.com, 1991-1995
various other portability changes and bug fixes
Jeff Fink, 1992
Harry C. Pulley, 1992
Coherent port
Andy Phillips, Mullard Space Science Lab U.K., 1992
VMS-POSIX port
Beto Appleton, IBM Corp., 1992
POSIX file tests, POSIX SIGHUP
Scott Bolte, Cray Computer Corp., 1992
CSOS port
Kaveh R. Ghazi, Rutgers University, 1992
Tek, m88k, Titan and Masscomp ports and fixes.  Added autoconf support.
Mark Linderman, Cornell University, 1992
Mika Liljeberg, liljeber@kruuna.Helsinki.FI, 1992
Linux port
Tim P. Starrin, NASA Langley Research Center Operations, 1993
Read-only variables
Dave Schweisguth, Yale University, 1993-4
New man page and tcsh.man2html
Larry Schwimmer, Stanford University, 1993
AFS and HESIOD patches
Luke Mewburn, RMIT University, 1994-6
Enhanced directory printing in prompt,
Edward Hutchins, Silicon Graphics Inc., 1996
Added implicit cd.
Martin Kraemer, 1997
Ported to Siemens Nixdorf EBCDIC machine
Amol Deshpande, Microsoft, 1997
and message catalog code to interface to Windows.
Taga Nayuta, 1998
Color ls additions.
Bryan Dunlap, Clayton Elwell, Karl Kleinpaste, Bob Manson, Steve Romig,
Diana Smetters, Bob Sutterfield, Mark Verber, Elizabeth Zwicky and all
the other people at Ohio State for suggestions and encouragement
All the people on the net, for putting up with,
reporting bugs in, and suggesting new additions to each and every version
Richard M. Alderson III, for writing the `T in tcsh' section
The
utility splits
into pieces using the patterns
If
is
a dash
reads from standard input.
The options are as follows:
Give created files names beginning with
The default is
Do not remove output files if an error occurs or a
or
signal is received.
Use
of decimal digits after the
to form the file name.
The default is 2.
Do not write the size of each output file to standard output as it is
created.
The
operands may be a combination of the following patterns:
Create a file containing the input from the current line to (but not including)
the next line matching the given basic regular expression.
An optional
from the line that matched may be specified.
Same as above but a file is not created for the output.
Create containing the input from the current line to (but not including)
the specified line number.
Repeat the previous pattern the specified number of times.
If it follows a line number pattern, a new file will be created for each
lines,
times.
The first line of the file is line number 1 for historic reasons.
After all the patterns have been processed, the remaining input data
(if there is any) will be written to a new file.
Requesting to split at a line before the current line number or past the
end of the file will result in an error.
The
and
environment variables affect the execution of
as described in
Split the
file
into one file for each section (up to 20):
Split standard input after the first 99 lines and every 100 lines thereafter:
The
utility conforms to
A
command appeared in PWB UNIX.
Input lines are limited to
(2048) bytes in length.
The
command manipulates Code Signing Requirement data.
It reads one requirement from a file or command arguments, converts it into
internal form, checks it, and then optionally outputs it in a different form.
The options are as follows:
Requests that the requirement read be written in binary form to the path given.
Specifies the input requirement. See "specifying requirements" below. This is
exactly the same format as is accepted by the -r and -R options of the codesign(1)
command.
Requests that the requirement read be written as text to standard output.
Increases the verbosity of output. Multiple instances of -v produce increasing levels
of commentary output.
In the first synopsis form,
reads a Code Requirement and writes it to standard output as canonical source text.
Note that with text input, this actually compiles the requirement into internal
form and then converts it back to text, giving you the system's view of the requirement code.
In the second synopsis form,
reads a Code Requirement and writes its binary representation to a file. This is the
same form produced by the SecRequirementCopyData API, and is readily acceptable
as input to Code Signing verification APIs. It can also be used as input to subsequent
invocations of
by passing the filename to the -r option.
The
argument (-r) can be given in various forms. A plain text argument is taken
to be a path to a file containing the requirement. This program will accept
both binary files containing properly compiled requirements code, and source files
that are automatically compiled for use.
An argument of "-" requests that the requirement(s) are read from standard input.
Again, standard input can contain either binary form or text.
Finally, an argument that begins with an equal sign "=" is taken as a literal
requirements source text, and is compiled accordingly for use.
To compile an explicit requirement program and write its binary form to file "output":
To display the requirement program embedded at offset 1234 of file "foo":
The
program exits 0 on success or 1 on failure. Errors in arguments yield exit code 2.
The
command first appeared in
Mac OS 10.5.0 .
[ options ] [ system | phone | "dir" ]
The
command is used to call up another system and act as a dial in
terminal.  It can also do simple file transfers with no error
checking.

takes a single argument, besides the options.  If the argument is the
string "dir" cu will make a direct connection to the port.  This may
only be used by users with write access to the port, as it permits
reprogramming the modem.

Otherwise, if the argument begins with a digit, it is taken to be a
phone number to call.  Otherwise, it is taken to be the name of a
system to call.  The
or
option may be used to name a system beginning with a digit, and the
or
option may be used to name a phone number that does not begin with a
digit.

locates a port to use in the UUCP configuration files.  If a simple
system name is given, it will select a port appropriate for that
system.  The
and
options may be used to control the port selection.

When a connection is made to the remote system,
forks into two processes.  One reads from the port and writes to the
terminal, while the other reads from the terminal and writes to the
port.

provides several commands that may be used during the conversation.
The commands all begin with an escape character, initially
(tilde).  The escape character is only recognized at the beginning of
a line.  To send an escape character to the remote system at the start
of a line, it must be entered twice.  All commands are either a single
character or a word beginning with
(percent sign).

recognizes the following commands:

Terminate the conversation.
Run command in a shell.  If command is empty, starts up a shell.
Run command, sending the standard output to the remote system.
Run command, taking the standard input from the remote system.
Run command, taking the standard input from the remote system and
sending the standard output to the remote system.
Send a break signal, if possible.
Change the local directory.
Send a file to the remote system.  This just dumps the file over the
communication line.  It is assumed that the remote system is expecting
it.
Receive a file from the remote system.  This prompts for the local
file name and for the remote command to execute to begin the file
transfer.  It continues accepting data until the contents of the
variable are seen.
Send a file to a remote Unix system.  This runs the appropriate
commands on the remote system.
Retrieve a file from a remote Unix system.  This runs the appropriate
commands on the remote system.
Set a
variable to the given value.  If value is not given, the variable is
set to
Set a
variable to
Suspend the cu session.  This is only supported on some systems.  On
systems for which ^Z may be used to suspend a job, 
will also suspend the session.
List all the variables and their values.
List all commands.

also supports several variables.  They may be listed with the
command, and set with the
or
commands.

The escape character.  Initially
(tilde).
If this variable is true,
will delay for a second after recognizing the escape character before
printing the name of the local system.  The default is true.
The list of characters which are considered to finish a line.  The
escape character is only recognized after one of these is seen.  The
default is carriage return, ^U, ^C, ^O, ^D, ^S, ^Q, ^R.
Whether to transfer binary data when sending a file.  If this is
false, then newlines in the file being sent are converted to carriage
returns.  The default is false.
A string used before sending a binary character in a file transfer, if
the
variable is true.  The default is ^V.
Whether to check file transfers by examining what the remote system
echoes back.  This probably doesn't work very well.  The default is
false.
The character to look for after sending each line in a file.  The
default is carriage return.
The timeout to use, in seconds, when looking for a character, either
when doing echo checking or when looking for the
character.  The default is 30.
The character to use delete a line if the echo check fails.  The
default is ^U.
The number of times to resend a line if the echo check continues to
fail.  The default is 10.
The string to write after sending a file with the
command.  The default is ^D.
The string to look for when receiving a file with the
command.  The default is $, which is intended to be a typical shell
prompt.
Whether to print accumulated information during a file transfer.  The
default is true.
The following options may be given to
Use even parity.
Use odd parity.
Use no parity.  No parity is also used if both
and
are given.
Echo characters locally (half-duplex mode).
Set the escape character.  Initially
(tilde).  To eliminate the escape character, use
The system to call.
The phone number to call.
Name the port to use.
Equivalent to
Name the line to use by giving a device name.  This may be used to
dial out on ports that are not listed in the UUCP configuration files.
Write access to the device is required.
The speed (baud rate) to use.
Where # is a number, equivalent to
Prompt for the phone number to use.
Enter debugging mode.  Equivalent to
Turn on particular debugging types.  The following types are
recognized: abnormal, chat, handshake, uucp-proto, proto, port,
config, spooldir, execute, incoming, outgoing.  Only abnormal, chat,
handshake, port, config, incoming and outgoing are meaningful for

Multiple types may be given, separated by commas, and the
option may appear multiple times.  A number may also be given, which
will turn on that many types from the foregoing list; for example,
is equivalent to
may be used to turn on all debugging options.
Set configuration file to use.  This option may not be available,
depending upon how