compresses files using the Burrows-Wheeler block sorting
text compression algorithm, and Huffman coding.  Compression is
generally considerably better than that achieved by more conventional
family of statistical compressors.

The command-line options are deliberately very similar to 
those of 
but they are not identical.

expects a list of file names to accompany the
command-line flags.  Each file is replaced by a compressed version of
itself, with the name "original_name.bz2".  
Each compressed file
has the same modification date, permissions, and, when possible,
ownership as the corresponding original, so that these properties can
be correctly restored at decompression time.  File name handling is
naive in the sense that there is no mechanism for preserving original
file names, permissions, ownerships or dates in filesystems which lack
these concepts, or have serious file name length restrictions, such as
MS-DOS.

and
will by default not overwrite existing

If no file names are specified,
compresses from standard
input to standard output.  In this case,
will decline to
write compressed output to a terminal, as this would be entirely
incomprehensible and therefore pointless.

(or
decompresses all
specified files.  Files which were not created by 
will be detected and ignored, and a warning issued.  
attempts to guess the filename for the decompressed file 
from that of the compressed file as follows:

       filename.bz2    becomes   filename
       filename.bz     becomes   filename
       filename.tbz2   becomes   filename.tar
       filename.tbz    becomes   filename.tar
       anyothername    becomes   anyothername.out

If the file does not end in one of the recognised endings, 
or
complains that it cannot
guess the name of the original file, and uses the original name
with
appended.

As with compression, supplying no
filenames causes decompression from 
standard input to standard output.

will correctly decompress a file which is the
concatenation of two or more compressed files.  The result is the
concatenation of the corresponding uncompressed files.  Integrity
of concatenated 
compressed files is also supported.

You can also compress or decompress files to the standard output by
decompressed like this.  The resulting outputs are fed sequentially to
stdout.  Compression of multiple files 
in this manner generates a stream
containing multiple compressed file representations.  Such a stream
can be decompressed correctly only by
version 0.9.0 or
later.  Earlier versions of
will stop after decompressing
the first file in the stream.

(or
decompresses all specified files to
the standard output.

will read arguments from the environment variables
and
in that order, and will process them
before any arguments read from the command line.  This gives a 
convenient way to supply default arguments.

Compression is always performed, even if the compressed 
file is slightly
larger than the original.  Files of less than about one hundred bytes
tend to get larger, since the compression mechanism has a constant
overhead in the region of 50 bytes.  Random data (including the output
of most file compressors) is coded at about 8.05 bits per byte, giving
an expansion of around 0.5%.

As a self-check for your protection, 
bzip2
uses 32-bit CRCs to
make sure that the decompressed version of a file is identical to the
original.  This guards against corruption of the compressed data, and
against undetected bugs in
(hopefully very unlikely).  The
chances of data corruption going undetected is microscopic, about one
chance in four billion for each file processed.  Be aware, though, that
the check occurs upon decompression, so it can only tell you that
something is wrong.  It can't help you 
recover the original uncompressed
data.  You can use 
to try to recover data from
damaged files.

Return values: 0 for a normal exit, 1 for environmental problems (file
compressed file, 3 for an internal consistency error (eg, bug) which
caused
to panic.

